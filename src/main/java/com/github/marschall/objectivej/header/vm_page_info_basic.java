// Generated by jextract

package com.github.marschall.objectivej.header;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct vm_page_info_basic {
 *     int disposition;
 *     int ref_count;
 *     vm_object_id_t object_id;
 *     memory_object_offset_t offset;
 *     int depth;
 *     int __pad;
 * }
 * }
 */
public class vm_page_info_basic {

    vm_page_info_basic() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        ObjCRuntime.C_INT.withName("disposition"),
        ObjCRuntime.C_INT.withName("ref_count"),
        ObjCRuntime.C_LONG_LONG.withName("object_id"),
        ObjCRuntime.C_LONG_LONG.withName("offset"),
        ObjCRuntime.C_INT.withName("depth"),
        ObjCRuntime.C_INT.withName("__pad")
    ).withName("vm_page_info_basic");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt disposition$LAYOUT = (OfInt)$LAYOUT.select(groupElement("disposition"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int disposition
     * }
     */
    public static final OfInt disposition$layout() {
        return disposition$LAYOUT;
    }

    private static final long disposition$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int disposition
     * }
     */
    public static final long disposition$offset() {
        return disposition$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int disposition
     * }
     */
    public static int disposition(MemorySegment struct) {
        return struct.get(disposition$LAYOUT, disposition$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int disposition
     * }
     */
    public static void disposition(MemorySegment struct, int fieldValue) {
        struct.set(disposition$LAYOUT, disposition$OFFSET, fieldValue);
    }

    private static final OfInt ref_count$LAYOUT = (OfInt)$LAYOUT.select(groupElement("ref_count"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int ref_count
     * }
     */
    public static final OfInt ref_count$layout() {
        return ref_count$LAYOUT;
    }

    private static final long ref_count$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int ref_count
     * }
     */
    public static final long ref_count$offset() {
        return ref_count$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int ref_count
     * }
     */
    public static int ref_count(MemorySegment struct) {
        return struct.get(ref_count$LAYOUT, ref_count$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int ref_count
     * }
     */
    public static void ref_count(MemorySegment struct, int fieldValue) {
        struct.set(ref_count$LAYOUT, ref_count$OFFSET, fieldValue);
    }

    private static final OfLong object_id$LAYOUT = (OfLong)$LAYOUT.select(groupElement("object_id"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * vm_object_id_t object_id
     * }
     */
    public static final OfLong object_id$layout() {
        return object_id$LAYOUT;
    }

    private static final long object_id$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * vm_object_id_t object_id
     * }
     */
    public static final long object_id$offset() {
        return object_id$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * vm_object_id_t object_id
     * }
     */
    public static long object_id(MemorySegment struct) {
        return struct.get(object_id$LAYOUT, object_id$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * vm_object_id_t object_id
     * }
     */
    public static void object_id(MemorySegment struct, long fieldValue) {
        struct.set(object_id$LAYOUT, object_id$OFFSET, fieldValue);
    }

    private static final OfLong offset$LAYOUT = (OfLong)$LAYOUT.select(groupElement("offset"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * memory_object_offset_t offset
     * }
     */
    public static final OfLong offset$layout() {
        return offset$LAYOUT;
    }

    private static final long offset$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * memory_object_offset_t offset
     * }
     */
    public static final long offset$offset() {
        return offset$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * memory_object_offset_t offset
     * }
     */
    public static long offset(MemorySegment struct) {
        return struct.get(offset$LAYOUT, offset$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * memory_object_offset_t offset
     * }
     */
    public static void offset(MemorySegment struct, long fieldValue) {
        struct.set(offset$LAYOUT, offset$OFFSET, fieldValue);
    }

    private static final OfInt depth$LAYOUT = (OfInt)$LAYOUT.select(groupElement("depth"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int depth
     * }
     */
    public static final OfInt depth$layout() {
        return depth$LAYOUT;
    }

    private static final long depth$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int depth
     * }
     */
    public static final long depth$offset() {
        return depth$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int depth
     * }
     */
    public static int depth(MemorySegment struct) {
        return struct.get(depth$LAYOUT, depth$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int depth
     * }
     */
    public static void depth(MemorySegment struct, int fieldValue) {
        struct.set(depth$LAYOUT, depth$OFFSET, fieldValue);
    }

    private static final OfInt __pad$LAYOUT = (OfInt)$LAYOUT.select(groupElement("__pad"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int __pad
     * }
     */
    public static final OfInt __pad$layout() {
        return __pad$LAYOUT;
    }

    private static final long __pad$OFFSET = 28;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int __pad
     * }
     */
    public static final long __pad$offset() {
        return __pad$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int __pad
     * }
     */
    public static int __pad(MemorySegment struct) {
        return struct.get(__pad$LAYOUT, __pad$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int __pad
     * }
     */
    public static void __pad(MemorySegment struct, int fieldValue) {
        struct.set(__pad$LAYOUT, __pad$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

