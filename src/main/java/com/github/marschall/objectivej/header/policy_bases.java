// Generated by jextract

package com.github.marschall.objectivej.header;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct policy_bases {
 *     policy_timeshare_base_data_t ts;
 *     policy_rr_base_data_t rr;
 *     policy_fifo_base_data_t fifo;
 * }
 * }
 */
public class policy_bases {

    policy_bases() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        policy_timeshare_base.layout().withName("ts"),
        policy_rr_base.layout().withName("rr"),
        policy_fifo_base.layout().withName("fifo")
    ).withName("policy_bases");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout ts$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("ts"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * policy_timeshare_base_data_t ts
     * }
     */
    public static final GroupLayout ts$layout() {
        return ts$LAYOUT;
    }

    private static final long ts$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * policy_timeshare_base_data_t ts
     * }
     */
    public static final long ts$offset() {
        return ts$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * policy_timeshare_base_data_t ts
     * }
     */
    public static MemorySegment ts(MemorySegment struct) {
        return struct.asSlice(ts$OFFSET, ts$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * policy_timeshare_base_data_t ts
     * }
     */
    public static void ts(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, ts$OFFSET, ts$LAYOUT.byteSize());
    }

    private static final GroupLayout rr$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("rr"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * policy_rr_base_data_t rr
     * }
     */
    public static final GroupLayout rr$layout() {
        return rr$LAYOUT;
    }

    private static final long rr$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * policy_rr_base_data_t rr
     * }
     */
    public static final long rr$offset() {
        return rr$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * policy_rr_base_data_t rr
     * }
     */
    public static MemorySegment rr(MemorySegment struct) {
        return struct.asSlice(rr$OFFSET, rr$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * policy_rr_base_data_t rr
     * }
     */
    public static void rr(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, rr$OFFSET, rr$LAYOUT.byteSize());
    }

    private static final GroupLayout fifo$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("fifo"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * policy_fifo_base_data_t fifo
     * }
     */
    public static final GroupLayout fifo$layout() {
        return fifo$LAYOUT;
    }

    private static final long fifo$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * policy_fifo_base_data_t fifo
     * }
     */
    public static final long fifo$offset() {
        return fifo$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * policy_fifo_base_data_t fifo
     * }
     */
    public static MemorySegment fifo(MemorySegment struct) {
        return struct.asSlice(fifo$OFFSET, fifo$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * policy_fifo_base_data_t fifo
     * }
     */
    public static void fifo(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, fifo$OFFSET, fifo$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

