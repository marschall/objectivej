// Generated by jextract

package com.github.marschall.objectivej.header;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct vm_region_basic_info {
 *     vm_prot_t protection;
 *     vm_prot_t max_protection;
 *     vm_inherit_t inheritance;
 *     boolean_t shared;
 *     boolean_t reserved;
 *     uint32_t offset;
 *     vm_behavior_t behavior;
 *     unsigned short user_wired_count;
 * }
 * }
 */
public class vm_region_basic_info {

    vm_region_basic_info() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        ObjCRuntime.C_INT.withName("protection"),
        ObjCRuntime.C_INT.withName("max_protection"),
        ObjCRuntime.C_INT.withName("inheritance"),
        ObjCRuntime.C_INT.withName("shared"),
        ObjCRuntime.C_INT.withName("reserved"),
        ObjCRuntime.C_INT.withName("offset"),
        ObjCRuntime.C_INT.withName("behavior"),
        ObjCRuntime.C_SHORT.withName("user_wired_count"),
        MemoryLayout.paddingLayout(2)
    ).withName("vm_region_basic_info");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt protection$LAYOUT = (OfInt)$LAYOUT.select(groupElement("protection"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * vm_prot_t protection
     * }
     */
    public static final OfInt protection$layout() {
        return protection$LAYOUT;
    }

    private static final long protection$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * vm_prot_t protection
     * }
     */
    public static final long protection$offset() {
        return protection$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * vm_prot_t protection
     * }
     */
    public static int protection(MemorySegment struct) {
        return struct.get(protection$LAYOUT, protection$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * vm_prot_t protection
     * }
     */
    public static void protection(MemorySegment struct, int fieldValue) {
        struct.set(protection$LAYOUT, protection$OFFSET, fieldValue);
    }

    private static final OfInt max_protection$LAYOUT = (OfInt)$LAYOUT.select(groupElement("max_protection"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * vm_prot_t max_protection
     * }
     */
    public static final OfInt max_protection$layout() {
        return max_protection$LAYOUT;
    }

    private static final long max_protection$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * vm_prot_t max_protection
     * }
     */
    public static final long max_protection$offset() {
        return max_protection$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * vm_prot_t max_protection
     * }
     */
    public static int max_protection(MemorySegment struct) {
        return struct.get(max_protection$LAYOUT, max_protection$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * vm_prot_t max_protection
     * }
     */
    public static void max_protection(MemorySegment struct, int fieldValue) {
        struct.set(max_protection$LAYOUT, max_protection$OFFSET, fieldValue);
    }

    private static final OfInt inheritance$LAYOUT = (OfInt)$LAYOUT.select(groupElement("inheritance"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * vm_inherit_t inheritance
     * }
     */
    public static final OfInt inheritance$layout() {
        return inheritance$LAYOUT;
    }

    private static final long inheritance$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * vm_inherit_t inheritance
     * }
     */
    public static final long inheritance$offset() {
        return inheritance$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * vm_inherit_t inheritance
     * }
     */
    public static int inheritance(MemorySegment struct) {
        return struct.get(inheritance$LAYOUT, inheritance$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * vm_inherit_t inheritance
     * }
     */
    public static void inheritance(MemorySegment struct, int fieldValue) {
        struct.set(inheritance$LAYOUT, inheritance$OFFSET, fieldValue);
    }

    private static final OfInt shared$LAYOUT = (OfInt)$LAYOUT.select(groupElement("shared"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * boolean_t shared
     * }
     */
    public static final OfInt shared$layout() {
        return shared$LAYOUT;
    }

    private static final long shared$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * boolean_t shared
     * }
     */
    public static final long shared$offset() {
        return shared$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * boolean_t shared
     * }
     */
    public static int shared(MemorySegment struct) {
        return struct.get(shared$LAYOUT, shared$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * boolean_t shared
     * }
     */
    public static void shared(MemorySegment struct, int fieldValue) {
        struct.set(shared$LAYOUT, shared$OFFSET, fieldValue);
    }

    private static final OfInt reserved$LAYOUT = (OfInt)$LAYOUT.select(groupElement("reserved"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * boolean_t reserved
     * }
     */
    public static final OfInt reserved$layout() {
        return reserved$LAYOUT;
    }

    private static final long reserved$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * boolean_t reserved
     * }
     */
    public static final long reserved$offset() {
        return reserved$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * boolean_t reserved
     * }
     */
    public static int reserved(MemorySegment struct) {
        return struct.get(reserved$LAYOUT, reserved$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * boolean_t reserved
     * }
     */
    public static void reserved(MemorySegment struct, int fieldValue) {
        struct.set(reserved$LAYOUT, reserved$OFFSET, fieldValue);
    }

    private static final OfInt offset$LAYOUT = (OfInt)$LAYOUT.select(groupElement("offset"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t offset
     * }
     */
    public static final OfInt offset$layout() {
        return offset$LAYOUT;
    }

    private static final long offset$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t offset
     * }
     */
    public static final long offset$offset() {
        return offset$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t offset
     * }
     */
    public static int offset(MemorySegment struct) {
        return struct.get(offset$LAYOUT, offset$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t offset
     * }
     */
    public static void offset(MemorySegment struct, int fieldValue) {
        struct.set(offset$LAYOUT, offset$OFFSET, fieldValue);
    }

    private static final OfInt behavior$LAYOUT = (OfInt)$LAYOUT.select(groupElement("behavior"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * vm_behavior_t behavior
     * }
     */
    public static final OfInt behavior$layout() {
        return behavior$LAYOUT;
    }

    private static final long behavior$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * vm_behavior_t behavior
     * }
     */
    public static final long behavior$offset() {
        return behavior$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * vm_behavior_t behavior
     * }
     */
    public static int behavior(MemorySegment struct) {
        return struct.get(behavior$LAYOUT, behavior$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * vm_behavior_t behavior
     * }
     */
    public static void behavior(MemorySegment struct, int fieldValue) {
        struct.set(behavior$LAYOUT, behavior$OFFSET, fieldValue);
    }

    private static final OfShort user_wired_count$LAYOUT = (OfShort)$LAYOUT.select(groupElement("user_wired_count"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned short user_wired_count
     * }
     */
    public static final OfShort user_wired_count$layout() {
        return user_wired_count$LAYOUT;
    }

    private static final long user_wired_count$OFFSET = 28;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned short user_wired_count
     * }
     */
    public static final long user_wired_count$offset() {
        return user_wired_count$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned short user_wired_count
     * }
     */
    public static short user_wired_count(MemorySegment struct) {
        return struct.get(user_wired_count$LAYOUT, user_wired_count$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned short user_wired_count
     * }
     */
    public static void user_wired_count(MemorySegment struct, short fieldValue) {
        struct.set(user_wired_count$LAYOUT, user_wired_count$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

