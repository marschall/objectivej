// Generated by jextract

package com.github.marschall.objectivej.header;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * union {
 *     struct {
 *         uint32_t hash;
 *         malloc_type_summary_v0_t summary;
 *     };
 *     malloc_type_id_t type_id;
 * }
 * }
 */
public class malloc_type_descriptor_v0_t {

    malloc_type_descriptor_v0_t() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.unionLayout(
        MemoryLayout.structLayout(
            ObjCRuntime.C_INT.withName("hash"),
            malloc_type_summary_v0_t.layout().withName("summary")
        ).withName("$anon$330:2"),
        ObjCRuntime.C_LONG_LONG.withName("type_id")
    ).withName("$anon$329:9");

    /**
     * The layout of this union
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt hash$LAYOUT = (OfInt)$LAYOUT.select(groupElement("$anon$330:2"), groupElement("hash"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t hash
     * }
     */
    public static final OfInt hash$layout() {
        return hash$LAYOUT;
    }

    private static final long hash$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t hash
     * }
     */
    public static final long hash$offset() {
        return hash$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t hash
     * }
     */
    public static int hash(MemorySegment union) {
        return union.get(hash$LAYOUT, hash$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t hash
     * }
     */
    public static void hash(MemorySegment union, int fieldValue) {
        union.set(hash$LAYOUT, hash$OFFSET, fieldValue);
    }

    private static final GroupLayout summary$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("$anon$330:2"), groupElement("summary"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * malloc_type_summary_v0_t summary
     * }
     */
    public static final GroupLayout summary$layout() {
        return summary$LAYOUT;
    }

    private static final long summary$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * malloc_type_summary_v0_t summary
     * }
     */
    public static final long summary$offset() {
        return summary$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * malloc_type_summary_v0_t summary
     * }
     */
    public static MemorySegment summary(MemorySegment union) {
        return union.asSlice(summary$OFFSET, summary$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * malloc_type_summary_v0_t summary
     * }
     */
    public static void summary(MemorySegment union, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, union, summary$OFFSET, summary$LAYOUT.byteSize());
    }

    private static final OfLong type_id$LAYOUT = (OfLong)$LAYOUT.select(groupElement("type_id"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * malloc_type_id_t type_id
     * }
     */
    public static final OfLong type_id$layout() {
        return type_id$LAYOUT;
    }

    private static final long type_id$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * malloc_type_id_t type_id
     * }
     */
    public static final long type_id$offset() {
        return type_id$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * malloc_type_id_t type_id
     * }
     */
    public static long type_id(MemorySegment union) {
        return union.get(type_id$LAYOUT, type_id$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * malloc_type_id_t type_id
     * }
     */
    public static void type_id(MemorySegment union, long fieldValue) {
        union.set(type_id$LAYOUT, type_id$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this union
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

