// Generated by jextract

package com.github.marschall.objectivej.header;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct vm_purgeable_info {
 *     vm_purgeable_stat_t fifo_data[8];
 *     vm_purgeable_stat_t obsolete_data;
 *     vm_purgeable_stat_t lifo_data[8];
 * }
 * }
 */
public class vm_purgeable_info {

    vm_purgeable_info() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.sequenceLayout(8, vm_purgeable_stat.layout()).withName("fifo_data"),
        vm_purgeable_stat.layout().withName("obsolete_data"),
        MemoryLayout.sequenceLayout(8, vm_purgeable_stat.layout()).withName("lifo_data")
    ).withName("vm_purgeable_info");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final SequenceLayout fifo_data$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("fifo_data"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * vm_purgeable_stat_t fifo_data[8]
     * }
     */
    public static final SequenceLayout fifo_data$layout() {
        return fifo_data$LAYOUT;
    }

    private static final long fifo_data$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * vm_purgeable_stat_t fifo_data[8]
     * }
     */
    public static final long fifo_data$offset() {
        return fifo_data$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * vm_purgeable_stat_t fifo_data[8]
     * }
     */
    public static MemorySegment fifo_data(MemorySegment struct) {
        return struct.asSlice(fifo_data$OFFSET, fifo_data$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * vm_purgeable_stat_t fifo_data[8]
     * }
     */
    public static void fifo_data(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, fifo_data$OFFSET, fifo_data$LAYOUT.byteSize());
    }

    private static long[] fifo_data$DIMS = { 8 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * vm_purgeable_stat_t fifo_data[8]
     * }
     */
    public static long[] fifo_data$dimensions() {
        return fifo_data$DIMS;
    }
    private static final MethodHandle fifo_data$ELEM_HANDLE = fifo_data$LAYOUT.sliceHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * vm_purgeable_stat_t fifo_data[8]
     * }
     */
    public static MemorySegment fifo_data(MemorySegment struct, long index0) {
        try {
            return (MemorySegment)fifo_data$ELEM_HANDLE.invokeExact(struct, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * vm_purgeable_stat_t fifo_data[8]
     * }
     */
    public static void fifo_data(MemorySegment struct, long index0, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, fifo_data(struct, index0), 0L, vm_purgeable_stat.layout().byteSize());
    }

    private static final GroupLayout obsolete_data$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("obsolete_data"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * vm_purgeable_stat_t obsolete_data
     * }
     */
    public static final GroupLayout obsolete_data$layout() {
        return obsolete_data$LAYOUT;
    }

    private static final long obsolete_data$OFFSET = 128;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * vm_purgeable_stat_t obsolete_data
     * }
     */
    public static final long obsolete_data$offset() {
        return obsolete_data$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * vm_purgeable_stat_t obsolete_data
     * }
     */
    public static MemorySegment obsolete_data(MemorySegment struct) {
        return struct.asSlice(obsolete_data$OFFSET, obsolete_data$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * vm_purgeable_stat_t obsolete_data
     * }
     */
    public static void obsolete_data(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, obsolete_data$OFFSET, obsolete_data$LAYOUT.byteSize());
    }

    private static final SequenceLayout lifo_data$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("lifo_data"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * vm_purgeable_stat_t lifo_data[8]
     * }
     */
    public static final SequenceLayout lifo_data$layout() {
        return lifo_data$LAYOUT;
    }

    private static final long lifo_data$OFFSET = 144;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * vm_purgeable_stat_t lifo_data[8]
     * }
     */
    public static final long lifo_data$offset() {
        return lifo_data$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * vm_purgeable_stat_t lifo_data[8]
     * }
     */
    public static MemorySegment lifo_data(MemorySegment struct) {
        return struct.asSlice(lifo_data$OFFSET, lifo_data$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * vm_purgeable_stat_t lifo_data[8]
     * }
     */
    public static void lifo_data(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, lifo_data$OFFSET, lifo_data$LAYOUT.byteSize());
    }

    private static long[] lifo_data$DIMS = { 8 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * vm_purgeable_stat_t lifo_data[8]
     * }
     */
    public static long[] lifo_data$dimensions() {
        return lifo_data$DIMS;
    }
    private static final MethodHandle lifo_data$ELEM_HANDLE = lifo_data$LAYOUT.sliceHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * vm_purgeable_stat_t lifo_data[8]
     * }
     */
    public static MemorySegment lifo_data(MemorySegment struct, long index0) {
        try {
            return (MemorySegment)lifo_data$ELEM_HANDLE.invokeExact(struct, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * vm_purgeable_stat_t lifo_data[8]
     * }
     */
    public static void lifo_data(MemorySegment struct, long index0, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, lifo_data(struct, index0), 0L, vm_purgeable_stat.layout().byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

