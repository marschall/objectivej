// Generated by jextract

package com.github.marschall.objectivej.header;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct vm_region_submap_short_info_64 {
 *     vm_prot_t protection;
 *     vm_prot_t max_protection;
 *     vm_inherit_t inheritance;
 *     memory_object_offset_t offset;
 *     unsigned int user_tag;
 *     unsigned int ref_count;
 *     unsigned short shadow_depth;
 *     unsigned char external_pager;
 *     unsigned char share_mode;
 *     boolean_t is_submap;
 *     vm_behavior_t behavior;
 *     vm32_object_id_t object_id;
 *     unsigned short user_wired_count;
 * }
 * }
 */
public class vm_region_submap_short_info_64 {

    vm_region_submap_short_info_64() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        ObjCRuntime.C_INT.withName("protection"),
        ObjCRuntime.C_INT.withName("max_protection"),
        ObjCRuntime.C_INT.withName("inheritance"),
        ObjCRuntime.align(ObjCRuntime.C_LONG_LONG, 4).withName("offset"),
        ObjCRuntime.C_INT.withName("user_tag"),
        ObjCRuntime.C_INT.withName("ref_count"),
        ObjCRuntime.C_SHORT.withName("shadow_depth"),
        ObjCRuntime.C_CHAR.withName("external_pager"),
        ObjCRuntime.C_CHAR.withName("share_mode"),
        ObjCRuntime.C_INT.withName("is_submap"),
        ObjCRuntime.C_INT.withName("behavior"),
        ObjCRuntime.C_INT.withName("object_id"),
        ObjCRuntime.C_SHORT.withName("user_wired_count"),
        MemoryLayout.paddingLayout(2)
    ).withName("vm_region_submap_short_info_64");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt protection$LAYOUT = (OfInt)$LAYOUT.select(groupElement("protection"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * vm_prot_t protection
     * }
     */
    public static final OfInt protection$layout() {
        return protection$LAYOUT;
    }

    private static final long protection$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * vm_prot_t protection
     * }
     */
    public static final long protection$offset() {
        return protection$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * vm_prot_t protection
     * }
     */
    public static int protection(MemorySegment struct) {
        return struct.get(protection$LAYOUT, protection$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * vm_prot_t protection
     * }
     */
    public static void protection(MemorySegment struct, int fieldValue) {
        struct.set(protection$LAYOUT, protection$OFFSET, fieldValue);
    }

    private static final OfInt max_protection$LAYOUT = (OfInt)$LAYOUT.select(groupElement("max_protection"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * vm_prot_t max_protection
     * }
     */
    public static final OfInt max_protection$layout() {
        return max_protection$LAYOUT;
    }

    private static final long max_protection$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * vm_prot_t max_protection
     * }
     */
    public static final long max_protection$offset() {
        return max_protection$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * vm_prot_t max_protection
     * }
     */
    public static int max_protection(MemorySegment struct) {
        return struct.get(max_protection$LAYOUT, max_protection$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * vm_prot_t max_protection
     * }
     */
    public static void max_protection(MemorySegment struct, int fieldValue) {
        struct.set(max_protection$LAYOUT, max_protection$OFFSET, fieldValue);
    }

    private static final OfInt inheritance$LAYOUT = (OfInt)$LAYOUT.select(groupElement("inheritance"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * vm_inherit_t inheritance
     * }
     */
    public static final OfInt inheritance$layout() {
        return inheritance$LAYOUT;
    }

    private static final long inheritance$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * vm_inherit_t inheritance
     * }
     */
    public static final long inheritance$offset() {
        return inheritance$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * vm_inherit_t inheritance
     * }
     */
    public static int inheritance(MemorySegment struct) {
        return struct.get(inheritance$LAYOUT, inheritance$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * vm_inherit_t inheritance
     * }
     */
    public static void inheritance(MemorySegment struct, int fieldValue) {
        struct.set(inheritance$LAYOUT, inheritance$OFFSET, fieldValue);
    }

    private static final OfLong offset$LAYOUT = (OfLong)$LAYOUT.select(groupElement("offset"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * memory_object_offset_t offset
     * }
     */
    public static final OfLong offset$layout() {
        return offset$LAYOUT;
    }

    private static final long offset$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * memory_object_offset_t offset
     * }
     */
    public static final long offset$offset() {
        return offset$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * memory_object_offset_t offset
     * }
     */
    public static long offset(MemorySegment struct) {
        return struct.get(offset$LAYOUT, offset$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * memory_object_offset_t offset
     * }
     */
    public static void offset(MemorySegment struct, long fieldValue) {
        struct.set(offset$LAYOUT, offset$OFFSET, fieldValue);
    }

    private static final OfInt user_tag$LAYOUT = (OfInt)$LAYOUT.select(groupElement("user_tag"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int user_tag
     * }
     */
    public static final OfInt user_tag$layout() {
        return user_tag$LAYOUT;
    }

    private static final long user_tag$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int user_tag
     * }
     */
    public static final long user_tag$offset() {
        return user_tag$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int user_tag
     * }
     */
    public static int user_tag(MemorySegment struct) {
        return struct.get(user_tag$LAYOUT, user_tag$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int user_tag
     * }
     */
    public static void user_tag(MemorySegment struct, int fieldValue) {
        struct.set(user_tag$LAYOUT, user_tag$OFFSET, fieldValue);
    }

    private static final OfInt ref_count$LAYOUT = (OfInt)$LAYOUT.select(groupElement("ref_count"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int ref_count
     * }
     */
    public static final OfInt ref_count$layout() {
        return ref_count$LAYOUT;
    }

    private static final long ref_count$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int ref_count
     * }
     */
    public static final long ref_count$offset() {
        return ref_count$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int ref_count
     * }
     */
    public static int ref_count(MemorySegment struct) {
        return struct.get(ref_count$LAYOUT, ref_count$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int ref_count
     * }
     */
    public static void ref_count(MemorySegment struct, int fieldValue) {
        struct.set(ref_count$LAYOUT, ref_count$OFFSET, fieldValue);
    }

    private static final OfShort shadow_depth$LAYOUT = (OfShort)$LAYOUT.select(groupElement("shadow_depth"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned short shadow_depth
     * }
     */
    public static final OfShort shadow_depth$layout() {
        return shadow_depth$LAYOUT;
    }

    private static final long shadow_depth$OFFSET = 28;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned short shadow_depth
     * }
     */
    public static final long shadow_depth$offset() {
        return shadow_depth$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned short shadow_depth
     * }
     */
    public static short shadow_depth(MemorySegment struct) {
        return struct.get(shadow_depth$LAYOUT, shadow_depth$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned short shadow_depth
     * }
     */
    public static void shadow_depth(MemorySegment struct, short fieldValue) {
        struct.set(shadow_depth$LAYOUT, shadow_depth$OFFSET, fieldValue);
    }

    private static final OfByte external_pager$LAYOUT = (OfByte)$LAYOUT.select(groupElement("external_pager"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned char external_pager
     * }
     */
    public static final OfByte external_pager$layout() {
        return external_pager$LAYOUT;
    }

    private static final long external_pager$OFFSET = 30;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned char external_pager
     * }
     */
    public static final long external_pager$offset() {
        return external_pager$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned char external_pager
     * }
     */
    public static byte external_pager(MemorySegment struct) {
        return struct.get(external_pager$LAYOUT, external_pager$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned char external_pager
     * }
     */
    public static void external_pager(MemorySegment struct, byte fieldValue) {
        struct.set(external_pager$LAYOUT, external_pager$OFFSET, fieldValue);
    }

    private static final OfByte share_mode$LAYOUT = (OfByte)$LAYOUT.select(groupElement("share_mode"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned char share_mode
     * }
     */
    public static final OfByte share_mode$layout() {
        return share_mode$LAYOUT;
    }

    private static final long share_mode$OFFSET = 31;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned char share_mode
     * }
     */
    public static final long share_mode$offset() {
        return share_mode$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned char share_mode
     * }
     */
    public static byte share_mode(MemorySegment struct) {
        return struct.get(share_mode$LAYOUT, share_mode$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned char share_mode
     * }
     */
    public static void share_mode(MemorySegment struct, byte fieldValue) {
        struct.set(share_mode$LAYOUT, share_mode$OFFSET, fieldValue);
    }

    private static final OfInt is_submap$LAYOUT = (OfInt)$LAYOUT.select(groupElement("is_submap"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * boolean_t is_submap
     * }
     */
    public static final OfInt is_submap$layout() {
        return is_submap$LAYOUT;
    }

    private static final long is_submap$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * boolean_t is_submap
     * }
     */
    public static final long is_submap$offset() {
        return is_submap$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * boolean_t is_submap
     * }
     */
    public static int is_submap(MemorySegment struct) {
        return struct.get(is_submap$LAYOUT, is_submap$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * boolean_t is_submap
     * }
     */
    public static void is_submap(MemorySegment struct, int fieldValue) {
        struct.set(is_submap$LAYOUT, is_submap$OFFSET, fieldValue);
    }

    private static final OfInt behavior$LAYOUT = (OfInt)$LAYOUT.select(groupElement("behavior"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * vm_behavior_t behavior
     * }
     */
    public static final OfInt behavior$layout() {
        return behavior$LAYOUT;
    }

    private static final long behavior$OFFSET = 36;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * vm_behavior_t behavior
     * }
     */
    public static final long behavior$offset() {
        return behavior$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * vm_behavior_t behavior
     * }
     */
    public static int behavior(MemorySegment struct) {
        return struct.get(behavior$LAYOUT, behavior$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * vm_behavior_t behavior
     * }
     */
    public static void behavior(MemorySegment struct, int fieldValue) {
        struct.set(behavior$LAYOUT, behavior$OFFSET, fieldValue);
    }

    private static final OfInt object_id$LAYOUT = (OfInt)$LAYOUT.select(groupElement("object_id"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * vm32_object_id_t object_id
     * }
     */
    public static final OfInt object_id$layout() {
        return object_id$LAYOUT;
    }

    private static final long object_id$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * vm32_object_id_t object_id
     * }
     */
    public static final long object_id$offset() {
        return object_id$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * vm32_object_id_t object_id
     * }
     */
    public static int object_id(MemorySegment struct) {
        return struct.get(object_id$LAYOUT, object_id$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * vm32_object_id_t object_id
     * }
     */
    public static void object_id(MemorySegment struct, int fieldValue) {
        struct.set(object_id$LAYOUT, object_id$OFFSET, fieldValue);
    }

    private static final OfShort user_wired_count$LAYOUT = (OfShort)$LAYOUT.select(groupElement("user_wired_count"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned short user_wired_count
     * }
     */
    public static final OfShort user_wired_count$layout() {
        return user_wired_count$LAYOUT;
    }

    private static final long user_wired_count$OFFSET = 44;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned short user_wired_count
     * }
     */
    public static final long user_wired_count$offset() {
        return user_wired_count$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned short user_wired_count
     * }
     */
    public static short user_wired_count(MemorySegment struct) {
        return struct.get(user_wired_count$LAYOUT, user_wired_count$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned short user_wired_count
     * }
     */
    public static void user_wired_count(MemorySegment struct, short fieldValue) {
        struct.set(user_wired_count$LAYOUT, user_wired_count$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

