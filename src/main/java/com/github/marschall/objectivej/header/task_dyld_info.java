// Generated by jextract

package com.github.marschall.objectivej.header;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct task_dyld_info {
 *     mach_vm_address_t all_image_info_addr;
 *     mach_vm_size_t all_image_info_size;
 *     integer_t all_image_info_format;
 * }
 * }
 */
public class task_dyld_info {

    task_dyld_info() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        ObjCRuntime.align(ObjCRuntime.C_LONG_LONG, 4).withName("all_image_info_addr"),
        ObjCRuntime.align(ObjCRuntime.C_LONG_LONG, 4).withName("all_image_info_size"),
        ObjCRuntime.C_INT.withName("all_image_info_format")
    ).withName("task_dyld_info");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfLong all_image_info_addr$LAYOUT = (OfLong)$LAYOUT.select(groupElement("all_image_info_addr"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * mach_vm_address_t all_image_info_addr
     * }
     */
    public static final OfLong all_image_info_addr$layout() {
        return all_image_info_addr$LAYOUT;
    }

    private static final long all_image_info_addr$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * mach_vm_address_t all_image_info_addr
     * }
     */
    public static final long all_image_info_addr$offset() {
        return all_image_info_addr$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * mach_vm_address_t all_image_info_addr
     * }
     */
    public static long all_image_info_addr(MemorySegment struct) {
        return struct.get(all_image_info_addr$LAYOUT, all_image_info_addr$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * mach_vm_address_t all_image_info_addr
     * }
     */
    public static void all_image_info_addr(MemorySegment struct, long fieldValue) {
        struct.set(all_image_info_addr$LAYOUT, all_image_info_addr$OFFSET, fieldValue);
    }

    private static final OfLong all_image_info_size$LAYOUT = (OfLong)$LAYOUT.select(groupElement("all_image_info_size"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * mach_vm_size_t all_image_info_size
     * }
     */
    public static final OfLong all_image_info_size$layout() {
        return all_image_info_size$LAYOUT;
    }

    private static final long all_image_info_size$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * mach_vm_size_t all_image_info_size
     * }
     */
    public static final long all_image_info_size$offset() {
        return all_image_info_size$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * mach_vm_size_t all_image_info_size
     * }
     */
    public static long all_image_info_size(MemorySegment struct) {
        return struct.get(all_image_info_size$LAYOUT, all_image_info_size$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * mach_vm_size_t all_image_info_size
     * }
     */
    public static void all_image_info_size(MemorySegment struct, long fieldValue) {
        struct.set(all_image_info_size$LAYOUT, all_image_info_size$OFFSET, fieldValue);
    }

    private static final OfInt all_image_info_format$LAYOUT = (OfInt)$LAYOUT.select(groupElement("all_image_info_format"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * integer_t all_image_info_format
     * }
     */
    public static final OfInt all_image_info_format$layout() {
        return all_image_info_format$LAYOUT;
    }

    private static final long all_image_info_format$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * integer_t all_image_info_format
     * }
     */
    public static final long all_image_info_format$offset() {
        return all_image_info_format$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * integer_t all_image_info_format
     * }
     */
    public static int all_image_info_format(MemorySegment struct) {
        return struct.get(all_image_info_format$LAYOUT, all_image_info_format$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * integer_t all_image_info_format
     * }
     */
    public static void all_image_info_format(MemorySegment struct, int fieldValue) {
        struct.set(all_image_info_format$LAYOUT, all_image_info_format$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

