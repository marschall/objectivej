// Generated by jextract

package com.github.marschall.objectivej.header;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct mach_port_options {
 *     uint32_t flags;
 *     mach_port_limits_t mpl;
 *     union {
 *         uint64_t reserved[2];
 *         mach_port_name_t work_interval_port;
 *         mach_service_port_info_t service_port_info;
 *         mach_port_name_t service_port_name;
 *     };
 * }
 * }
 */
public class mach_port_options {

    mach_port_options() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        ObjCRuntime.C_INT.withName("flags"),
        mach_port_limits.layout().withName("mpl"),
        MemoryLayout.unionLayout(
            MemoryLayout.sequenceLayout(2, ObjCRuntime.C_LONG_LONG).withName("reserved"),
            ObjCRuntime.C_INT.withName("work_interval_port"),
            ObjCRuntime.C_POINTER.withName("service_port_info"),
            ObjCRuntime.C_INT.withName("service_port_name")
        ).withName("$anon$378:2")
    ).withName("mach_port_options");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt flags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("flags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t flags
     * }
     */
    public static final OfInt flags$layout() {
        return flags$LAYOUT;
    }

    private static final long flags$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t flags
     * }
     */
    public static final long flags$offset() {
        return flags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t flags
     * }
     */
    public static int flags(MemorySegment struct) {
        return struct.get(flags$LAYOUT, flags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t flags
     * }
     */
    public static void flags(MemorySegment struct, int fieldValue) {
        struct.set(flags$LAYOUT, flags$OFFSET, fieldValue);
    }

    private static final GroupLayout mpl$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("mpl"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * mach_port_limits_t mpl
     * }
     */
    public static final GroupLayout mpl$layout() {
        return mpl$LAYOUT;
    }

    private static final long mpl$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * mach_port_limits_t mpl
     * }
     */
    public static final long mpl$offset() {
        return mpl$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * mach_port_limits_t mpl
     * }
     */
    public static MemorySegment mpl(MemorySegment struct) {
        return struct.asSlice(mpl$OFFSET, mpl$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * mach_port_limits_t mpl
     * }
     */
    public static void mpl(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, mpl$OFFSET, mpl$LAYOUT.byteSize());
    }

    private static final SequenceLayout reserved$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("$anon$378:2"), groupElement("reserved"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint64_t reserved[2]
     * }
     */
    public static final SequenceLayout reserved$layout() {
        return reserved$LAYOUT;
    }

    private static final long reserved$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint64_t reserved[2]
     * }
     */
    public static final long reserved$offset() {
        return reserved$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint64_t reserved[2]
     * }
     */
    public static MemorySegment reserved(MemorySegment struct) {
        return struct.asSlice(reserved$OFFSET, reserved$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint64_t reserved[2]
     * }
     */
    public static void reserved(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, reserved$OFFSET, reserved$LAYOUT.byteSize());
    }

    private static long[] reserved$DIMS = { 2 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * uint64_t reserved[2]
     * }
     */
    public static long[] reserved$dimensions() {
        return reserved$DIMS;
    }
    private static final VarHandle reserved$ELEM_HANDLE = reserved$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * uint64_t reserved[2]
     * }
     */
    public static long reserved(MemorySegment struct, long index0) {
        return (long)reserved$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * uint64_t reserved[2]
     * }
     */
    public static void reserved(MemorySegment struct, long index0, long fieldValue) {
        reserved$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final OfInt work_interval_port$LAYOUT = (OfInt)$LAYOUT.select(groupElement("$anon$378:2"), groupElement("work_interval_port"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * mach_port_name_t work_interval_port
     * }
     */
    public static final OfInt work_interval_port$layout() {
        return work_interval_port$LAYOUT;
    }

    private static final long work_interval_port$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * mach_port_name_t work_interval_port
     * }
     */
    public static final long work_interval_port$offset() {
        return work_interval_port$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * mach_port_name_t work_interval_port
     * }
     */
    public static int work_interval_port(MemorySegment struct) {
        return struct.get(work_interval_port$LAYOUT, work_interval_port$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * mach_port_name_t work_interval_port
     * }
     */
    public static void work_interval_port(MemorySegment struct, int fieldValue) {
        struct.set(work_interval_port$LAYOUT, work_interval_port$OFFSET, fieldValue);
    }

    private static final AddressLayout service_port_info$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("$anon$378:2"), groupElement("service_port_info"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * mach_service_port_info_t service_port_info
     * }
     */
    public static final AddressLayout service_port_info$layout() {
        return service_port_info$LAYOUT;
    }

    private static final long service_port_info$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * mach_service_port_info_t service_port_info
     * }
     */
    public static final long service_port_info$offset() {
        return service_port_info$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * mach_service_port_info_t service_port_info
     * }
     */
    public static MemorySegment service_port_info(MemorySegment struct) {
        return struct.get(service_port_info$LAYOUT, service_port_info$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * mach_service_port_info_t service_port_info
     * }
     */
    public static void service_port_info(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(service_port_info$LAYOUT, service_port_info$OFFSET, fieldValue);
    }

    private static final OfInt service_port_name$LAYOUT = (OfInt)$LAYOUT.select(groupElement("$anon$378:2"), groupElement("service_port_name"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * mach_port_name_t service_port_name
     * }
     */
    public static final OfInt service_port_name$layout() {
        return service_port_name$LAYOUT;
    }

    private static final long service_port_name$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * mach_port_name_t service_port_name
     * }
     */
    public static final long service_port_name$offset() {
        return service_port_name$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * mach_port_name_t service_port_name
     * }
     */
    public static int service_port_name(MemorySegment struct) {
        return struct.get(service_port_name$LAYOUT, service_port_name$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * mach_port_name_t service_port_name
     * }
     */
    public static void service_port_name(MemorySegment struct, int fieldValue) {
        struct.set(service_port_name$LAYOUT, service_port_name$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

