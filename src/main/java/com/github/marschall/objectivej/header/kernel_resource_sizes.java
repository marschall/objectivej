// Generated by jextract

package com.github.marschall.objectivej.header;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct kernel_resource_sizes {
 *     natural_t task;
 *     natural_t thread;
 *     natural_t port;
 *     natural_t memory_region;
 *     natural_t memory_object;
 * }
 * }
 */
public class kernel_resource_sizes {

    kernel_resource_sizes() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        ObjCRuntime.C_INT.withName("task"),
        ObjCRuntime.C_INT.withName("thread"),
        ObjCRuntime.C_INT.withName("port"),
        ObjCRuntime.C_INT.withName("memory_region"),
        ObjCRuntime.C_INT.withName("memory_object")
    ).withName("kernel_resource_sizes");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt task$LAYOUT = (OfInt)$LAYOUT.select(groupElement("task"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * natural_t task
     * }
     */
    public static final OfInt task$layout() {
        return task$LAYOUT;
    }

    private static final long task$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * natural_t task
     * }
     */
    public static final long task$offset() {
        return task$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * natural_t task
     * }
     */
    public static int task(MemorySegment struct) {
        return struct.get(task$LAYOUT, task$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * natural_t task
     * }
     */
    public static void task(MemorySegment struct, int fieldValue) {
        struct.set(task$LAYOUT, task$OFFSET, fieldValue);
    }

    private static final OfInt thread$LAYOUT = (OfInt)$LAYOUT.select(groupElement("thread"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * natural_t thread
     * }
     */
    public static final OfInt thread$layout() {
        return thread$LAYOUT;
    }

    private static final long thread$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * natural_t thread
     * }
     */
    public static final long thread$offset() {
        return thread$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * natural_t thread
     * }
     */
    public static int thread(MemorySegment struct) {
        return struct.get(thread$LAYOUT, thread$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * natural_t thread
     * }
     */
    public static void thread(MemorySegment struct, int fieldValue) {
        struct.set(thread$LAYOUT, thread$OFFSET, fieldValue);
    }

    private static final OfInt port$LAYOUT = (OfInt)$LAYOUT.select(groupElement("port"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * natural_t port
     * }
     */
    public static final OfInt port$layout() {
        return port$LAYOUT;
    }

    private static final long port$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * natural_t port
     * }
     */
    public static final long port$offset() {
        return port$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * natural_t port
     * }
     */
    public static int port(MemorySegment struct) {
        return struct.get(port$LAYOUT, port$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * natural_t port
     * }
     */
    public static void port(MemorySegment struct, int fieldValue) {
        struct.set(port$LAYOUT, port$OFFSET, fieldValue);
    }

    private static final OfInt memory_region$LAYOUT = (OfInt)$LAYOUT.select(groupElement("memory_region"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * natural_t memory_region
     * }
     */
    public static final OfInt memory_region$layout() {
        return memory_region$LAYOUT;
    }

    private static final long memory_region$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * natural_t memory_region
     * }
     */
    public static final long memory_region$offset() {
        return memory_region$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * natural_t memory_region
     * }
     */
    public static int memory_region(MemorySegment struct) {
        return struct.get(memory_region$LAYOUT, memory_region$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * natural_t memory_region
     * }
     */
    public static void memory_region(MemorySegment struct, int fieldValue) {
        struct.set(memory_region$LAYOUT, memory_region$OFFSET, fieldValue);
    }

    private static final OfInt memory_object$LAYOUT = (OfInt)$LAYOUT.select(groupElement("memory_object"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * natural_t memory_object
     * }
     */
    public static final OfInt memory_object$layout() {
        return memory_object$LAYOUT;
    }

    private static final long memory_object$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * natural_t memory_object
     * }
     */
    public static final long memory_object$offset() {
        return memory_object$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * natural_t memory_object
     * }
     */
    public static int memory_object(MemorySegment struct) {
        return struct.get(memory_object$LAYOUT, memory_object$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * natural_t memory_object
     * }
     */
    public static void memory_object(MemorySegment struct, int fieldValue) {
        struct.set(memory_object$LAYOUT, memory_object$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

