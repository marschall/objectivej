// Generated by jextract

package com.github.marschall.objectivej.header;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct task_kernelmemory_info {
 *     uint64_t total_palloc;
 *     uint64_t total_pfree;
 *     uint64_t total_salloc;
 *     uint64_t total_sfree;
 * }
 * }
 */
public class task_kernelmemory_info {

    task_kernelmemory_info() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        ObjCRuntime.align(ObjCRuntime.C_LONG_LONG, 4).withName("total_palloc"),
        ObjCRuntime.align(ObjCRuntime.C_LONG_LONG, 4).withName("total_pfree"),
        ObjCRuntime.align(ObjCRuntime.C_LONG_LONG, 4).withName("total_salloc"),
        ObjCRuntime.align(ObjCRuntime.C_LONG_LONG, 4).withName("total_sfree")
    ).withName("task_kernelmemory_info");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfLong total_palloc$LAYOUT = (OfLong)$LAYOUT.select(groupElement("total_palloc"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint64_t total_palloc
     * }
     */
    public static final OfLong total_palloc$layout() {
        return total_palloc$LAYOUT;
    }

    private static final long total_palloc$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint64_t total_palloc
     * }
     */
    public static final long total_palloc$offset() {
        return total_palloc$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint64_t total_palloc
     * }
     */
    public static long total_palloc(MemorySegment struct) {
        return struct.get(total_palloc$LAYOUT, total_palloc$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint64_t total_palloc
     * }
     */
    public static void total_palloc(MemorySegment struct, long fieldValue) {
        struct.set(total_palloc$LAYOUT, total_palloc$OFFSET, fieldValue);
    }

    private static final OfLong total_pfree$LAYOUT = (OfLong)$LAYOUT.select(groupElement("total_pfree"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint64_t total_pfree
     * }
     */
    public static final OfLong total_pfree$layout() {
        return total_pfree$LAYOUT;
    }

    private static final long total_pfree$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint64_t total_pfree
     * }
     */
    public static final long total_pfree$offset() {
        return total_pfree$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint64_t total_pfree
     * }
     */
    public static long total_pfree(MemorySegment struct) {
        return struct.get(total_pfree$LAYOUT, total_pfree$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint64_t total_pfree
     * }
     */
    public static void total_pfree(MemorySegment struct, long fieldValue) {
        struct.set(total_pfree$LAYOUT, total_pfree$OFFSET, fieldValue);
    }

    private static final OfLong total_salloc$LAYOUT = (OfLong)$LAYOUT.select(groupElement("total_salloc"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint64_t total_salloc
     * }
     */
    public static final OfLong total_salloc$layout() {
        return total_salloc$LAYOUT;
    }

    private static final long total_salloc$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint64_t total_salloc
     * }
     */
    public static final long total_salloc$offset() {
        return total_salloc$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint64_t total_salloc
     * }
     */
    public static long total_salloc(MemorySegment struct) {
        return struct.get(total_salloc$LAYOUT, total_salloc$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint64_t total_salloc
     * }
     */
    public static void total_salloc(MemorySegment struct, long fieldValue) {
        struct.set(total_salloc$LAYOUT, total_salloc$OFFSET, fieldValue);
    }

    private static final OfLong total_sfree$LAYOUT = (OfLong)$LAYOUT.select(groupElement("total_sfree"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint64_t total_sfree
     * }
     */
    public static final OfLong total_sfree$layout() {
        return total_sfree$LAYOUT;
    }

    private static final long total_sfree$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint64_t total_sfree
     * }
     */
    public static final long total_sfree$offset() {
        return total_sfree$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint64_t total_sfree
     * }
     */
    public static long total_sfree(MemorySegment struct) {
        return struct.get(total_sfree$LAYOUT, total_sfree$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint64_t total_sfree
     * }
     */
    public static void total_sfree(MemorySegment struct, long fieldValue) {
        struct.set(total_sfree$LAYOUT, total_sfree$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

