// Generated by jextract

package com.github.marschall.objectivej.header;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct vm_extmod_statistics {
 *     int64_t task_for_pid_count;
 *     int64_t task_for_pid_caller_count;
 *     int64_t thread_creation_count;
 *     int64_t thread_creation_caller_count;
 *     int64_t thread_set_state_count;
 *     int64_t thread_set_state_caller_count;
 * }
 * }
 */
public class vm_extmod_statistics {

    vm_extmod_statistics() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        ObjCRuntime.C_LONG_LONG.withName("task_for_pid_count"),
        ObjCRuntime.C_LONG_LONG.withName("task_for_pid_caller_count"),
        ObjCRuntime.C_LONG_LONG.withName("thread_creation_count"),
        ObjCRuntime.C_LONG_LONG.withName("thread_creation_caller_count"),
        ObjCRuntime.C_LONG_LONG.withName("thread_set_state_count"),
        ObjCRuntime.C_LONG_LONG.withName("thread_set_state_caller_count")
    ).withName("vm_extmod_statistics");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfLong task_for_pid_count$LAYOUT = (OfLong)$LAYOUT.select(groupElement("task_for_pid_count"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int64_t task_for_pid_count
     * }
     */
    public static final OfLong task_for_pid_count$layout() {
        return task_for_pid_count$LAYOUT;
    }

    private static final long task_for_pid_count$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int64_t task_for_pid_count
     * }
     */
    public static final long task_for_pid_count$offset() {
        return task_for_pid_count$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int64_t task_for_pid_count
     * }
     */
    public static long task_for_pid_count(MemorySegment struct) {
        return struct.get(task_for_pid_count$LAYOUT, task_for_pid_count$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int64_t task_for_pid_count
     * }
     */
    public static void task_for_pid_count(MemorySegment struct, long fieldValue) {
        struct.set(task_for_pid_count$LAYOUT, task_for_pid_count$OFFSET, fieldValue);
    }

    private static final OfLong task_for_pid_caller_count$LAYOUT = (OfLong)$LAYOUT.select(groupElement("task_for_pid_caller_count"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int64_t task_for_pid_caller_count
     * }
     */
    public static final OfLong task_for_pid_caller_count$layout() {
        return task_for_pid_caller_count$LAYOUT;
    }

    private static final long task_for_pid_caller_count$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int64_t task_for_pid_caller_count
     * }
     */
    public static final long task_for_pid_caller_count$offset() {
        return task_for_pid_caller_count$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int64_t task_for_pid_caller_count
     * }
     */
    public static long task_for_pid_caller_count(MemorySegment struct) {
        return struct.get(task_for_pid_caller_count$LAYOUT, task_for_pid_caller_count$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int64_t task_for_pid_caller_count
     * }
     */
    public static void task_for_pid_caller_count(MemorySegment struct, long fieldValue) {
        struct.set(task_for_pid_caller_count$LAYOUT, task_for_pid_caller_count$OFFSET, fieldValue);
    }

    private static final OfLong thread_creation_count$LAYOUT = (OfLong)$LAYOUT.select(groupElement("thread_creation_count"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int64_t thread_creation_count
     * }
     */
    public static final OfLong thread_creation_count$layout() {
        return thread_creation_count$LAYOUT;
    }

    private static final long thread_creation_count$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int64_t thread_creation_count
     * }
     */
    public static final long thread_creation_count$offset() {
        return thread_creation_count$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int64_t thread_creation_count
     * }
     */
    public static long thread_creation_count(MemorySegment struct) {
        return struct.get(thread_creation_count$LAYOUT, thread_creation_count$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int64_t thread_creation_count
     * }
     */
    public static void thread_creation_count(MemorySegment struct, long fieldValue) {
        struct.set(thread_creation_count$LAYOUT, thread_creation_count$OFFSET, fieldValue);
    }

    private static final OfLong thread_creation_caller_count$LAYOUT = (OfLong)$LAYOUT.select(groupElement("thread_creation_caller_count"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int64_t thread_creation_caller_count
     * }
     */
    public static final OfLong thread_creation_caller_count$layout() {
        return thread_creation_caller_count$LAYOUT;
    }

    private static final long thread_creation_caller_count$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int64_t thread_creation_caller_count
     * }
     */
    public static final long thread_creation_caller_count$offset() {
        return thread_creation_caller_count$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int64_t thread_creation_caller_count
     * }
     */
    public static long thread_creation_caller_count(MemorySegment struct) {
        return struct.get(thread_creation_caller_count$LAYOUT, thread_creation_caller_count$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int64_t thread_creation_caller_count
     * }
     */
    public static void thread_creation_caller_count(MemorySegment struct, long fieldValue) {
        struct.set(thread_creation_caller_count$LAYOUT, thread_creation_caller_count$OFFSET, fieldValue);
    }

    private static final OfLong thread_set_state_count$LAYOUT = (OfLong)$LAYOUT.select(groupElement("thread_set_state_count"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int64_t thread_set_state_count
     * }
     */
    public static final OfLong thread_set_state_count$layout() {
        return thread_set_state_count$LAYOUT;
    }

    private static final long thread_set_state_count$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int64_t thread_set_state_count
     * }
     */
    public static final long thread_set_state_count$offset() {
        return thread_set_state_count$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int64_t thread_set_state_count
     * }
     */
    public static long thread_set_state_count(MemorySegment struct) {
        return struct.get(thread_set_state_count$LAYOUT, thread_set_state_count$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int64_t thread_set_state_count
     * }
     */
    public static void thread_set_state_count(MemorySegment struct, long fieldValue) {
        struct.set(thread_set_state_count$LAYOUT, thread_set_state_count$OFFSET, fieldValue);
    }

    private static final OfLong thread_set_state_caller_count$LAYOUT = (OfLong)$LAYOUT.select(groupElement("thread_set_state_caller_count"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int64_t thread_set_state_caller_count
     * }
     */
    public static final OfLong thread_set_state_caller_count$layout() {
        return thread_set_state_caller_count$LAYOUT;
    }

    private static final long thread_set_state_caller_count$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int64_t thread_set_state_caller_count
     * }
     */
    public static final long thread_set_state_caller_count$offset() {
        return thread_set_state_caller_count$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int64_t thread_set_state_caller_count
     * }
     */
    public static long thread_set_state_caller_count(MemorySegment struct) {
        return struct.get(thread_set_state_caller_count$LAYOUT, thread_set_state_caller_count$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int64_t thread_set_state_caller_count
     * }
     */
    public static void thread_set_state_caller_count(MemorySegment struct, long fieldValue) {
        struct.set(thread_set_state_caller_count$LAYOUT, thread_set_state_caller_count$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

