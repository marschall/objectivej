// Generated by jextract

package com.github.marschall.objectivej.header;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct {
 *     uint32_t version : 4;
 *     uint32_t reserved_0 : 2;
 *     malloc_type_callsite_flags_v0_t callsite_flags : 4;
 *     malloc_type_kind_v0_t type_kind : 2;
 *     uint32_t reserved_1 : 4;
 *     malloc_type_layout_semantics_v0_t layout_semantics;
 * }
 * }
 */
public class malloc_type_summary_v0_t {

    malloc_type_summary_v0_t() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.paddingLayout(2),
        malloc_type_layout_semantics_v0_t.layout().withName("layout_semantics")
    ).withName("$anon$295:9");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout layout_semantics$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("layout_semantics"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * malloc_type_layout_semantics_v0_t layout_semantics
     * }
     */
    public static final GroupLayout layout_semantics$layout() {
        return layout_semantics$LAYOUT;
    }

    private static final long layout_semantics$OFFSET = 2;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * malloc_type_layout_semantics_v0_t layout_semantics
     * }
     */
    public static final long layout_semantics$offset() {
        return layout_semantics$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * malloc_type_layout_semantics_v0_t layout_semantics
     * }
     */
    public static MemorySegment layout_semantics(MemorySegment struct) {
        return struct.asSlice(layout_semantics$OFFSET, layout_semantics$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * malloc_type_layout_semantics_v0_t layout_semantics
     * }
     */
    public static void layout_semantics(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, layout_semantics$OFFSET, layout_semantics$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

