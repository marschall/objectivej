// Generated by jextract

package com.github.marschall.objectivej.header;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct vm_region_top_info {
 *     unsigned int obj_id;
 *     unsigned int ref_count;
 *     unsigned int private_pages_resident;
 *     unsigned int shared_pages_resident;
 *     unsigned char share_mode;
 * }
 * }
 */
public class vm_region_top_info {

    vm_region_top_info() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        ObjCRuntime.C_INT.withName("obj_id"),
        ObjCRuntime.C_INT.withName("ref_count"),
        ObjCRuntime.C_INT.withName("private_pages_resident"),
        ObjCRuntime.C_INT.withName("shared_pages_resident"),
        ObjCRuntime.C_CHAR.withName("share_mode"),
        MemoryLayout.paddingLayout(3)
    ).withName("vm_region_top_info");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt obj_id$LAYOUT = (OfInt)$LAYOUT.select(groupElement("obj_id"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int obj_id
     * }
     */
    public static final OfInt obj_id$layout() {
        return obj_id$LAYOUT;
    }

    private static final long obj_id$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int obj_id
     * }
     */
    public static final long obj_id$offset() {
        return obj_id$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int obj_id
     * }
     */
    public static int obj_id(MemorySegment struct) {
        return struct.get(obj_id$LAYOUT, obj_id$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int obj_id
     * }
     */
    public static void obj_id(MemorySegment struct, int fieldValue) {
        struct.set(obj_id$LAYOUT, obj_id$OFFSET, fieldValue);
    }

    private static final OfInt ref_count$LAYOUT = (OfInt)$LAYOUT.select(groupElement("ref_count"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int ref_count
     * }
     */
    public static final OfInt ref_count$layout() {
        return ref_count$LAYOUT;
    }

    private static final long ref_count$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int ref_count
     * }
     */
    public static final long ref_count$offset() {
        return ref_count$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int ref_count
     * }
     */
    public static int ref_count(MemorySegment struct) {
        return struct.get(ref_count$LAYOUT, ref_count$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int ref_count
     * }
     */
    public static void ref_count(MemorySegment struct, int fieldValue) {
        struct.set(ref_count$LAYOUT, ref_count$OFFSET, fieldValue);
    }

    private static final OfInt private_pages_resident$LAYOUT = (OfInt)$LAYOUT.select(groupElement("private_pages_resident"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int private_pages_resident
     * }
     */
    public static final OfInt private_pages_resident$layout() {
        return private_pages_resident$LAYOUT;
    }

    private static final long private_pages_resident$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int private_pages_resident
     * }
     */
    public static final long private_pages_resident$offset() {
        return private_pages_resident$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int private_pages_resident
     * }
     */
    public static int private_pages_resident(MemorySegment struct) {
        return struct.get(private_pages_resident$LAYOUT, private_pages_resident$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int private_pages_resident
     * }
     */
    public static void private_pages_resident(MemorySegment struct, int fieldValue) {
        struct.set(private_pages_resident$LAYOUT, private_pages_resident$OFFSET, fieldValue);
    }

    private static final OfInt shared_pages_resident$LAYOUT = (OfInt)$LAYOUT.select(groupElement("shared_pages_resident"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int shared_pages_resident
     * }
     */
    public static final OfInt shared_pages_resident$layout() {
        return shared_pages_resident$LAYOUT;
    }

    private static final long shared_pages_resident$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int shared_pages_resident
     * }
     */
    public static final long shared_pages_resident$offset() {
        return shared_pages_resident$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int shared_pages_resident
     * }
     */
    public static int shared_pages_resident(MemorySegment struct) {
        return struct.get(shared_pages_resident$LAYOUT, shared_pages_resident$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int shared_pages_resident
     * }
     */
    public static void shared_pages_resident(MemorySegment struct, int fieldValue) {
        struct.set(shared_pages_resident$LAYOUT, shared_pages_resident$OFFSET, fieldValue);
    }

    private static final OfByte share_mode$LAYOUT = (OfByte)$LAYOUT.select(groupElement("share_mode"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned char share_mode
     * }
     */
    public static final OfByte share_mode$layout() {
        return share_mode$LAYOUT;
    }

    private static final long share_mode$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned char share_mode
     * }
     */
    public static final long share_mode$offset() {
        return share_mode$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned char share_mode
     * }
     */
    public static byte share_mode(MemorySegment struct) {
        return struct.get(share_mode$LAYOUT, share_mode$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned char share_mode
     * }
     */
    public static void share_mode(MemorySegment struct, byte fieldValue) {
        struct.set(share_mode$LAYOUT, share_mode$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

