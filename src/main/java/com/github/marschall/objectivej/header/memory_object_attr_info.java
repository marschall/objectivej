// Generated by jextract

package com.github.marschall.objectivej.header;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct memory_object_attr_info {
 *     memory_object_copy_strategy_t copy_strategy;
 *     memory_object_cluster_size_t cluster_size;
 *     boolean_t may_cache_object;
 *     boolean_t temporary;
 * }
 * }
 */
public class memory_object_attr_info {

    memory_object_attr_info() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        ObjCRuntime.C_INT.withName("copy_strategy"),
        ObjCRuntime.C_INT.withName("cluster_size"),
        ObjCRuntime.C_INT.withName("may_cache_object"),
        ObjCRuntime.C_INT.withName("temporary")
    ).withName("memory_object_attr_info");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt copy_strategy$LAYOUT = (OfInt)$LAYOUT.select(groupElement("copy_strategy"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * memory_object_copy_strategy_t copy_strategy
     * }
     */
    public static final OfInt copy_strategy$layout() {
        return copy_strategy$LAYOUT;
    }

    private static final long copy_strategy$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * memory_object_copy_strategy_t copy_strategy
     * }
     */
    public static final long copy_strategy$offset() {
        return copy_strategy$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * memory_object_copy_strategy_t copy_strategy
     * }
     */
    public static int copy_strategy(MemorySegment struct) {
        return struct.get(copy_strategy$LAYOUT, copy_strategy$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * memory_object_copy_strategy_t copy_strategy
     * }
     */
    public static void copy_strategy(MemorySegment struct, int fieldValue) {
        struct.set(copy_strategy$LAYOUT, copy_strategy$OFFSET, fieldValue);
    }

    private static final OfInt cluster_size$LAYOUT = (OfInt)$LAYOUT.select(groupElement("cluster_size"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * memory_object_cluster_size_t cluster_size
     * }
     */
    public static final OfInt cluster_size$layout() {
        return cluster_size$LAYOUT;
    }

    private static final long cluster_size$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * memory_object_cluster_size_t cluster_size
     * }
     */
    public static final long cluster_size$offset() {
        return cluster_size$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * memory_object_cluster_size_t cluster_size
     * }
     */
    public static int cluster_size(MemorySegment struct) {
        return struct.get(cluster_size$LAYOUT, cluster_size$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * memory_object_cluster_size_t cluster_size
     * }
     */
    public static void cluster_size(MemorySegment struct, int fieldValue) {
        struct.set(cluster_size$LAYOUT, cluster_size$OFFSET, fieldValue);
    }

    private static final OfInt may_cache_object$LAYOUT = (OfInt)$LAYOUT.select(groupElement("may_cache_object"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * boolean_t may_cache_object
     * }
     */
    public static final OfInt may_cache_object$layout() {
        return may_cache_object$LAYOUT;
    }

    private static final long may_cache_object$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * boolean_t may_cache_object
     * }
     */
    public static final long may_cache_object$offset() {
        return may_cache_object$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * boolean_t may_cache_object
     * }
     */
    public static int may_cache_object(MemorySegment struct) {
        return struct.get(may_cache_object$LAYOUT, may_cache_object$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * boolean_t may_cache_object
     * }
     */
    public static void may_cache_object(MemorySegment struct, int fieldValue) {
        struct.set(may_cache_object$LAYOUT, may_cache_object$OFFSET, fieldValue);
    }

    private static final OfInt temporary$LAYOUT = (OfInt)$LAYOUT.select(groupElement("temporary"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * boolean_t temporary
     * }
     */
    public static final OfInt temporary$layout() {
        return temporary$LAYOUT;
    }

    private static final long temporary$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * boolean_t temporary
     * }
     */
    public static final long temporary$offset() {
        return temporary$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * boolean_t temporary
     * }
     */
    public static int temporary(MemorySegment struct) {
        return struct.get(temporary$LAYOUT, temporary$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * boolean_t temporary
     * }
     */
    public static void temporary(MemorySegment struct, int fieldValue) {
        struct.set(temporary$LAYOUT, temporary$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

