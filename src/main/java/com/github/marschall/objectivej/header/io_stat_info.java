// Generated by jextract

package com.github.marschall.objectivej.header;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct io_stat_info {
 *     struct io_stat_entry disk_reads;
 *     struct io_stat_entry io_priority[4];
 *     struct io_stat_entry paging;
 *     struct io_stat_entry metadata;
 *     struct io_stat_entry total_io;
 * }
 * }
 */
public class io_stat_info {

    io_stat_info() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        io_stat_entry.layout().withName("disk_reads"),
        MemoryLayout.sequenceLayout(4, io_stat_entry.layout()).withName("io_priority"),
        io_stat_entry.layout().withName("paging"),
        io_stat_entry.layout().withName("metadata"),
        io_stat_entry.layout().withName("total_io")
    ).withName("io_stat_info");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout disk_reads$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("disk_reads"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct io_stat_entry disk_reads
     * }
     */
    public static final GroupLayout disk_reads$layout() {
        return disk_reads$LAYOUT;
    }

    private static final long disk_reads$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct io_stat_entry disk_reads
     * }
     */
    public static final long disk_reads$offset() {
        return disk_reads$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct io_stat_entry disk_reads
     * }
     */
    public static MemorySegment disk_reads(MemorySegment struct) {
        return struct.asSlice(disk_reads$OFFSET, disk_reads$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct io_stat_entry disk_reads
     * }
     */
    public static void disk_reads(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, disk_reads$OFFSET, disk_reads$LAYOUT.byteSize());
    }

    private static final SequenceLayout io_priority$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("io_priority"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct io_stat_entry io_priority[4]
     * }
     */
    public static final SequenceLayout io_priority$layout() {
        return io_priority$LAYOUT;
    }

    private static final long io_priority$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct io_stat_entry io_priority[4]
     * }
     */
    public static final long io_priority$offset() {
        return io_priority$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct io_stat_entry io_priority[4]
     * }
     */
    public static MemorySegment io_priority(MemorySegment struct) {
        return struct.asSlice(io_priority$OFFSET, io_priority$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct io_stat_entry io_priority[4]
     * }
     */
    public static void io_priority(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, io_priority$OFFSET, io_priority$LAYOUT.byteSize());
    }

    private static long[] io_priority$DIMS = { 4 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * struct io_stat_entry io_priority[4]
     * }
     */
    public static long[] io_priority$dimensions() {
        return io_priority$DIMS;
    }
    private static final MethodHandle io_priority$ELEM_HANDLE = io_priority$LAYOUT.sliceHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * struct io_stat_entry io_priority[4]
     * }
     */
    public static MemorySegment io_priority(MemorySegment struct, long index0) {
        try {
            return (MemorySegment)io_priority$ELEM_HANDLE.invokeExact(struct, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * struct io_stat_entry io_priority[4]
     * }
     */
    public static void io_priority(MemorySegment struct, long index0, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, io_priority(struct, index0), 0L, io_stat_entry.layout().byteSize());
    }

    private static final GroupLayout paging$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("paging"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct io_stat_entry paging
     * }
     */
    public static final GroupLayout paging$layout() {
        return paging$LAYOUT;
    }

    private static final long paging$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct io_stat_entry paging
     * }
     */
    public static final long paging$offset() {
        return paging$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct io_stat_entry paging
     * }
     */
    public static MemorySegment paging(MemorySegment struct) {
        return struct.asSlice(paging$OFFSET, paging$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct io_stat_entry paging
     * }
     */
    public static void paging(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, paging$OFFSET, paging$LAYOUT.byteSize());
    }

    private static final GroupLayout metadata$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("metadata"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct io_stat_entry metadata
     * }
     */
    public static final GroupLayout metadata$layout() {
        return metadata$LAYOUT;
    }

    private static final long metadata$OFFSET = 96;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct io_stat_entry metadata
     * }
     */
    public static final long metadata$offset() {
        return metadata$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct io_stat_entry metadata
     * }
     */
    public static MemorySegment metadata(MemorySegment struct) {
        return struct.asSlice(metadata$OFFSET, metadata$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct io_stat_entry metadata
     * }
     */
    public static void metadata(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, metadata$OFFSET, metadata$LAYOUT.byteSize());
    }

    private static final GroupLayout total_io$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("total_io"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct io_stat_entry total_io
     * }
     */
    public static final GroupLayout total_io$layout() {
        return total_io$LAYOUT;
    }

    private static final long total_io$OFFSET = 112;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct io_stat_entry total_io
     * }
     */
    public static final long total_io$offset() {
        return total_io$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct io_stat_entry total_io
     * }
     */
    public static MemorySegment total_io(MemorySegment struct) {
        return struct.asSlice(total_io$OFFSET, total_io$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct io_stat_entry total_io
     * }
     */
    public static void total_io(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, total_io$OFFSET, total_io$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

