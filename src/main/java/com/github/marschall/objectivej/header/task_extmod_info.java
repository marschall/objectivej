// Generated by jextract

package com.github.marschall.objectivej.header;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct task_extmod_info {
 *     unsigned char task_uuid[16];
 *     vm_extmod_statistics_data_t extmod_statistics;
 * }
 * }
 */
public class task_extmod_info {

    task_extmod_info() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.sequenceLayout(16, ObjCRuntime.C_CHAR).withName("task_uuid"),
        ObjCRuntime.align(vm_extmod_statistics.layout(), 4).withName("extmod_statistics")
    ).withName("task_extmod_info");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final SequenceLayout task_uuid$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("task_uuid"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned char task_uuid[16]
     * }
     */
    public static final SequenceLayout task_uuid$layout() {
        return task_uuid$LAYOUT;
    }

    private static final long task_uuid$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned char task_uuid[16]
     * }
     */
    public static final long task_uuid$offset() {
        return task_uuid$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned char task_uuid[16]
     * }
     */
    public static MemorySegment task_uuid(MemorySegment struct) {
        return struct.asSlice(task_uuid$OFFSET, task_uuid$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned char task_uuid[16]
     * }
     */
    public static void task_uuid(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, task_uuid$OFFSET, task_uuid$LAYOUT.byteSize());
    }

    private static long[] task_uuid$DIMS = { 16 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * unsigned char task_uuid[16]
     * }
     */
    public static long[] task_uuid$dimensions() {
        return task_uuid$DIMS;
    }
    private static final VarHandle task_uuid$ELEM_HANDLE = task_uuid$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * unsigned char task_uuid[16]
     * }
     */
    public static byte task_uuid(MemorySegment struct, long index0) {
        return (byte)task_uuid$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * unsigned char task_uuid[16]
     * }
     */
    public static void task_uuid(MemorySegment struct, long index0, byte fieldValue) {
        task_uuid$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final GroupLayout extmod_statistics$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("extmod_statistics"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * vm_extmod_statistics_data_t extmod_statistics
     * }
     */
    public static final GroupLayout extmod_statistics$layout() {
        return extmod_statistics$LAYOUT;
    }

    private static final long extmod_statistics$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * vm_extmod_statistics_data_t extmod_statistics
     * }
     */
    public static final long extmod_statistics$offset() {
        return extmod_statistics$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * vm_extmod_statistics_data_t extmod_statistics
     * }
     */
    public static MemorySegment extmod_statistics(MemorySegment struct) {
        return struct.asSlice(extmod_statistics$OFFSET, extmod_statistics$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * vm_extmod_statistics_data_t extmod_statistics
     * }
     */
    public static void extmod_statistics(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, extmod_statistics$OFFSET, extmod_statistics$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

