// Generated by jextract

package com.github.marschall.objectivej.header;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct thread_basic_info {
 *     time_value_t user_time;
 *     time_value_t system_time;
 *     integer_t cpu_usage;
 *     policy_t policy;
 *     integer_t run_state;
 *     integer_t flags;
 *     integer_t suspend_count;
 *     integer_t sleep_time;
 * }
 * }
 */
public class thread_basic_info {

    thread_basic_info() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        time_value.layout().withName("user_time"),
        time_value.layout().withName("system_time"),
        ObjCRuntime.C_INT.withName("cpu_usage"),
        ObjCRuntime.C_INT.withName("policy"),
        ObjCRuntime.C_INT.withName("run_state"),
        ObjCRuntime.C_INT.withName("flags"),
        ObjCRuntime.C_INT.withName("suspend_count"),
        ObjCRuntime.C_INT.withName("sleep_time")
    ).withName("thread_basic_info");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout user_time$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("user_time"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * time_value_t user_time
     * }
     */
    public static final GroupLayout user_time$layout() {
        return user_time$LAYOUT;
    }

    private static final long user_time$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * time_value_t user_time
     * }
     */
    public static final long user_time$offset() {
        return user_time$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * time_value_t user_time
     * }
     */
    public static MemorySegment user_time(MemorySegment struct) {
        return struct.asSlice(user_time$OFFSET, user_time$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * time_value_t user_time
     * }
     */
    public static void user_time(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, user_time$OFFSET, user_time$LAYOUT.byteSize());
    }

    private static final GroupLayout system_time$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("system_time"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * time_value_t system_time
     * }
     */
    public static final GroupLayout system_time$layout() {
        return system_time$LAYOUT;
    }

    private static final long system_time$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * time_value_t system_time
     * }
     */
    public static final long system_time$offset() {
        return system_time$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * time_value_t system_time
     * }
     */
    public static MemorySegment system_time(MemorySegment struct) {
        return struct.asSlice(system_time$OFFSET, system_time$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * time_value_t system_time
     * }
     */
    public static void system_time(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, system_time$OFFSET, system_time$LAYOUT.byteSize());
    }

    private static final OfInt cpu_usage$LAYOUT = (OfInt)$LAYOUT.select(groupElement("cpu_usage"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * integer_t cpu_usage
     * }
     */
    public static final OfInt cpu_usage$layout() {
        return cpu_usage$LAYOUT;
    }

    private static final long cpu_usage$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * integer_t cpu_usage
     * }
     */
    public static final long cpu_usage$offset() {
        return cpu_usage$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * integer_t cpu_usage
     * }
     */
    public static int cpu_usage(MemorySegment struct) {
        return struct.get(cpu_usage$LAYOUT, cpu_usage$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * integer_t cpu_usage
     * }
     */
    public static void cpu_usage(MemorySegment struct, int fieldValue) {
        struct.set(cpu_usage$LAYOUT, cpu_usage$OFFSET, fieldValue);
    }

    private static final OfInt policy$LAYOUT = (OfInt)$LAYOUT.select(groupElement("policy"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * policy_t policy
     * }
     */
    public static final OfInt policy$layout() {
        return policy$LAYOUT;
    }

    private static final long policy$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * policy_t policy
     * }
     */
    public static final long policy$offset() {
        return policy$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * policy_t policy
     * }
     */
    public static int policy(MemorySegment struct) {
        return struct.get(policy$LAYOUT, policy$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * policy_t policy
     * }
     */
    public static void policy(MemorySegment struct, int fieldValue) {
        struct.set(policy$LAYOUT, policy$OFFSET, fieldValue);
    }

    private static final OfInt run_state$LAYOUT = (OfInt)$LAYOUT.select(groupElement("run_state"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * integer_t run_state
     * }
     */
    public static final OfInt run_state$layout() {
        return run_state$LAYOUT;
    }

    private static final long run_state$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * integer_t run_state
     * }
     */
    public static final long run_state$offset() {
        return run_state$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * integer_t run_state
     * }
     */
    public static int run_state(MemorySegment struct) {
        return struct.get(run_state$LAYOUT, run_state$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * integer_t run_state
     * }
     */
    public static void run_state(MemorySegment struct, int fieldValue) {
        struct.set(run_state$LAYOUT, run_state$OFFSET, fieldValue);
    }

    private static final OfInt flags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("flags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * integer_t flags
     * }
     */
    public static final OfInt flags$layout() {
        return flags$LAYOUT;
    }

    private static final long flags$OFFSET = 28;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * integer_t flags
     * }
     */
    public static final long flags$offset() {
        return flags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * integer_t flags
     * }
     */
    public static int flags(MemorySegment struct) {
        return struct.get(flags$LAYOUT, flags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * integer_t flags
     * }
     */
    public static void flags(MemorySegment struct, int fieldValue) {
        struct.set(flags$LAYOUT, flags$OFFSET, fieldValue);
    }

    private static final OfInt suspend_count$LAYOUT = (OfInt)$LAYOUT.select(groupElement("suspend_count"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * integer_t suspend_count
     * }
     */
    public static final OfInt suspend_count$layout() {
        return suspend_count$LAYOUT;
    }

    private static final long suspend_count$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * integer_t suspend_count
     * }
     */
    public static final long suspend_count$offset() {
        return suspend_count$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * integer_t suspend_count
     * }
     */
    public static int suspend_count(MemorySegment struct) {
        return struct.get(suspend_count$LAYOUT, suspend_count$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * integer_t suspend_count
     * }
     */
    public static void suspend_count(MemorySegment struct, int fieldValue) {
        struct.set(suspend_count$LAYOUT, suspend_count$OFFSET, fieldValue);
    }

    private static final OfInt sleep_time$LAYOUT = (OfInt)$LAYOUT.select(groupElement("sleep_time"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * integer_t sleep_time
     * }
     */
    public static final OfInt sleep_time$layout() {
        return sleep_time$LAYOUT;
    }

    private static final long sleep_time$OFFSET = 36;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * integer_t sleep_time
     * }
     */
    public static final long sleep_time$offset() {
        return sleep_time$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * integer_t sleep_time
     * }
     */
    public static int sleep_time(MemorySegment struct) {
        return struct.get(sleep_time$LAYOUT, sleep_time$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * integer_t sleep_time
     * }
     */
    public static void sleep_time(MemorySegment struct, int fieldValue) {
        struct.set(sleep_time$LAYOUT, sleep_time$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

