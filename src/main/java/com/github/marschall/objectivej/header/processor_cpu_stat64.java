// Generated by jextract

package com.github.marschall.objectivej.header;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct processor_cpu_stat64 {
 *     uint64_t irq_ex_cnt;
 *     uint64_t ipi_cnt;
 *     uint64_t timer_cnt;
 *     uint64_t undef_ex_cnt;
 *     uint64_t unaligned_cnt;
 *     uint64_t vfp_cnt;
 *     uint64_t vfp_shortv_cnt;
 *     uint64_t data_ex_cnt;
 *     uint64_t instr_ex_cnt;
 *     uint64_t pmi_cnt;
 * }
 * }
 */
public class processor_cpu_stat64 {

    processor_cpu_stat64() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        ObjCRuntime.align(ObjCRuntime.C_LONG_LONG, 4).withName("irq_ex_cnt"),
        ObjCRuntime.align(ObjCRuntime.C_LONG_LONG, 4).withName("ipi_cnt"),
        ObjCRuntime.align(ObjCRuntime.C_LONG_LONG, 4).withName("timer_cnt"),
        ObjCRuntime.align(ObjCRuntime.C_LONG_LONG, 4).withName("undef_ex_cnt"),
        ObjCRuntime.align(ObjCRuntime.C_LONG_LONG, 4).withName("unaligned_cnt"),
        ObjCRuntime.align(ObjCRuntime.C_LONG_LONG, 4).withName("vfp_cnt"),
        ObjCRuntime.align(ObjCRuntime.C_LONG_LONG, 4).withName("vfp_shortv_cnt"),
        ObjCRuntime.align(ObjCRuntime.C_LONG_LONG, 4).withName("data_ex_cnt"),
        ObjCRuntime.align(ObjCRuntime.C_LONG_LONG, 4).withName("instr_ex_cnt"),
        ObjCRuntime.align(ObjCRuntime.C_LONG_LONG, 4).withName("pmi_cnt")
    ).withName("processor_cpu_stat64");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfLong irq_ex_cnt$LAYOUT = (OfLong)$LAYOUT.select(groupElement("irq_ex_cnt"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint64_t irq_ex_cnt
     * }
     */
    public static final OfLong irq_ex_cnt$layout() {
        return irq_ex_cnt$LAYOUT;
    }

    private static final long irq_ex_cnt$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint64_t irq_ex_cnt
     * }
     */
    public static final long irq_ex_cnt$offset() {
        return irq_ex_cnt$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint64_t irq_ex_cnt
     * }
     */
    public static long irq_ex_cnt(MemorySegment struct) {
        return struct.get(irq_ex_cnt$LAYOUT, irq_ex_cnt$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint64_t irq_ex_cnt
     * }
     */
    public static void irq_ex_cnt(MemorySegment struct, long fieldValue) {
        struct.set(irq_ex_cnt$LAYOUT, irq_ex_cnt$OFFSET, fieldValue);
    }

    private static final OfLong ipi_cnt$LAYOUT = (OfLong)$LAYOUT.select(groupElement("ipi_cnt"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint64_t ipi_cnt
     * }
     */
    public static final OfLong ipi_cnt$layout() {
        return ipi_cnt$LAYOUT;
    }

    private static final long ipi_cnt$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint64_t ipi_cnt
     * }
     */
    public static final long ipi_cnt$offset() {
        return ipi_cnt$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint64_t ipi_cnt
     * }
     */
    public static long ipi_cnt(MemorySegment struct) {
        return struct.get(ipi_cnt$LAYOUT, ipi_cnt$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint64_t ipi_cnt
     * }
     */
    public static void ipi_cnt(MemorySegment struct, long fieldValue) {
        struct.set(ipi_cnt$LAYOUT, ipi_cnt$OFFSET, fieldValue);
    }

    private static final OfLong timer_cnt$LAYOUT = (OfLong)$LAYOUT.select(groupElement("timer_cnt"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint64_t timer_cnt
     * }
     */
    public static final OfLong timer_cnt$layout() {
        return timer_cnt$LAYOUT;
    }

    private static final long timer_cnt$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint64_t timer_cnt
     * }
     */
    public static final long timer_cnt$offset() {
        return timer_cnt$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint64_t timer_cnt
     * }
     */
    public static long timer_cnt(MemorySegment struct) {
        return struct.get(timer_cnt$LAYOUT, timer_cnt$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint64_t timer_cnt
     * }
     */
    public static void timer_cnt(MemorySegment struct, long fieldValue) {
        struct.set(timer_cnt$LAYOUT, timer_cnt$OFFSET, fieldValue);
    }

    private static final OfLong undef_ex_cnt$LAYOUT = (OfLong)$LAYOUT.select(groupElement("undef_ex_cnt"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint64_t undef_ex_cnt
     * }
     */
    public static final OfLong undef_ex_cnt$layout() {
        return undef_ex_cnt$LAYOUT;
    }

    private static final long undef_ex_cnt$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint64_t undef_ex_cnt
     * }
     */
    public static final long undef_ex_cnt$offset() {
        return undef_ex_cnt$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint64_t undef_ex_cnt
     * }
     */
    public static long undef_ex_cnt(MemorySegment struct) {
        return struct.get(undef_ex_cnt$LAYOUT, undef_ex_cnt$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint64_t undef_ex_cnt
     * }
     */
    public static void undef_ex_cnt(MemorySegment struct, long fieldValue) {
        struct.set(undef_ex_cnt$LAYOUT, undef_ex_cnt$OFFSET, fieldValue);
    }

    private static final OfLong unaligned_cnt$LAYOUT = (OfLong)$LAYOUT.select(groupElement("unaligned_cnt"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint64_t unaligned_cnt
     * }
     */
    public static final OfLong unaligned_cnt$layout() {
        return unaligned_cnt$LAYOUT;
    }

    private static final long unaligned_cnt$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint64_t unaligned_cnt
     * }
     */
    public static final long unaligned_cnt$offset() {
        return unaligned_cnt$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint64_t unaligned_cnt
     * }
     */
    public static long unaligned_cnt(MemorySegment struct) {
        return struct.get(unaligned_cnt$LAYOUT, unaligned_cnt$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint64_t unaligned_cnt
     * }
     */
    public static void unaligned_cnt(MemorySegment struct, long fieldValue) {
        struct.set(unaligned_cnt$LAYOUT, unaligned_cnt$OFFSET, fieldValue);
    }

    private static final OfLong vfp_cnt$LAYOUT = (OfLong)$LAYOUT.select(groupElement("vfp_cnt"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint64_t vfp_cnt
     * }
     */
    public static final OfLong vfp_cnt$layout() {
        return vfp_cnt$LAYOUT;
    }

    private static final long vfp_cnt$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint64_t vfp_cnt
     * }
     */
    public static final long vfp_cnt$offset() {
        return vfp_cnt$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint64_t vfp_cnt
     * }
     */
    public static long vfp_cnt(MemorySegment struct) {
        return struct.get(vfp_cnt$LAYOUT, vfp_cnt$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint64_t vfp_cnt
     * }
     */
    public static void vfp_cnt(MemorySegment struct, long fieldValue) {
        struct.set(vfp_cnt$LAYOUT, vfp_cnt$OFFSET, fieldValue);
    }

    private static final OfLong vfp_shortv_cnt$LAYOUT = (OfLong)$LAYOUT.select(groupElement("vfp_shortv_cnt"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint64_t vfp_shortv_cnt
     * }
     */
    public static final OfLong vfp_shortv_cnt$layout() {
        return vfp_shortv_cnt$LAYOUT;
    }

    private static final long vfp_shortv_cnt$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint64_t vfp_shortv_cnt
     * }
     */
    public static final long vfp_shortv_cnt$offset() {
        return vfp_shortv_cnt$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint64_t vfp_shortv_cnt
     * }
     */
    public static long vfp_shortv_cnt(MemorySegment struct) {
        return struct.get(vfp_shortv_cnt$LAYOUT, vfp_shortv_cnt$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint64_t vfp_shortv_cnt
     * }
     */
    public static void vfp_shortv_cnt(MemorySegment struct, long fieldValue) {
        struct.set(vfp_shortv_cnt$LAYOUT, vfp_shortv_cnt$OFFSET, fieldValue);
    }

    private static final OfLong data_ex_cnt$LAYOUT = (OfLong)$LAYOUT.select(groupElement("data_ex_cnt"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint64_t data_ex_cnt
     * }
     */
    public static final OfLong data_ex_cnt$layout() {
        return data_ex_cnt$LAYOUT;
    }

    private static final long data_ex_cnt$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint64_t data_ex_cnt
     * }
     */
    public static final long data_ex_cnt$offset() {
        return data_ex_cnt$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint64_t data_ex_cnt
     * }
     */
    public static long data_ex_cnt(MemorySegment struct) {
        return struct.get(data_ex_cnt$LAYOUT, data_ex_cnt$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint64_t data_ex_cnt
     * }
     */
    public static void data_ex_cnt(MemorySegment struct, long fieldValue) {
        struct.set(data_ex_cnt$LAYOUT, data_ex_cnt$OFFSET, fieldValue);
    }

    private static final OfLong instr_ex_cnt$LAYOUT = (OfLong)$LAYOUT.select(groupElement("instr_ex_cnt"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint64_t instr_ex_cnt
     * }
     */
    public static final OfLong instr_ex_cnt$layout() {
        return instr_ex_cnt$LAYOUT;
    }

    private static final long instr_ex_cnt$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint64_t instr_ex_cnt
     * }
     */
    public static final long instr_ex_cnt$offset() {
        return instr_ex_cnt$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint64_t instr_ex_cnt
     * }
     */
    public static long instr_ex_cnt(MemorySegment struct) {
        return struct.get(instr_ex_cnt$LAYOUT, instr_ex_cnt$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint64_t instr_ex_cnt
     * }
     */
    public static void instr_ex_cnt(MemorySegment struct, long fieldValue) {
        struct.set(instr_ex_cnt$LAYOUT, instr_ex_cnt$OFFSET, fieldValue);
    }

    private static final OfLong pmi_cnt$LAYOUT = (OfLong)$LAYOUT.select(groupElement("pmi_cnt"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint64_t pmi_cnt
     * }
     */
    public static final OfLong pmi_cnt$layout() {
        return pmi_cnt$LAYOUT;
    }

    private static final long pmi_cnt$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint64_t pmi_cnt
     * }
     */
    public static final long pmi_cnt$offset() {
        return pmi_cnt$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint64_t pmi_cnt
     * }
     */
    public static long pmi_cnt(MemorySegment struct) {
        return struct.get(pmi_cnt$LAYOUT, pmi_cnt$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint64_t pmi_cnt
     * }
     */
    public static void pmi_cnt(MemorySegment struct, long fieldValue) {
        struct.set(pmi_cnt$LAYOUT, pmi_cnt$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

