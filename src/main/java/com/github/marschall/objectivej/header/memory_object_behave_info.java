// Generated by jextract

package com.github.marschall.objectivej.header;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct memory_object_behave_info {
 *     memory_object_copy_strategy_t copy_strategy;
 *     boolean_t temporary;
 *     boolean_t invalidate;
 *     boolean_t silent_overwrite;
 *     boolean_t advisory_pageout;
 * }
 * }
 */
public class memory_object_behave_info {

    memory_object_behave_info() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        ObjCRuntime.C_INT.withName("copy_strategy"),
        ObjCRuntime.C_INT.withName("temporary"),
        ObjCRuntime.C_INT.withName("invalidate"),
        ObjCRuntime.C_INT.withName("silent_overwrite"),
        ObjCRuntime.C_INT.withName("advisory_pageout")
    ).withName("memory_object_behave_info");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt copy_strategy$LAYOUT = (OfInt)$LAYOUT.select(groupElement("copy_strategy"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * memory_object_copy_strategy_t copy_strategy
     * }
     */
    public static final OfInt copy_strategy$layout() {
        return copy_strategy$LAYOUT;
    }

    private static final long copy_strategy$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * memory_object_copy_strategy_t copy_strategy
     * }
     */
    public static final long copy_strategy$offset() {
        return copy_strategy$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * memory_object_copy_strategy_t copy_strategy
     * }
     */
    public static int copy_strategy(MemorySegment struct) {
        return struct.get(copy_strategy$LAYOUT, copy_strategy$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * memory_object_copy_strategy_t copy_strategy
     * }
     */
    public static void copy_strategy(MemorySegment struct, int fieldValue) {
        struct.set(copy_strategy$LAYOUT, copy_strategy$OFFSET, fieldValue);
    }

    private static final OfInt temporary$LAYOUT = (OfInt)$LAYOUT.select(groupElement("temporary"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * boolean_t temporary
     * }
     */
    public static final OfInt temporary$layout() {
        return temporary$LAYOUT;
    }

    private static final long temporary$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * boolean_t temporary
     * }
     */
    public static final long temporary$offset() {
        return temporary$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * boolean_t temporary
     * }
     */
    public static int temporary(MemorySegment struct) {
        return struct.get(temporary$LAYOUT, temporary$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * boolean_t temporary
     * }
     */
    public static void temporary(MemorySegment struct, int fieldValue) {
        struct.set(temporary$LAYOUT, temporary$OFFSET, fieldValue);
    }

    private static final OfInt invalidate$LAYOUT = (OfInt)$LAYOUT.select(groupElement("invalidate"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * boolean_t invalidate
     * }
     */
    public static final OfInt invalidate$layout() {
        return invalidate$LAYOUT;
    }

    private static final long invalidate$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * boolean_t invalidate
     * }
     */
    public static final long invalidate$offset() {
        return invalidate$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * boolean_t invalidate
     * }
     */
    public static int invalidate(MemorySegment struct) {
        return struct.get(invalidate$LAYOUT, invalidate$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * boolean_t invalidate
     * }
     */
    public static void invalidate(MemorySegment struct, int fieldValue) {
        struct.set(invalidate$LAYOUT, invalidate$OFFSET, fieldValue);
    }

    private static final OfInt silent_overwrite$LAYOUT = (OfInt)$LAYOUT.select(groupElement("silent_overwrite"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * boolean_t silent_overwrite
     * }
     */
    public static final OfInt silent_overwrite$layout() {
        return silent_overwrite$LAYOUT;
    }

    private static final long silent_overwrite$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * boolean_t silent_overwrite
     * }
     */
    public static final long silent_overwrite$offset() {
        return silent_overwrite$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * boolean_t silent_overwrite
     * }
     */
    public static int silent_overwrite(MemorySegment struct) {
        return struct.get(silent_overwrite$LAYOUT, silent_overwrite$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * boolean_t silent_overwrite
     * }
     */
    public static void silent_overwrite(MemorySegment struct, int fieldValue) {
        struct.set(silent_overwrite$LAYOUT, silent_overwrite$OFFSET, fieldValue);
    }

    private static final OfInt advisory_pageout$LAYOUT = (OfInt)$LAYOUT.select(groupElement("advisory_pageout"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * boolean_t advisory_pageout
     * }
     */
    public static final OfInt advisory_pageout$layout() {
        return advisory_pageout$LAYOUT;
    }

    private static final long advisory_pageout$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * boolean_t advisory_pageout
     * }
     */
    public static final long advisory_pageout$offset() {
        return advisory_pageout$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * boolean_t advisory_pageout
     * }
     */
    public static int advisory_pageout(MemorySegment struct) {
        return struct.get(advisory_pageout$LAYOUT, advisory_pageout$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * boolean_t advisory_pageout
     * }
     */
    public static void advisory_pageout(MemorySegment struct, int fieldValue) {
        struct.set(advisory_pageout$LAYOUT, advisory_pageout$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

