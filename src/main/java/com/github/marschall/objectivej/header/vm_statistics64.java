// Generated by jextract

package com.github.marschall.objectivej.header;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct vm_statistics64 {
 *     natural_t free_count;
 *     natural_t active_count;
 *     natural_t inactive_count;
 *     natural_t wire_count;
 *     uint64_t zero_fill_count;
 *     uint64_t reactivations;
 *     uint64_t pageins;
 *     uint64_t pageouts;
 *     uint64_t faults;
 *     uint64_t cow_faults;
 *     uint64_t lookups;
 *     uint64_t hits;
 *     uint64_t purges;
 *     natural_t purgeable_count;
 *     natural_t speculative_count;
 *     uint64_t decompressions;
 *     uint64_t compressions;
 *     uint64_t swapins;
 *     uint64_t swapouts;
 *     natural_t compressor_page_count;
 *     natural_t throttled_count;
 *     natural_t external_page_count;
 *     natural_t internal_page_count;
 *     uint64_t total_uncompressed_pages_in_compressor;
 * }
 * }
 */
public class vm_statistics64 {

    vm_statistics64() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        ObjCRuntime.C_INT.withName("free_count"),
        ObjCRuntime.C_INT.withName("active_count"),
        ObjCRuntime.C_INT.withName("inactive_count"),
        ObjCRuntime.C_INT.withName("wire_count"),
        ObjCRuntime.C_LONG_LONG.withName("zero_fill_count"),
        ObjCRuntime.C_LONG_LONG.withName("reactivations"),
        ObjCRuntime.C_LONG_LONG.withName("pageins"),
        ObjCRuntime.C_LONG_LONG.withName("pageouts"),
        ObjCRuntime.C_LONG_LONG.withName("faults"),
        ObjCRuntime.C_LONG_LONG.withName("cow_faults"),
        ObjCRuntime.C_LONG_LONG.withName("lookups"),
        ObjCRuntime.C_LONG_LONG.withName("hits"),
        ObjCRuntime.C_LONG_LONG.withName("purges"),
        ObjCRuntime.C_INT.withName("purgeable_count"),
        ObjCRuntime.C_INT.withName("speculative_count"),
        ObjCRuntime.C_LONG_LONG.withName("decompressions"),
        ObjCRuntime.C_LONG_LONG.withName("compressions"),
        ObjCRuntime.C_LONG_LONG.withName("swapins"),
        ObjCRuntime.C_LONG_LONG.withName("swapouts"),
        ObjCRuntime.C_INT.withName("compressor_page_count"),
        ObjCRuntime.C_INT.withName("throttled_count"),
        ObjCRuntime.C_INT.withName("external_page_count"),
        ObjCRuntime.C_INT.withName("internal_page_count"),
        ObjCRuntime.C_LONG_LONG.withName("total_uncompressed_pages_in_compressor")
    ).withName("vm_statistics64");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt free_count$LAYOUT = (OfInt)$LAYOUT.select(groupElement("free_count"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * natural_t free_count
     * }
     */
    public static final OfInt free_count$layout() {
        return free_count$LAYOUT;
    }

    private static final long free_count$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * natural_t free_count
     * }
     */
    public static final long free_count$offset() {
        return free_count$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * natural_t free_count
     * }
     */
    public static int free_count(MemorySegment struct) {
        return struct.get(free_count$LAYOUT, free_count$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * natural_t free_count
     * }
     */
    public static void free_count(MemorySegment struct, int fieldValue) {
        struct.set(free_count$LAYOUT, free_count$OFFSET, fieldValue);
    }

    private static final OfInt active_count$LAYOUT = (OfInt)$LAYOUT.select(groupElement("active_count"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * natural_t active_count
     * }
     */
    public static final OfInt active_count$layout() {
        return active_count$LAYOUT;
    }

    private static final long active_count$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * natural_t active_count
     * }
     */
    public static final long active_count$offset() {
        return active_count$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * natural_t active_count
     * }
     */
    public static int active_count(MemorySegment struct) {
        return struct.get(active_count$LAYOUT, active_count$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * natural_t active_count
     * }
     */
    public static void active_count(MemorySegment struct, int fieldValue) {
        struct.set(active_count$LAYOUT, active_count$OFFSET, fieldValue);
    }

    private static final OfInt inactive_count$LAYOUT = (OfInt)$LAYOUT.select(groupElement("inactive_count"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * natural_t inactive_count
     * }
     */
    public static final OfInt inactive_count$layout() {
        return inactive_count$LAYOUT;
    }

    private static final long inactive_count$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * natural_t inactive_count
     * }
     */
    public static final long inactive_count$offset() {
        return inactive_count$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * natural_t inactive_count
     * }
     */
    public static int inactive_count(MemorySegment struct) {
        return struct.get(inactive_count$LAYOUT, inactive_count$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * natural_t inactive_count
     * }
     */
    public static void inactive_count(MemorySegment struct, int fieldValue) {
        struct.set(inactive_count$LAYOUT, inactive_count$OFFSET, fieldValue);
    }

    private static final OfInt wire_count$LAYOUT = (OfInt)$LAYOUT.select(groupElement("wire_count"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * natural_t wire_count
     * }
     */
    public static final OfInt wire_count$layout() {
        return wire_count$LAYOUT;
    }

    private static final long wire_count$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * natural_t wire_count
     * }
     */
    public static final long wire_count$offset() {
        return wire_count$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * natural_t wire_count
     * }
     */
    public static int wire_count(MemorySegment struct) {
        return struct.get(wire_count$LAYOUT, wire_count$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * natural_t wire_count
     * }
     */
    public static void wire_count(MemorySegment struct, int fieldValue) {
        struct.set(wire_count$LAYOUT, wire_count$OFFSET, fieldValue);
    }

    private static final OfLong zero_fill_count$LAYOUT = (OfLong)$LAYOUT.select(groupElement("zero_fill_count"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint64_t zero_fill_count
     * }
     */
    public static final OfLong zero_fill_count$layout() {
        return zero_fill_count$LAYOUT;
    }

    private static final long zero_fill_count$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint64_t zero_fill_count
     * }
     */
    public static final long zero_fill_count$offset() {
        return zero_fill_count$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint64_t zero_fill_count
     * }
     */
    public static long zero_fill_count(MemorySegment struct) {
        return struct.get(zero_fill_count$LAYOUT, zero_fill_count$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint64_t zero_fill_count
     * }
     */
    public static void zero_fill_count(MemorySegment struct, long fieldValue) {
        struct.set(zero_fill_count$LAYOUT, zero_fill_count$OFFSET, fieldValue);
    }

    private static final OfLong reactivations$LAYOUT = (OfLong)$LAYOUT.select(groupElement("reactivations"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint64_t reactivations
     * }
     */
    public static final OfLong reactivations$layout() {
        return reactivations$LAYOUT;
    }

    private static final long reactivations$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint64_t reactivations
     * }
     */
    public static final long reactivations$offset() {
        return reactivations$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint64_t reactivations
     * }
     */
    public static long reactivations(MemorySegment struct) {
        return struct.get(reactivations$LAYOUT, reactivations$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint64_t reactivations
     * }
     */
    public static void reactivations(MemorySegment struct, long fieldValue) {
        struct.set(reactivations$LAYOUT, reactivations$OFFSET, fieldValue);
    }

    private static final OfLong pageins$LAYOUT = (OfLong)$LAYOUT.select(groupElement("pageins"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint64_t pageins
     * }
     */
    public static final OfLong pageins$layout() {
        return pageins$LAYOUT;
    }

    private static final long pageins$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint64_t pageins
     * }
     */
    public static final long pageins$offset() {
        return pageins$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint64_t pageins
     * }
     */
    public static long pageins(MemorySegment struct) {
        return struct.get(pageins$LAYOUT, pageins$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint64_t pageins
     * }
     */
    public static void pageins(MemorySegment struct, long fieldValue) {
        struct.set(pageins$LAYOUT, pageins$OFFSET, fieldValue);
    }

    private static final OfLong pageouts$LAYOUT = (OfLong)$LAYOUT.select(groupElement("pageouts"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint64_t pageouts
     * }
     */
    public static final OfLong pageouts$layout() {
        return pageouts$LAYOUT;
    }

    private static final long pageouts$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint64_t pageouts
     * }
     */
    public static final long pageouts$offset() {
        return pageouts$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint64_t pageouts
     * }
     */
    public static long pageouts(MemorySegment struct) {
        return struct.get(pageouts$LAYOUT, pageouts$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint64_t pageouts
     * }
     */
    public static void pageouts(MemorySegment struct, long fieldValue) {
        struct.set(pageouts$LAYOUT, pageouts$OFFSET, fieldValue);
    }

    private static final OfLong faults$LAYOUT = (OfLong)$LAYOUT.select(groupElement("faults"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint64_t faults
     * }
     */
    public static final OfLong faults$layout() {
        return faults$LAYOUT;
    }

    private static final long faults$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint64_t faults
     * }
     */
    public static final long faults$offset() {
        return faults$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint64_t faults
     * }
     */
    public static long faults(MemorySegment struct) {
        return struct.get(faults$LAYOUT, faults$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint64_t faults
     * }
     */
    public static void faults(MemorySegment struct, long fieldValue) {
        struct.set(faults$LAYOUT, faults$OFFSET, fieldValue);
    }

    private static final OfLong cow_faults$LAYOUT = (OfLong)$LAYOUT.select(groupElement("cow_faults"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint64_t cow_faults
     * }
     */
    public static final OfLong cow_faults$layout() {
        return cow_faults$LAYOUT;
    }

    private static final long cow_faults$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint64_t cow_faults
     * }
     */
    public static final long cow_faults$offset() {
        return cow_faults$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint64_t cow_faults
     * }
     */
    public static long cow_faults(MemorySegment struct) {
        return struct.get(cow_faults$LAYOUT, cow_faults$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint64_t cow_faults
     * }
     */
    public static void cow_faults(MemorySegment struct, long fieldValue) {
        struct.set(cow_faults$LAYOUT, cow_faults$OFFSET, fieldValue);
    }

    private static final OfLong lookups$LAYOUT = (OfLong)$LAYOUT.select(groupElement("lookups"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint64_t lookups
     * }
     */
    public static final OfLong lookups$layout() {
        return lookups$LAYOUT;
    }

    private static final long lookups$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint64_t lookups
     * }
     */
    public static final long lookups$offset() {
        return lookups$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint64_t lookups
     * }
     */
    public static long lookups(MemorySegment struct) {
        return struct.get(lookups$LAYOUT, lookups$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint64_t lookups
     * }
     */
    public static void lookups(MemorySegment struct, long fieldValue) {
        struct.set(lookups$LAYOUT, lookups$OFFSET, fieldValue);
    }

    private static final OfLong hits$LAYOUT = (OfLong)$LAYOUT.select(groupElement("hits"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint64_t hits
     * }
     */
    public static final OfLong hits$layout() {
        return hits$LAYOUT;
    }

    private static final long hits$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint64_t hits
     * }
     */
    public static final long hits$offset() {
        return hits$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint64_t hits
     * }
     */
    public static long hits(MemorySegment struct) {
        return struct.get(hits$LAYOUT, hits$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint64_t hits
     * }
     */
    public static void hits(MemorySegment struct, long fieldValue) {
        struct.set(hits$LAYOUT, hits$OFFSET, fieldValue);
    }

    private static final OfLong purges$LAYOUT = (OfLong)$LAYOUT.select(groupElement("purges"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint64_t purges
     * }
     */
    public static final OfLong purges$layout() {
        return purges$LAYOUT;
    }

    private static final long purges$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint64_t purges
     * }
     */
    public static final long purges$offset() {
        return purges$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint64_t purges
     * }
     */
    public static long purges(MemorySegment struct) {
        return struct.get(purges$LAYOUT, purges$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint64_t purges
     * }
     */
    public static void purges(MemorySegment struct, long fieldValue) {
        struct.set(purges$LAYOUT, purges$OFFSET, fieldValue);
    }

    private static final OfInt purgeable_count$LAYOUT = (OfInt)$LAYOUT.select(groupElement("purgeable_count"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * natural_t purgeable_count
     * }
     */
    public static final OfInt purgeable_count$layout() {
        return purgeable_count$LAYOUT;
    }

    private static final long purgeable_count$OFFSET = 88;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * natural_t purgeable_count
     * }
     */
    public static final long purgeable_count$offset() {
        return purgeable_count$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * natural_t purgeable_count
     * }
     */
    public static int purgeable_count(MemorySegment struct) {
        return struct.get(purgeable_count$LAYOUT, purgeable_count$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * natural_t purgeable_count
     * }
     */
    public static void purgeable_count(MemorySegment struct, int fieldValue) {
        struct.set(purgeable_count$LAYOUT, purgeable_count$OFFSET, fieldValue);
    }

    private static final OfInt speculative_count$LAYOUT = (OfInt)$LAYOUT.select(groupElement("speculative_count"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * natural_t speculative_count
     * }
     */
    public static final OfInt speculative_count$layout() {
        return speculative_count$LAYOUT;
    }

    private static final long speculative_count$OFFSET = 92;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * natural_t speculative_count
     * }
     */
    public static final long speculative_count$offset() {
        return speculative_count$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * natural_t speculative_count
     * }
     */
    public static int speculative_count(MemorySegment struct) {
        return struct.get(speculative_count$LAYOUT, speculative_count$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * natural_t speculative_count
     * }
     */
    public static void speculative_count(MemorySegment struct, int fieldValue) {
        struct.set(speculative_count$LAYOUT, speculative_count$OFFSET, fieldValue);
    }

    private static final OfLong decompressions$LAYOUT = (OfLong)$LAYOUT.select(groupElement("decompressions"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint64_t decompressions
     * }
     */
    public static final OfLong decompressions$layout() {
        return decompressions$LAYOUT;
    }

    private static final long decompressions$OFFSET = 96;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint64_t decompressions
     * }
     */
    public static final long decompressions$offset() {
        return decompressions$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint64_t decompressions
     * }
     */
    public static long decompressions(MemorySegment struct) {
        return struct.get(decompressions$LAYOUT, decompressions$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint64_t decompressions
     * }
     */
    public static void decompressions(MemorySegment struct, long fieldValue) {
        struct.set(decompressions$LAYOUT, decompressions$OFFSET, fieldValue);
    }

    private static final OfLong compressions$LAYOUT = (OfLong)$LAYOUT.select(groupElement("compressions"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint64_t compressions
     * }
     */
    public static final OfLong compressions$layout() {
        return compressions$LAYOUT;
    }

    private static final long compressions$OFFSET = 104;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint64_t compressions
     * }
     */
    public static final long compressions$offset() {
        return compressions$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint64_t compressions
     * }
     */
    public static long compressions(MemorySegment struct) {
        return struct.get(compressions$LAYOUT, compressions$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint64_t compressions
     * }
     */
    public static void compressions(MemorySegment struct, long fieldValue) {
        struct.set(compressions$LAYOUT, compressions$OFFSET, fieldValue);
    }

    private static final OfLong swapins$LAYOUT = (OfLong)$LAYOUT.select(groupElement("swapins"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint64_t swapins
     * }
     */
    public static final OfLong swapins$layout() {
        return swapins$LAYOUT;
    }

    private static final long swapins$OFFSET = 112;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint64_t swapins
     * }
     */
    public static final long swapins$offset() {
        return swapins$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint64_t swapins
     * }
     */
    public static long swapins(MemorySegment struct) {
        return struct.get(swapins$LAYOUT, swapins$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint64_t swapins
     * }
     */
    public static void swapins(MemorySegment struct, long fieldValue) {
        struct.set(swapins$LAYOUT, swapins$OFFSET, fieldValue);
    }

    private static final OfLong swapouts$LAYOUT = (OfLong)$LAYOUT.select(groupElement("swapouts"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint64_t swapouts
     * }
     */
    public static final OfLong swapouts$layout() {
        return swapouts$LAYOUT;
    }

    private static final long swapouts$OFFSET = 120;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint64_t swapouts
     * }
     */
    public static final long swapouts$offset() {
        return swapouts$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint64_t swapouts
     * }
     */
    public static long swapouts(MemorySegment struct) {
        return struct.get(swapouts$LAYOUT, swapouts$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint64_t swapouts
     * }
     */
    public static void swapouts(MemorySegment struct, long fieldValue) {
        struct.set(swapouts$LAYOUT, swapouts$OFFSET, fieldValue);
    }

    private static final OfInt compressor_page_count$LAYOUT = (OfInt)$LAYOUT.select(groupElement("compressor_page_count"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * natural_t compressor_page_count
     * }
     */
    public static final OfInt compressor_page_count$layout() {
        return compressor_page_count$LAYOUT;
    }

    private static final long compressor_page_count$OFFSET = 128;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * natural_t compressor_page_count
     * }
     */
    public static final long compressor_page_count$offset() {
        return compressor_page_count$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * natural_t compressor_page_count
     * }
     */
    public static int compressor_page_count(MemorySegment struct) {
        return struct.get(compressor_page_count$LAYOUT, compressor_page_count$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * natural_t compressor_page_count
     * }
     */
    public static void compressor_page_count(MemorySegment struct, int fieldValue) {
        struct.set(compressor_page_count$LAYOUT, compressor_page_count$OFFSET, fieldValue);
    }

    private static final OfInt throttled_count$LAYOUT = (OfInt)$LAYOUT.select(groupElement("throttled_count"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * natural_t throttled_count
     * }
     */
    public static final OfInt throttled_count$layout() {
        return throttled_count$LAYOUT;
    }

    private static final long throttled_count$OFFSET = 132;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * natural_t throttled_count
     * }
     */
    public static final long throttled_count$offset() {
        return throttled_count$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * natural_t throttled_count
     * }
     */
    public static int throttled_count(MemorySegment struct) {
        return struct.get(throttled_count$LAYOUT, throttled_count$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * natural_t throttled_count
     * }
     */
    public static void throttled_count(MemorySegment struct, int fieldValue) {
        struct.set(throttled_count$LAYOUT, throttled_count$OFFSET, fieldValue);
    }

    private static final OfInt external_page_count$LAYOUT = (OfInt)$LAYOUT.select(groupElement("external_page_count"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * natural_t external_page_count
     * }
     */
    public static final OfInt external_page_count$layout() {
        return external_page_count$LAYOUT;
    }

    private static final long external_page_count$OFFSET = 136;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * natural_t external_page_count
     * }
     */
    public static final long external_page_count$offset() {
        return external_page_count$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * natural_t external_page_count
     * }
     */
    public static int external_page_count(MemorySegment struct) {
        return struct.get(external_page_count$LAYOUT, external_page_count$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * natural_t external_page_count
     * }
     */
    public static void external_page_count(MemorySegment struct, int fieldValue) {
        struct.set(external_page_count$LAYOUT, external_page_count$OFFSET, fieldValue);
    }

    private static final OfInt internal_page_count$LAYOUT = (OfInt)$LAYOUT.select(groupElement("internal_page_count"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * natural_t internal_page_count
     * }
     */
    public static final OfInt internal_page_count$layout() {
        return internal_page_count$LAYOUT;
    }

    private static final long internal_page_count$OFFSET = 140;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * natural_t internal_page_count
     * }
     */
    public static final long internal_page_count$offset() {
        return internal_page_count$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * natural_t internal_page_count
     * }
     */
    public static int internal_page_count(MemorySegment struct) {
        return struct.get(internal_page_count$LAYOUT, internal_page_count$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * natural_t internal_page_count
     * }
     */
    public static void internal_page_count(MemorySegment struct, int fieldValue) {
        struct.set(internal_page_count$LAYOUT, internal_page_count$OFFSET, fieldValue);
    }

    private static final OfLong total_uncompressed_pages_in_compressor$LAYOUT = (OfLong)$LAYOUT.select(groupElement("total_uncompressed_pages_in_compressor"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint64_t total_uncompressed_pages_in_compressor
     * }
     */
    public static final OfLong total_uncompressed_pages_in_compressor$layout() {
        return total_uncompressed_pages_in_compressor$LAYOUT;
    }

    private static final long total_uncompressed_pages_in_compressor$OFFSET = 144;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint64_t total_uncompressed_pages_in_compressor
     * }
     */
    public static final long total_uncompressed_pages_in_compressor$offset() {
        return total_uncompressed_pages_in_compressor$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint64_t total_uncompressed_pages_in_compressor
     * }
     */
    public static long total_uncompressed_pages_in_compressor(MemorySegment struct) {
        return struct.get(total_uncompressed_pages_in_compressor$LAYOUT, total_uncompressed_pages_in_compressor$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint64_t total_uncompressed_pages_in_compressor
     * }
     */
    public static void total_uncompressed_pages_in_compressor(MemorySegment struct, long fieldValue) {
        struct.set(total_uncompressed_pages_in_compressor$LAYOUT, total_uncompressed_pages_in_compressor$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

