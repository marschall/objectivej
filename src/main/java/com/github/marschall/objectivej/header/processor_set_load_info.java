// Generated by jextract

package com.github.marschall.objectivej.header;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct processor_set_load_info {
 *     int task_count;
 *     int thread_count;
 *     integer_t load_average;
 *     integer_t mach_factor;
 * }
 * }
 */
public class processor_set_load_info {

    processor_set_load_info() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        ObjCRuntime.C_INT.withName("task_count"),
        ObjCRuntime.C_INT.withName("thread_count"),
        ObjCRuntime.C_INT.withName("load_average"),
        ObjCRuntime.C_INT.withName("mach_factor")
    ).withName("processor_set_load_info");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt task_count$LAYOUT = (OfInt)$LAYOUT.select(groupElement("task_count"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int task_count
     * }
     */
    public static final OfInt task_count$layout() {
        return task_count$LAYOUT;
    }

    private static final long task_count$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int task_count
     * }
     */
    public static final long task_count$offset() {
        return task_count$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int task_count
     * }
     */
    public static int task_count(MemorySegment struct) {
        return struct.get(task_count$LAYOUT, task_count$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int task_count
     * }
     */
    public static void task_count(MemorySegment struct, int fieldValue) {
        struct.set(task_count$LAYOUT, task_count$OFFSET, fieldValue);
    }

    private static final OfInt thread_count$LAYOUT = (OfInt)$LAYOUT.select(groupElement("thread_count"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int thread_count
     * }
     */
    public static final OfInt thread_count$layout() {
        return thread_count$LAYOUT;
    }

    private static final long thread_count$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int thread_count
     * }
     */
    public static final long thread_count$offset() {
        return thread_count$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int thread_count
     * }
     */
    public static int thread_count(MemorySegment struct) {
        return struct.get(thread_count$LAYOUT, thread_count$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int thread_count
     * }
     */
    public static void thread_count(MemorySegment struct, int fieldValue) {
        struct.set(thread_count$LAYOUT, thread_count$OFFSET, fieldValue);
    }

    private static final OfInt load_average$LAYOUT = (OfInt)$LAYOUT.select(groupElement("load_average"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * integer_t load_average
     * }
     */
    public static final OfInt load_average$layout() {
        return load_average$LAYOUT;
    }

    private static final long load_average$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * integer_t load_average
     * }
     */
    public static final long load_average$offset() {
        return load_average$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * integer_t load_average
     * }
     */
    public static int load_average(MemorySegment struct) {
        return struct.get(load_average$LAYOUT, load_average$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * integer_t load_average
     * }
     */
    public static void load_average(MemorySegment struct, int fieldValue) {
        struct.set(load_average$LAYOUT, load_average$OFFSET, fieldValue);
    }

    private static final OfInt mach_factor$LAYOUT = (OfInt)$LAYOUT.select(groupElement("mach_factor"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * integer_t mach_factor
     * }
     */
    public static final OfInt mach_factor$layout() {
        return mach_factor$LAYOUT;
    }

    private static final long mach_factor$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * integer_t mach_factor
     * }
     */
    public static final long mach_factor$offset() {
        return mach_factor$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * integer_t mach_factor
     * }
     */
    public static int mach_factor(MemorySegment struct) {
        return struct.get(mach_factor$LAYOUT, mach_factor$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * integer_t mach_factor
     * }
     */
    public static void mach_factor(MemorySegment struct, int fieldValue) {
        struct.set(mach_factor$LAYOUT, mach_factor$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

