// Generated by jextract

package com.github.marschall.objectivej.header;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct mach_port_status {
 *     mach_port_rights_t mps_pset;
 *     mach_port_seqno_t mps_seqno;
 *     mach_port_mscount_t mps_mscount;
 *     mach_port_msgcount_t mps_qlimit;
 *     mach_port_msgcount_t mps_msgcount;
 *     mach_port_rights_t mps_sorights;
 *     boolean_t mps_srights;
 *     boolean_t mps_pdrequest;
 *     boolean_t mps_nsrequest;
 *     natural_t mps_flags;
 * }
 * }
 */
public class mach_port_status {

    mach_port_status() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        ObjCRuntime.C_INT.withName("mps_pset"),
        ObjCRuntime.C_INT.withName("mps_seqno"),
        ObjCRuntime.C_INT.withName("mps_mscount"),
        ObjCRuntime.C_INT.withName("mps_qlimit"),
        ObjCRuntime.C_INT.withName("mps_msgcount"),
        ObjCRuntime.C_INT.withName("mps_sorights"),
        ObjCRuntime.C_INT.withName("mps_srights"),
        ObjCRuntime.C_INT.withName("mps_pdrequest"),
        ObjCRuntime.C_INT.withName("mps_nsrequest"),
        ObjCRuntime.C_INT.withName("mps_flags")
    ).withName("mach_port_status");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt mps_pset$LAYOUT = (OfInt)$LAYOUT.select(groupElement("mps_pset"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * mach_port_rights_t mps_pset
     * }
     */
    public static final OfInt mps_pset$layout() {
        return mps_pset$LAYOUT;
    }

    private static final long mps_pset$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * mach_port_rights_t mps_pset
     * }
     */
    public static final long mps_pset$offset() {
        return mps_pset$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * mach_port_rights_t mps_pset
     * }
     */
    public static int mps_pset(MemorySegment struct) {
        return struct.get(mps_pset$LAYOUT, mps_pset$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * mach_port_rights_t mps_pset
     * }
     */
    public static void mps_pset(MemorySegment struct, int fieldValue) {
        struct.set(mps_pset$LAYOUT, mps_pset$OFFSET, fieldValue);
    }

    private static final OfInt mps_seqno$LAYOUT = (OfInt)$LAYOUT.select(groupElement("mps_seqno"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * mach_port_seqno_t mps_seqno
     * }
     */
    public static final OfInt mps_seqno$layout() {
        return mps_seqno$LAYOUT;
    }

    private static final long mps_seqno$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * mach_port_seqno_t mps_seqno
     * }
     */
    public static final long mps_seqno$offset() {
        return mps_seqno$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * mach_port_seqno_t mps_seqno
     * }
     */
    public static int mps_seqno(MemorySegment struct) {
        return struct.get(mps_seqno$LAYOUT, mps_seqno$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * mach_port_seqno_t mps_seqno
     * }
     */
    public static void mps_seqno(MemorySegment struct, int fieldValue) {
        struct.set(mps_seqno$LAYOUT, mps_seqno$OFFSET, fieldValue);
    }

    private static final OfInt mps_mscount$LAYOUT = (OfInt)$LAYOUT.select(groupElement("mps_mscount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * mach_port_mscount_t mps_mscount
     * }
     */
    public static final OfInt mps_mscount$layout() {
        return mps_mscount$LAYOUT;
    }

    private static final long mps_mscount$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * mach_port_mscount_t mps_mscount
     * }
     */
    public static final long mps_mscount$offset() {
        return mps_mscount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * mach_port_mscount_t mps_mscount
     * }
     */
    public static int mps_mscount(MemorySegment struct) {
        return struct.get(mps_mscount$LAYOUT, mps_mscount$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * mach_port_mscount_t mps_mscount
     * }
     */
    public static void mps_mscount(MemorySegment struct, int fieldValue) {
        struct.set(mps_mscount$LAYOUT, mps_mscount$OFFSET, fieldValue);
    }

    private static final OfInt mps_qlimit$LAYOUT = (OfInt)$LAYOUT.select(groupElement("mps_qlimit"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * mach_port_msgcount_t mps_qlimit
     * }
     */
    public static final OfInt mps_qlimit$layout() {
        return mps_qlimit$LAYOUT;
    }

    private static final long mps_qlimit$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * mach_port_msgcount_t mps_qlimit
     * }
     */
    public static final long mps_qlimit$offset() {
        return mps_qlimit$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * mach_port_msgcount_t mps_qlimit
     * }
     */
    public static int mps_qlimit(MemorySegment struct) {
        return struct.get(mps_qlimit$LAYOUT, mps_qlimit$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * mach_port_msgcount_t mps_qlimit
     * }
     */
    public static void mps_qlimit(MemorySegment struct, int fieldValue) {
        struct.set(mps_qlimit$LAYOUT, mps_qlimit$OFFSET, fieldValue);
    }

    private static final OfInt mps_msgcount$LAYOUT = (OfInt)$LAYOUT.select(groupElement("mps_msgcount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * mach_port_msgcount_t mps_msgcount
     * }
     */
    public static final OfInt mps_msgcount$layout() {
        return mps_msgcount$LAYOUT;
    }

    private static final long mps_msgcount$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * mach_port_msgcount_t mps_msgcount
     * }
     */
    public static final long mps_msgcount$offset() {
        return mps_msgcount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * mach_port_msgcount_t mps_msgcount
     * }
     */
    public static int mps_msgcount(MemorySegment struct) {
        return struct.get(mps_msgcount$LAYOUT, mps_msgcount$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * mach_port_msgcount_t mps_msgcount
     * }
     */
    public static void mps_msgcount(MemorySegment struct, int fieldValue) {
        struct.set(mps_msgcount$LAYOUT, mps_msgcount$OFFSET, fieldValue);
    }

    private static final OfInt mps_sorights$LAYOUT = (OfInt)$LAYOUT.select(groupElement("mps_sorights"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * mach_port_rights_t mps_sorights
     * }
     */
    public static final OfInt mps_sorights$layout() {
        return mps_sorights$LAYOUT;
    }

    private static final long mps_sorights$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * mach_port_rights_t mps_sorights
     * }
     */
    public static final long mps_sorights$offset() {
        return mps_sorights$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * mach_port_rights_t mps_sorights
     * }
     */
    public static int mps_sorights(MemorySegment struct) {
        return struct.get(mps_sorights$LAYOUT, mps_sorights$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * mach_port_rights_t mps_sorights
     * }
     */
    public static void mps_sorights(MemorySegment struct, int fieldValue) {
        struct.set(mps_sorights$LAYOUT, mps_sorights$OFFSET, fieldValue);
    }

    private static final OfInt mps_srights$LAYOUT = (OfInt)$LAYOUT.select(groupElement("mps_srights"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * boolean_t mps_srights
     * }
     */
    public static final OfInt mps_srights$layout() {
        return mps_srights$LAYOUT;
    }

    private static final long mps_srights$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * boolean_t mps_srights
     * }
     */
    public static final long mps_srights$offset() {
        return mps_srights$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * boolean_t mps_srights
     * }
     */
    public static int mps_srights(MemorySegment struct) {
        return struct.get(mps_srights$LAYOUT, mps_srights$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * boolean_t mps_srights
     * }
     */
    public static void mps_srights(MemorySegment struct, int fieldValue) {
        struct.set(mps_srights$LAYOUT, mps_srights$OFFSET, fieldValue);
    }

    private static final OfInt mps_pdrequest$LAYOUT = (OfInt)$LAYOUT.select(groupElement("mps_pdrequest"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * boolean_t mps_pdrequest
     * }
     */
    public static final OfInt mps_pdrequest$layout() {
        return mps_pdrequest$LAYOUT;
    }

    private static final long mps_pdrequest$OFFSET = 28;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * boolean_t mps_pdrequest
     * }
     */
    public static final long mps_pdrequest$offset() {
        return mps_pdrequest$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * boolean_t mps_pdrequest
     * }
     */
    public static int mps_pdrequest(MemorySegment struct) {
        return struct.get(mps_pdrequest$LAYOUT, mps_pdrequest$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * boolean_t mps_pdrequest
     * }
     */
    public static void mps_pdrequest(MemorySegment struct, int fieldValue) {
        struct.set(mps_pdrequest$LAYOUT, mps_pdrequest$OFFSET, fieldValue);
    }

    private static final OfInt mps_nsrequest$LAYOUT = (OfInt)$LAYOUT.select(groupElement("mps_nsrequest"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * boolean_t mps_nsrequest
     * }
     */
    public static final OfInt mps_nsrequest$layout() {
        return mps_nsrequest$LAYOUT;
    }

    private static final long mps_nsrequest$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * boolean_t mps_nsrequest
     * }
     */
    public static final long mps_nsrequest$offset() {
        return mps_nsrequest$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * boolean_t mps_nsrequest
     * }
     */
    public static int mps_nsrequest(MemorySegment struct) {
        return struct.get(mps_nsrequest$LAYOUT, mps_nsrequest$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * boolean_t mps_nsrequest
     * }
     */
    public static void mps_nsrequest(MemorySegment struct, int fieldValue) {
        struct.set(mps_nsrequest$LAYOUT, mps_nsrequest$OFFSET, fieldValue);
    }

    private static final OfInt mps_flags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("mps_flags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * natural_t mps_flags
     * }
     */
    public static final OfInt mps_flags$layout() {
        return mps_flags$LAYOUT;
    }

    private static final long mps_flags$OFFSET = 36;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * natural_t mps_flags
     * }
     */
    public static final long mps_flags$offset() {
        return mps_flags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * natural_t mps_flags
     * }
     */
    public static int mps_flags(MemorySegment struct) {
        return struct.get(mps_flags$LAYOUT, mps_flags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * natural_t mps_flags
     * }
     */
    public static void mps_flags(MemorySegment struct, int fieldValue) {
        struct.set(mps_flags$LAYOUT, mps_flags$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

