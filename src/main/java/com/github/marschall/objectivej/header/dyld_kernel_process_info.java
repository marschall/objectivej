// Generated by jextract

package com.github.marschall.objectivej.header;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct dyld_kernel_process_info {
 *     struct dyld_kernel_image_info cache_image_info;
 *     uint64_t timestamp;
 *     uint32_t imageCount;
 *     uint32_t initialImageCount;
 *     uint8_t dyldState;
 *     boolean_t no_cache;
 *     boolean_t private_cache;
 * }
 * }
 */
public class dyld_kernel_process_info {

    dyld_kernel_process_info() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        dyld_kernel_image_info.layout().withName("cache_image_info"),
        ObjCRuntime.C_LONG_LONG.withName("timestamp"),
        ObjCRuntime.C_INT.withName("imageCount"),
        ObjCRuntime.C_INT.withName("initialImageCount"),
        ObjCRuntime.C_CHAR.withName("dyldState"),
        MemoryLayout.paddingLayout(3),
        ObjCRuntime.C_INT.withName("no_cache"),
        ObjCRuntime.C_INT.withName("private_cache"),
        MemoryLayout.paddingLayout(4)
    ).withName("dyld_kernel_process_info");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout cache_image_info$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("cache_image_info"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct dyld_kernel_image_info cache_image_info
     * }
     */
    public static final GroupLayout cache_image_info$layout() {
        return cache_image_info$LAYOUT;
    }

    private static final long cache_image_info$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct dyld_kernel_image_info cache_image_info
     * }
     */
    public static final long cache_image_info$offset() {
        return cache_image_info$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct dyld_kernel_image_info cache_image_info
     * }
     */
    public static MemorySegment cache_image_info(MemorySegment struct) {
        return struct.asSlice(cache_image_info$OFFSET, cache_image_info$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct dyld_kernel_image_info cache_image_info
     * }
     */
    public static void cache_image_info(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, cache_image_info$OFFSET, cache_image_info$LAYOUT.byteSize());
    }

    private static final OfLong timestamp$LAYOUT = (OfLong)$LAYOUT.select(groupElement("timestamp"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint64_t timestamp
     * }
     */
    public static final OfLong timestamp$layout() {
        return timestamp$LAYOUT;
    }

    private static final long timestamp$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint64_t timestamp
     * }
     */
    public static final long timestamp$offset() {
        return timestamp$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint64_t timestamp
     * }
     */
    public static long timestamp(MemorySegment struct) {
        return struct.get(timestamp$LAYOUT, timestamp$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint64_t timestamp
     * }
     */
    public static void timestamp(MemorySegment struct, long fieldValue) {
        struct.set(timestamp$LAYOUT, timestamp$OFFSET, fieldValue);
    }

    private static final OfInt imageCount$LAYOUT = (OfInt)$LAYOUT.select(groupElement("imageCount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t imageCount
     * }
     */
    public static final OfInt imageCount$layout() {
        return imageCount$LAYOUT;
    }

    private static final long imageCount$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t imageCount
     * }
     */
    public static final long imageCount$offset() {
        return imageCount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t imageCount
     * }
     */
    public static int imageCount(MemorySegment struct) {
        return struct.get(imageCount$LAYOUT, imageCount$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t imageCount
     * }
     */
    public static void imageCount(MemorySegment struct, int fieldValue) {
        struct.set(imageCount$LAYOUT, imageCount$OFFSET, fieldValue);
    }

    private static final OfInt initialImageCount$LAYOUT = (OfInt)$LAYOUT.select(groupElement("initialImageCount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t initialImageCount
     * }
     */
    public static final OfInt initialImageCount$layout() {
        return initialImageCount$LAYOUT;
    }

    private static final long initialImageCount$OFFSET = 52;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t initialImageCount
     * }
     */
    public static final long initialImageCount$offset() {
        return initialImageCount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t initialImageCount
     * }
     */
    public static int initialImageCount(MemorySegment struct) {
        return struct.get(initialImageCount$LAYOUT, initialImageCount$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t initialImageCount
     * }
     */
    public static void initialImageCount(MemorySegment struct, int fieldValue) {
        struct.set(initialImageCount$LAYOUT, initialImageCount$OFFSET, fieldValue);
    }

    private static final OfByte dyldState$LAYOUT = (OfByte)$LAYOUT.select(groupElement("dyldState"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t dyldState
     * }
     */
    public static final OfByte dyldState$layout() {
        return dyldState$LAYOUT;
    }

    private static final long dyldState$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t dyldState
     * }
     */
    public static final long dyldState$offset() {
        return dyldState$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t dyldState
     * }
     */
    public static byte dyldState(MemorySegment struct) {
        return struct.get(dyldState$LAYOUT, dyldState$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t dyldState
     * }
     */
    public static void dyldState(MemorySegment struct, byte fieldValue) {
        struct.set(dyldState$LAYOUT, dyldState$OFFSET, fieldValue);
    }

    private static final OfInt no_cache$LAYOUT = (OfInt)$LAYOUT.select(groupElement("no_cache"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * boolean_t no_cache
     * }
     */
    public static final OfInt no_cache$layout() {
        return no_cache$LAYOUT;
    }

    private static final long no_cache$OFFSET = 60;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * boolean_t no_cache
     * }
     */
    public static final long no_cache$offset() {
        return no_cache$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * boolean_t no_cache
     * }
     */
    public static int no_cache(MemorySegment struct) {
        return struct.get(no_cache$LAYOUT, no_cache$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * boolean_t no_cache
     * }
     */
    public static void no_cache(MemorySegment struct, int fieldValue) {
        struct.set(no_cache$LAYOUT, no_cache$OFFSET, fieldValue);
    }

    private static final OfInt private_cache$LAYOUT = (OfInt)$LAYOUT.select(groupElement("private_cache"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * boolean_t private_cache
     * }
     */
    public static final OfInt private_cache$layout() {
        return private_cache$LAYOUT;
    }

    private static final long private_cache$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * boolean_t private_cache
     * }
     */
    public static final long private_cache$offset() {
        return private_cache$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * boolean_t private_cache
     * }
     */
    public static int private_cache(MemorySegment struct) {
        return struct.get(private_cache$LAYOUT, private_cache$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * boolean_t private_cache
     * }
     */
    public static void private_cache(MemorySegment struct, int fieldValue) {
        struct.set(private_cache$LAYOUT, private_cache$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

