// Generated by jextract

package com.github.marschall.objectivej.header;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct thread_extended_info {
 *     uint64_t pth_user_time;
 *     uint64_t pth_system_time;
 *     int32_t pth_cpu_usage;
 *     int32_t pth_policy;
 *     int32_t pth_run_state;
 *     int32_t pth_flags;
 *     int32_t pth_sleep_time;
 *     int32_t pth_curpri;
 *     int32_t pth_priority;
 *     int32_t pth_maxpriority;
 *     char pth_name[64];
 * }
 * }
 */
public class thread_extended_info {

    thread_extended_info() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        ObjCRuntime.C_LONG_LONG.withName("pth_user_time"),
        ObjCRuntime.C_LONG_LONG.withName("pth_system_time"),
        ObjCRuntime.C_INT.withName("pth_cpu_usage"),
        ObjCRuntime.C_INT.withName("pth_policy"),
        ObjCRuntime.C_INT.withName("pth_run_state"),
        ObjCRuntime.C_INT.withName("pth_flags"),
        ObjCRuntime.C_INT.withName("pth_sleep_time"),
        ObjCRuntime.C_INT.withName("pth_curpri"),
        ObjCRuntime.C_INT.withName("pth_priority"),
        ObjCRuntime.C_INT.withName("pth_maxpriority"),
        MemoryLayout.sequenceLayout(64, ObjCRuntime.C_CHAR).withName("pth_name")
    ).withName("thread_extended_info");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfLong pth_user_time$LAYOUT = (OfLong)$LAYOUT.select(groupElement("pth_user_time"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint64_t pth_user_time
     * }
     */
    public static final OfLong pth_user_time$layout() {
        return pth_user_time$LAYOUT;
    }

    private static final long pth_user_time$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint64_t pth_user_time
     * }
     */
    public static final long pth_user_time$offset() {
        return pth_user_time$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint64_t pth_user_time
     * }
     */
    public static long pth_user_time(MemorySegment struct) {
        return struct.get(pth_user_time$LAYOUT, pth_user_time$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint64_t pth_user_time
     * }
     */
    public static void pth_user_time(MemorySegment struct, long fieldValue) {
        struct.set(pth_user_time$LAYOUT, pth_user_time$OFFSET, fieldValue);
    }

    private static final OfLong pth_system_time$LAYOUT = (OfLong)$LAYOUT.select(groupElement("pth_system_time"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint64_t pth_system_time
     * }
     */
    public static final OfLong pth_system_time$layout() {
        return pth_system_time$LAYOUT;
    }

    private static final long pth_system_time$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint64_t pth_system_time
     * }
     */
    public static final long pth_system_time$offset() {
        return pth_system_time$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint64_t pth_system_time
     * }
     */
    public static long pth_system_time(MemorySegment struct) {
        return struct.get(pth_system_time$LAYOUT, pth_system_time$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint64_t pth_system_time
     * }
     */
    public static void pth_system_time(MemorySegment struct, long fieldValue) {
        struct.set(pth_system_time$LAYOUT, pth_system_time$OFFSET, fieldValue);
    }

    private static final OfInt pth_cpu_usage$LAYOUT = (OfInt)$LAYOUT.select(groupElement("pth_cpu_usage"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int32_t pth_cpu_usage
     * }
     */
    public static final OfInt pth_cpu_usage$layout() {
        return pth_cpu_usage$LAYOUT;
    }

    private static final long pth_cpu_usage$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int32_t pth_cpu_usage
     * }
     */
    public static final long pth_cpu_usage$offset() {
        return pth_cpu_usage$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int32_t pth_cpu_usage
     * }
     */
    public static int pth_cpu_usage(MemorySegment struct) {
        return struct.get(pth_cpu_usage$LAYOUT, pth_cpu_usage$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int32_t pth_cpu_usage
     * }
     */
    public static void pth_cpu_usage(MemorySegment struct, int fieldValue) {
        struct.set(pth_cpu_usage$LAYOUT, pth_cpu_usage$OFFSET, fieldValue);
    }

    private static final OfInt pth_policy$LAYOUT = (OfInt)$LAYOUT.select(groupElement("pth_policy"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int32_t pth_policy
     * }
     */
    public static final OfInt pth_policy$layout() {
        return pth_policy$LAYOUT;
    }

    private static final long pth_policy$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int32_t pth_policy
     * }
     */
    public static final long pth_policy$offset() {
        return pth_policy$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int32_t pth_policy
     * }
     */
    public static int pth_policy(MemorySegment struct) {
        return struct.get(pth_policy$LAYOUT, pth_policy$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int32_t pth_policy
     * }
     */
    public static void pth_policy(MemorySegment struct, int fieldValue) {
        struct.set(pth_policy$LAYOUT, pth_policy$OFFSET, fieldValue);
    }

    private static final OfInt pth_run_state$LAYOUT = (OfInt)$LAYOUT.select(groupElement("pth_run_state"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int32_t pth_run_state
     * }
     */
    public static final OfInt pth_run_state$layout() {
        return pth_run_state$LAYOUT;
    }

    private static final long pth_run_state$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int32_t pth_run_state
     * }
     */
    public static final long pth_run_state$offset() {
        return pth_run_state$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int32_t pth_run_state
     * }
     */
    public static int pth_run_state(MemorySegment struct) {
        return struct.get(pth_run_state$LAYOUT, pth_run_state$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int32_t pth_run_state
     * }
     */
    public static void pth_run_state(MemorySegment struct, int fieldValue) {
        struct.set(pth_run_state$LAYOUT, pth_run_state$OFFSET, fieldValue);
    }

    private static final OfInt pth_flags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("pth_flags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int32_t pth_flags
     * }
     */
    public static final OfInt pth_flags$layout() {
        return pth_flags$LAYOUT;
    }

    private static final long pth_flags$OFFSET = 28;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int32_t pth_flags
     * }
     */
    public static final long pth_flags$offset() {
        return pth_flags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int32_t pth_flags
     * }
     */
    public static int pth_flags(MemorySegment struct) {
        return struct.get(pth_flags$LAYOUT, pth_flags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int32_t pth_flags
     * }
     */
    public static void pth_flags(MemorySegment struct, int fieldValue) {
        struct.set(pth_flags$LAYOUT, pth_flags$OFFSET, fieldValue);
    }

    private static final OfInt pth_sleep_time$LAYOUT = (OfInt)$LAYOUT.select(groupElement("pth_sleep_time"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int32_t pth_sleep_time
     * }
     */
    public static final OfInt pth_sleep_time$layout() {
        return pth_sleep_time$LAYOUT;
    }

    private static final long pth_sleep_time$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int32_t pth_sleep_time
     * }
     */
    public static final long pth_sleep_time$offset() {
        return pth_sleep_time$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int32_t pth_sleep_time
     * }
     */
    public static int pth_sleep_time(MemorySegment struct) {
        return struct.get(pth_sleep_time$LAYOUT, pth_sleep_time$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int32_t pth_sleep_time
     * }
     */
    public static void pth_sleep_time(MemorySegment struct, int fieldValue) {
        struct.set(pth_sleep_time$LAYOUT, pth_sleep_time$OFFSET, fieldValue);
    }

    private static final OfInt pth_curpri$LAYOUT = (OfInt)$LAYOUT.select(groupElement("pth_curpri"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int32_t pth_curpri
     * }
     */
    public static final OfInt pth_curpri$layout() {
        return pth_curpri$LAYOUT;
    }

    private static final long pth_curpri$OFFSET = 36;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int32_t pth_curpri
     * }
     */
    public static final long pth_curpri$offset() {
        return pth_curpri$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int32_t pth_curpri
     * }
     */
    public static int pth_curpri(MemorySegment struct) {
        return struct.get(pth_curpri$LAYOUT, pth_curpri$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int32_t pth_curpri
     * }
     */
    public static void pth_curpri(MemorySegment struct, int fieldValue) {
        struct.set(pth_curpri$LAYOUT, pth_curpri$OFFSET, fieldValue);
    }

    private static final OfInt pth_priority$LAYOUT = (OfInt)$LAYOUT.select(groupElement("pth_priority"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int32_t pth_priority
     * }
     */
    public static final OfInt pth_priority$layout() {
        return pth_priority$LAYOUT;
    }

    private static final long pth_priority$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int32_t pth_priority
     * }
     */
    public static final long pth_priority$offset() {
        return pth_priority$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int32_t pth_priority
     * }
     */
    public static int pth_priority(MemorySegment struct) {
        return struct.get(pth_priority$LAYOUT, pth_priority$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int32_t pth_priority
     * }
     */
    public static void pth_priority(MemorySegment struct, int fieldValue) {
        struct.set(pth_priority$LAYOUT, pth_priority$OFFSET, fieldValue);
    }

    private static final OfInt pth_maxpriority$LAYOUT = (OfInt)$LAYOUT.select(groupElement("pth_maxpriority"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int32_t pth_maxpriority
     * }
     */
    public static final OfInt pth_maxpriority$layout() {
        return pth_maxpriority$LAYOUT;
    }

    private static final long pth_maxpriority$OFFSET = 44;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int32_t pth_maxpriority
     * }
     */
    public static final long pth_maxpriority$offset() {
        return pth_maxpriority$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int32_t pth_maxpriority
     * }
     */
    public static int pth_maxpriority(MemorySegment struct) {
        return struct.get(pth_maxpriority$LAYOUT, pth_maxpriority$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int32_t pth_maxpriority
     * }
     */
    public static void pth_maxpriority(MemorySegment struct, int fieldValue) {
        struct.set(pth_maxpriority$LAYOUT, pth_maxpriority$OFFSET, fieldValue);
    }

    private static final SequenceLayout pth_name$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("pth_name"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char pth_name[64]
     * }
     */
    public static final SequenceLayout pth_name$layout() {
        return pth_name$LAYOUT;
    }

    private static final long pth_name$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char pth_name[64]
     * }
     */
    public static final long pth_name$offset() {
        return pth_name$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char pth_name[64]
     * }
     */
    public static MemorySegment pth_name(MemorySegment struct) {
        return struct.asSlice(pth_name$OFFSET, pth_name$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char pth_name[64]
     * }
     */
    public static void pth_name(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, pth_name$OFFSET, pth_name$LAYOUT.byteSize());
    }

    private static long[] pth_name$DIMS = { 64 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * char pth_name[64]
     * }
     */
    public static long[] pth_name$dimensions() {
        return pth_name$DIMS;
    }
    private static final VarHandle pth_name$ELEM_HANDLE = pth_name$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * char pth_name[64]
     * }
     */
    public static byte pth_name(MemorySegment struct, long index0) {
        return (byte)pth_name$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * char pth_name[64]
     * }
     */
    public static void pth_name(MemorySegment struct, long index0, byte fieldValue) {
        pth_name$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

