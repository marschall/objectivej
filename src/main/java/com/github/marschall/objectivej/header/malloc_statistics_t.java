// Generated by jextract

package com.github.marschall.objectivej.header;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct malloc_statistics_t {
 *     unsigned int blocks_in_use;
 *     size_t size_in_use;
 *     size_t max_size_in_use;
 *     size_t size_allocated;
 * }
 * }
 */
public class malloc_statistics_t {

    malloc_statistics_t() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        ObjCRuntime.C_INT.withName("blocks_in_use"),
        MemoryLayout.paddingLayout(4),
        ObjCRuntime.C_LONG.withName("size_in_use"),
        ObjCRuntime.C_LONG.withName("max_size_in_use"),
        ObjCRuntime.C_LONG.withName("size_allocated")
    ).withName("malloc_statistics_t");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt blocks_in_use$LAYOUT = (OfInt)$LAYOUT.select(groupElement("blocks_in_use"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int blocks_in_use
     * }
     */
    public static final OfInt blocks_in_use$layout() {
        return blocks_in_use$LAYOUT;
    }

    private static final long blocks_in_use$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int blocks_in_use
     * }
     */
    public static final long blocks_in_use$offset() {
        return blocks_in_use$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int blocks_in_use
     * }
     */
    public static int blocks_in_use(MemorySegment struct) {
        return struct.get(blocks_in_use$LAYOUT, blocks_in_use$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int blocks_in_use
     * }
     */
    public static void blocks_in_use(MemorySegment struct, int fieldValue) {
        struct.set(blocks_in_use$LAYOUT, blocks_in_use$OFFSET, fieldValue);
    }

    private static final OfLong size_in_use$LAYOUT = (OfLong)$LAYOUT.select(groupElement("size_in_use"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t size_in_use
     * }
     */
    public static final OfLong size_in_use$layout() {
        return size_in_use$LAYOUT;
    }

    private static final long size_in_use$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t size_in_use
     * }
     */
    public static final long size_in_use$offset() {
        return size_in_use$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t size_in_use
     * }
     */
    public static long size_in_use(MemorySegment struct) {
        return struct.get(size_in_use$LAYOUT, size_in_use$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t size_in_use
     * }
     */
    public static void size_in_use(MemorySegment struct, long fieldValue) {
        struct.set(size_in_use$LAYOUT, size_in_use$OFFSET, fieldValue);
    }

    private static final OfLong max_size_in_use$LAYOUT = (OfLong)$LAYOUT.select(groupElement("max_size_in_use"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t max_size_in_use
     * }
     */
    public static final OfLong max_size_in_use$layout() {
        return max_size_in_use$LAYOUT;
    }

    private static final long max_size_in_use$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t max_size_in_use
     * }
     */
    public static final long max_size_in_use$offset() {
        return max_size_in_use$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t max_size_in_use
     * }
     */
    public static long max_size_in_use(MemorySegment struct) {
        return struct.get(max_size_in_use$LAYOUT, max_size_in_use$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t max_size_in_use
     * }
     */
    public static void max_size_in_use(MemorySegment struct, long fieldValue) {
        struct.set(max_size_in_use$LAYOUT, max_size_in_use$OFFSET, fieldValue);
    }

    private static final OfLong size_allocated$LAYOUT = (OfLong)$LAYOUT.select(groupElement("size_allocated"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t size_allocated
     * }
     */
    public static final OfLong size_allocated$layout() {
        return size_allocated$LAYOUT;
    }

    private static final long size_allocated$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t size_allocated
     * }
     */
    public static final long size_allocated$offset() {
        return size_allocated$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t size_allocated
     * }
     */
    public static long size_allocated(MemorySegment struct) {
        return struct.get(size_allocated$LAYOUT, size_allocated$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t size_allocated
     * }
     */
    public static void size_allocated(MemorySegment struct, long fieldValue) {
        struct.set(size_allocated$LAYOUT, size_allocated$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

