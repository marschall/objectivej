// Generated by jextract

package com.github.marschall.objectivej.header;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct mach_port_info_ext {
 *     mach_port_status_t mpie_status;
 *     mach_port_msgcount_t mpie_boost_cnt;
 *     uint32_t reserved[6];
 * }
 * }
 */
public class mach_port_info_ext {

    mach_port_info_ext() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        mach_port_status.layout().withName("mpie_status"),
        ObjCRuntime.C_INT.withName("mpie_boost_cnt"),
        MemoryLayout.sequenceLayout(6, ObjCRuntime.C_INT).withName("reserved")
    ).withName("mach_port_info_ext");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout mpie_status$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("mpie_status"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * mach_port_status_t mpie_status
     * }
     */
    public static final GroupLayout mpie_status$layout() {
        return mpie_status$LAYOUT;
    }

    private static final long mpie_status$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * mach_port_status_t mpie_status
     * }
     */
    public static final long mpie_status$offset() {
        return mpie_status$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * mach_port_status_t mpie_status
     * }
     */
    public static MemorySegment mpie_status(MemorySegment struct) {
        return struct.asSlice(mpie_status$OFFSET, mpie_status$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * mach_port_status_t mpie_status
     * }
     */
    public static void mpie_status(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, mpie_status$OFFSET, mpie_status$LAYOUT.byteSize());
    }

    private static final OfInt mpie_boost_cnt$LAYOUT = (OfInt)$LAYOUT.select(groupElement("mpie_boost_cnt"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * mach_port_msgcount_t mpie_boost_cnt
     * }
     */
    public static final OfInt mpie_boost_cnt$layout() {
        return mpie_boost_cnt$LAYOUT;
    }

    private static final long mpie_boost_cnt$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * mach_port_msgcount_t mpie_boost_cnt
     * }
     */
    public static final long mpie_boost_cnt$offset() {
        return mpie_boost_cnt$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * mach_port_msgcount_t mpie_boost_cnt
     * }
     */
    public static int mpie_boost_cnt(MemorySegment struct) {
        return struct.get(mpie_boost_cnt$LAYOUT, mpie_boost_cnt$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * mach_port_msgcount_t mpie_boost_cnt
     * }
     */
    public static void mpie_boost_cnt(MemorySegment struct, int fieldValue) {
        struct.set(mpie_boost_cnt$LAYOUT, mpie_boost_cnt$OFFSET, fieldValue);
    }

    private static final SequenceLayout reserved$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("reserved"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t reserved[6]
     * }
     */
    public static final SequenceLayout reserved$layout() {
        return reserved$LAYOUT;
    }

    private static final long reserved$OFFSET = 44;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t reserved[6]
     * }
     */
    public static final long reserved$offset() {
        return reserved$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t reserved[6]
     * }
     */
    public static MemorySegment reserved(MemorySegment struct) {
        return struct.asSlice(reserved$OFFSET, reserved$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t reserved[6]
     * }
     */
    public static void reserved(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, reserved$OFFSET, reserved$LAYOUT.byteSize());
    }

    private static long[] reserved$DIMS = { 6 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * uint32_t reserved[6]
     * }
     */
    public static long[] reserved$dimensions() {
        return reserved$DIMS;
    }
    private static final VarHandle reserved$ELEM_HANDLE = reserved$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * uint32_t reserved[6]
     * }
     */
    public static int reserved(MemorySegment struct, long index0) {
        return (int)reserved$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * uint32_t reserved[6]
     * }
     */
    public static void reserved(MemorySegment struct, long index0, int fieldValue) {
        reserved$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

