// Generated by jextract

package com.github.marschall.objectivej.header;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct task_events_info {
 *     integer_t faults;
 *     integer_t pageins;
 *     integer_t cow_faults;
 *     integer_t messages_sent;
 *     integer_t messages_received;
 *     integer_t syscalls_mach;
 *     integer_t syscalls_unix;
 *     integer_t csw;
 * }
 * }
 */
public class task_events_info {

    task_events_info() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        ObjCRuntime.C_INT.withName("faults"),
        ObjCRuntime.C_INT.withName("pageins"),
        ObjCRuntime.C_INT.withName("cow_faults"),
        ObjCRuntime.C_INT.withName("messages_sent"),
        ObjCRuntime.C_INT.withName("messages_received"),
        ObjCRuntime.C_INT.withName("syscalls_mach"),
        ObjCRuntime.C_INT.withName("syscalls_unix"),
        ObjCRuntime.C_INT.withName("csw")
    ).withName("task_events_info");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt faults$LAYOUT = (OfInt)$LAYOUT.select(groupElement("faults"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * integer_t faults
     * }
     */
    public static final OfInt faults$layout() {
        return faults$LAYOUT;
    }

    private static final long faults$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * integer_t faults
     * }
     */
    public static final long faults$offset() {
        return faults$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * integer_t faults
     * }
     */
    public static int faults(MemorySegment struct) {
        return struct.get(faults$LAYOUT, faults$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * integer_t faults
     * }
     */
    public static void faults(MemorySegment struct, int fieldValue) {
        struct.set(faults$LAYOUT, faults$OFFSET, fieldValue);
    }

    private static final OfInt pageins$LAYOUT = (OfInt)$LAYOUT.select(groupElement("pageins"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * integer_t pageins
     * }
     */
    public static final OfInt pageins$layout() {
        return pageins$LAYOUT;
    }

    private static final long pageins$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * integer_t pageins
     * }
     */
    public static final long pageins$offset() {
        return pageins$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * integer_t pageins
     * }
     */
    public static int pageins(MemorySegment struct) {
        return struct.get(pageins$LAYOUT, pageins$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * integer_t pageins
     * }
     */
    public static void pageins(MemorySegment struct, int fieldValue) {
        struct.set(pageins$LAYOUT, pageins$OFFSET, fieldValue);
    }

    private static final OfInt cow_faults$LAYOUT = (OfInt)$LAYOUT.select(groupElement("cow_faults"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * integer_t cow_faults
     * }
     */
    public static final OfInt cow_faults$layout() {
        return cow_faults$LAYOUT;
    }

    private static final long cow_faults$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * integer_t cow_faults
     * }
     */
    public static final long cow_faults$offset() {
        return cow_faults$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * integer_t cow_faults
     * }
     */
    public static int cow_faults(MemorySegment struct) {
        return struct.get(cow_faults$LAYOUT, cow_faults$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * integer_t cow_faults
     * }
     */
    public static void cow_faults(MemorySegment struct, int fieldValue) {
        struct.set(cow_faults$LAYOUT, cow_faults$OFFSET, fieldValue);
    }

    private static final OfInt messages_sent$LAYOUT = (OfInt)$LAYOUT.select(groupElement("messages_sent"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * integer_t messages_sent
     * }
     */
    public static final OfInt messages_sent$layout() {
        return messages_sent$LAYOUT;
    }

    private static final long messages_sent$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * integer_t messages_sent
     * }
     */
    public static final long messages_sent$offset() {
        return messages_sent$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * integer_t messages_sent
     * }
     */
    public static int messages_sent(MemorySegment struct) {
        return struct.get(messages_sent$LAYOUT, messages_sent$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * integer_t messages_sent
     * }
     */
    public static void messages_sent(MemorySegment struct, int fieldValue) {
        struct.set(messages_sent$LAYOUT, messages_sent$OFFSET, fieldValue);
    }

    private static final OfInt messages_received$LAYOUT = (OfInt)$LAYOUT.select(groupElement("messages_received"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * integer_t messages_received
     * }
     */
    public static final OfInt messages_received$layout() {
        return messages_received$LAYOUT;
    }

    private static final long messages_received$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * integer_t messages_received
     * }
     */
    public static final long messages_received$offset() {
        return messages_received$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * integer_t messages_received
     * }
     */
    public static int messages_received(MemorySegment struct) {
        return struct.get(messages_received$LAYOUT, messages_received$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * integer_t messages_received
     * }
     */
    public static void messages_received(MemorySegment struct, int fieldValue) {
        struct.set(messages_received$LAYOUT, messages_received$OFFSET, fieldValue);
    }

    private static final OfInt syscalls_mach$LAYOUT = (OfInt)$LAYOUT.select(groupElement("syscalls_mach"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * integer_t syscalls_mach
     * }
     */
    public static final OfInt syscalls_mach$layout() {
        return syscalls_mach$LAYOUT;
    }

    private static final long syscalls_mach$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * integer_t syscalls_mach
     * }
     */
    public static final long syscalls_mach$offset() {
        return syscalls_mach$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * integer_t syscalls_mach
     * }
     */
    public static int syscalls_mach(MemorySegment struct) {
        return struct.get(syscalls_mach$LAYOUT, syscalls_mach$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * integer_t syscalls_mach
     * }
     */
    public static void syscalls_mach(MemorySegment struct, int fieldValue) {
        struct.set(syscalls_mach$LAYOUT, syscalls_mach$OFFSET, fieldValue);
    }

    private static final OfInt syscalls_unix$LAYOUT = (OfInt)$LAYOUT.select(groupElement("syscalls_unix"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * integer_t syscalls_unix
     * }
     */
    public static final OfInt syscalls_unix$layout() {
        return syscalls_unix$LAYOUT;
    }

    private static final long syscalls_unix$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * integer_t syscalls_unix
     * }
     */
    public static final long syscalls_unix$offset() {
        return syscalls_unix$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * integer_t syscalls_unix
     * }
     */
    public static int syscalls_unix(MemorySegment struct) {
        return struct.get(syscalls_unix$LAYOUT, syscalls_unix$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * integer_t syscalls_unix
     * }
     */
    public static void syscalls_unix(MemorySegment struct, int fieldValue) {
        struct.set(syscalls_unix$LAYOUT, syscalls_unix$OFFSET, fieldValue);
    }

    private static final OfInt csw$LAYOUT = (OfInt)$LAYOUT.select(groupElement("csw"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * integer_t csw
     * }
     */
    public static final OfInt csw$layout() {
        return csw$LAYOUT;
    }

    private static final long csw$OFFSET = 28;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * integer_t csw
     * }
     */
    public static final long csw$offset() {
        return csw$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * integer_t csw
     * }
     */
    public static int csw(MemorySegment struct) {
        return struct.get(csw$LAYOUT, csw$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * integer_t csw
     * }
     */
    public static void csw(MemorySegment struct, int fieldValue) {
        struct.set(csw$LAYOUT, csw$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

