// Generated by jextract

package com.github.marschall.objectivej.header;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct host_basic_info {
 *     integer_t max_cpus;
 *     integer_t avail_cpus;
 *     natural_t memory_size;
 *     cpu_type_t cpu_type;
 *     cpu_subtype_t cpu_subtype;
 *     cpu_threadtype_t cpu_threadtype;
 *     integer_t physical_cpu;
 *     integer_t physical_cpu_max;
 *     integer_t logical_cpu;
 *     integer_t logical_cpu_max;
 *     uint64_t max_mem;
 * }
 * }
 */
public class host_basic_info {

    host_basic_info() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        ObjCRuntime.C_INT.withName("max_cpus"),
        ObjCRuntime.C_INT.withName("avail_cpus"),
        ObjCRuntime.C_INT.withName("memory_size"),
        ObjCRuntime.C_INT.withName("cpu_type"),
        ObjCRuntime.C_INT.withName("cpu_subtype"),
        ObjCRuntime.C_INT.withName("cpu_threadtype"),
        ObjCRuntime.C_INT.withName("physical_cpu"),
        ObjCRuntime.C_INT.withName("physical_cpu_max"),
        ObjCRuntime.C_INT.withName("logical_cpu"),
        ObjCRuntime.C_INT.withName("logical_cpu_max"),
        ObjCRuntime.align(ObjCRuntime.C_LONG_LONG, 4).withName("max_mem")
    ).withName("host_basic_info");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt max_cpus$LAYOUT = (OfInt)$LAYOUT.select(groupElement("max_cpus"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * integer_t max_cpus
     * }
     */
    public static final OfInt max_cpus$layout() {
        return max_cpus$LAYOUT;
    }

    private static final long max_cpus$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * integer_t max_cpus
     * }
     */
    public static final long max_cpus$offset() {
        return max_cpus$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * integer_t max_cpus
     * }
     */
    public static int max_cpus(MemorySegment struct) {
        return struct.get(max_cpus$LAYOUT, max_cpus$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * integer_t max_cpus
     * }
     */
    public static void max_cpus(MemorySegment struct, int fieldValue) {
        struct.set(max_cpus$LAYOUT, max_cpus$OFFSET, fieldValue);
    }

    private static final OfInt avail_cpus$LAYOUT = (OfInt)$LAYOUT.select(groupElement("avail_cpus"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * integer_t avail_cpus
     * }
     */
    public static final OfInt avail_cpus$layout() {
        return avail_cpus$LAYOUT;
    }

    private static final long avail_cpus$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * integer_t avail_cpus
     * }
     */
    public static final long avail_cpus$offset() {
        return avail_cpus$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * integer_t avail_cpus
     * }
     */
    public static int avail_cpus(MemorySegment struct) {
        return struct.get(avail_cpus$LAYOUT, avail_cpus$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * integer_t avail_cpus
     * }
     */
    public static void avail_cpus(MemorySegment struct, int fieldValue) {
        struct.set(avail_cpus$LAYOUT, avail_cpus$OFFSET, fieldValue);
    }

    private static final OfInt memory_size$LAYOUT = (OfInt)$LAYOUT.select(groupElement("memory_size"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * natural_t memory_size
     * }
     */
    public static final OfInt memory_size$layout() {
        return memory_size$LAYOUT;
    }

    private static final long memory_size$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * natural_t memory_size
     * }
     */
    public static final long memory_size$offset() {
        return memory_size$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * natural_t memory_size
     * }
     */
    public static int memory_size(MemorySegment struct) {
        return struct.get(memory_size$LAYOUT, memory_size$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * natural_t memory_size
     * }
     */
    public static void memory_size(MemorySegment struct, int fieldValue) {
        struct.set(memory_size$LAYOUT, memory_size$OFFSET, fieldValue);
    }

    private static final OfInt cpu_type$LAYOUT = (OfInt)$LAYOUT.select(groupElement("cpu_type"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * cpu_type_t cpu_type
     * }
     */
    public static final OfInt cpu_type$layout() {
        return cpu_type$LAYOUT;
    }

    private static final long cpu_type$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * cpu_type_t cpu_type
     * }
     */
    public static final long cpu_type$offset() {
        return cpu_type$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * cpu_type_t cpu_type
     * }
     */
    public static int cpu_type(MemorySegment struct) {
        return struct.get(cpu_type$LAYOUT, cpu_type$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * cpu_type_t cpu_type
     * }
     */
    public static void cpu_type(MemorySegment struct, int fieldValue) {
        struct.set(cpu_type$LAYOUT, cpu_type$OFFSET, fieldValue);
    }

    private static final OfInt cpu_subtype$LAYOUT = (OfInt)$LAYOUT.select(groupElement("cpu_subtype"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * cpu_subtype_t cpu_subtype
     * }
     */
    public static final OfInt cpu_subtype$layout() {
        return cpu_subtype$LAYOUT;
    }

    private static final long cpu_subtype$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * cpu_subtype_t cpu_subtype
     * }
     */
    public static final long cpu_subtype$offset() {
        return cpu_subtype$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * cpu_subtype_t cpu_subtype
     * }
     */
    public static int cpu_subtype(MemorySegment struct) {
        return struct.get(cpu_subtype$LAYOUT, cpu_subtype$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * cpu_subtype_t cpu_subtype
     * }
     */
    public static void cpu_subtype(MemorySegment struct, int fieldValue) {
        struct.set(cpu_subtype$LAYOUT, cpu_subtype$OFFSET, fieldValue);
    }

    private static final OfInt cpu_threadtype$LAYOUT = (OfInt)$LAYOUT.select(groupElement("cpu_threadtype"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * cpu_threadtype_t cpu_threadtype
     * }
     */
    public static final OfInt cpu_threadtype$layout() {
        return cpu_threadtype$LAYOUT;
    }

    private static final long cpu_threadtype$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * cpu_threadtype_t cpu_threadtype
     * }
     */
    public static final long cpu_threadtype$offset() {
        return cpu_threadtype$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * cpu_threadtype_t cpu_threadtype
     * }
     */
    public static int cpu_threadtype(MemorySegment struct) {
        return struct.get(cpu_threadtype$LAYOUT, cpu_threadtype$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * cpu_threadtype_t cpu_threadtype
     * }
     */
    public static void cpu_threadtype(MemorySegment struct, int fieldValue) {
        struct.set(cpu_threadtype$LAYOUT, cpu_threadtype$OFFSET, fieldValue);
    }

    private static final OfInt physical_cpu$LAYOUT = (OfInt)$LAYOUT.select(groupElement("physical_cpu"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * integer_t physical_cpu
     * }
     */
    public static final OfInt physical_cpu$layout() {
        return physical_cpu$LAYOUT;
    }

    private static final long physical_cpu$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * integer_t physical_cpu
     * }
     */
    public static final long physical_cpu$offset() {
        return physical_cpu$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * integer_t physical_cpu
     * }
     */
    public static int physical_cpu(MemorySegment struct) {
        return struct.get(physical_cpu$LAYOUT, physical_cpu$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * integer_t physical_cpu
     * }
     */
    public static void physical_cpu(MemorySegment struct, int fieldValue) {
        struct.set(physical_cpu$LAYOUT, physical_cpu$OFFSET, fieldValue);
    }

    private static final OfInt physical_cpu_max$LAYOUT = (OfInt)$LAYOUT.select(groupElement("physical_cpu_max"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * integer_t physical_cpu_max
     * }
     */
    public static final OfInt physical_cpu_max$layout() {
        return physical_cpu_max$LAYOUT;
    }

    private static final long physical_cpu_max$OFFSET = 28;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * integer_t physical_cpu_max
     * }
     */
    public static final long physical_cpu_max$offset() {
        return physical_cpu_max$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * integer_t physical_cpu_max
     * }
     */
    public static int physical_cpu_max(MemorySegment struct) {
        return struct.get(physical_cpu_max$LAYOUT, physical_cpu_max$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * integer_t physical_cpu_max
     * }
     */
    public static void physical_cpu_max(MemorySegment struct, int fieldValue) {
        struct.set(physical_cpu_max$LAYOUT, physical_cpu_max$OFFSET, fieldValue);
    }

    private static final OfInt logical_cpu$LAYOUT = (OfInt)$LAYOUT.select(groupElement("logical_cpu"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * integer_t logical_cpu
     * }
     */
    public static final OfInt logical_cpu$layout() {
        return logical_cpu$LAYOUT;
    }

    private static final long logical_cpu$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * integer_t logical_cpu
     * }
     */
    public static final long logical_cpu$offset() {
        return logical_cpu$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * integer_t logical_cpu
     * }
     */
    public static int logical_cpu(MemorySegment struct) {
        return struct.get(logical_cpu$LAYOUT, logical_cpu$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * integer_t logical_cpu
     * }
     */
    public static void logical_cpu(MemorySegment struct, int fieldValue) {
        struct.set(logical_cpu$LAYOUT, logical_cpu$OFFSET, fieldValue);
    }

    private static final OfInt logical_cpu_max$LAYOUT = (OfInt)$LAYOUT.select(groupElement("logical_cpu_max"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * integer_t logical_cpu_max
     * }
     */
    public static final OfInt logical_cpu_max$layout() {
        return logical_cpu_max$LAYOUT;
    }

    private static final long logical_cpu_max$OFFSET = 36;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * integer_t logical_cpu_max
     * }
     */
    public static final long logical_cpu_max$offset() {
        return logical_cpu_max$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * integer_t logical_cpu_max
     * }
     */
    public static int logical_cpu_max(MemorySegment struct) {
        return struct.get(logical_cpu_max$LAYOUT, logical_cpu_max$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * integer_t logical_cpu_max
     * }
     */
    public static void logical_cpu_max(MemorySegment struct, int fieldValue) {
        struct.set(logical_cpu_max$LAYOUT, logical_cpu_max$OFFSET, fieldValue);
    }

    private static final OfLong max_mem$LAYOUT = (OfLong)$LAYOUT.select(groupElement("max_mem"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint64_t max_mem
     * }
     */
    public static final OfLong max_mem$layout() {
        return max_mem$LAYOUT;
    }

    private static final long max_mem$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint64_t max_mem
     * }
     */
    public static final long max_mem$offset() {
        return max_mem$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint64_t max_mem
     * }
     */
    public static long max_mem(MemorySegment struct) {
        return struct.get(max_mem$LAYOUT, max_mem$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint64_t max_mem
     * }
     */
    public static void max_mem(MemorySegment struct, long fieldValue) {
        struct.set(max_mem$LAYOUT, max_mem$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

