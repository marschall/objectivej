// Generated by jextract

package com.github.marschall.objectivej.header;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct task_vm_info {
 *     mach_vm_size_t virtual_size;
 *     integer_t region_count;
 *     integer_t page_size;
 *     mach_vm_size_t resident_size;
 *     mach_vm_size_t resident_size_peak;
 *     mach_vm_size_t device;
 *     mach_vm_size_t device_peak;
 *     mach_vm_size_t internal;
 *     mach_vm_size_t internal_peak;
 *     mach_vm_size_t external;
 *     mach_vm_size_t external_peak;
 *     mach_vm_size_t reusable;
 *     mach_vm_size_t reusable_peak;
 *     mach_vm_size_t purgeable_volatile_pmap;
 *     mach_vm_size_t purgeable_volatile_resident;
 *     mach_vm_size_t purgeable_volatile_virtual;
 *     mach_vm_size_t compressed;
 *     mach_vm_size_t compressed_peak;
 *     mach_vm_size_t compressed_lifetime;
 *     mach_vm_size_t phys_footprint;
 *     mach_vm_address_t min_address;
 *     mach_vm_address_t max_address;
 *     int64_t ledger_phys_footprint_peak;
 *     int64_t ledger_purgeable_nonvolatile;
 *     int64_t ledger_purgeable_novolatile_compressed;
 *     int64_t ledger_purgeable_volatile;
 *     int64_t ledger_purgeable_volatile_compressed;
 *     int64_t ledger_tag_network_nonvolatile;
 *     int64_t ledger_tag_network_nonvolatile_compressed;
 *     int64_t ledger_tag_network_volatile;
 *     int64_t ledger_tag_network_volatile_compressed;
 *     int64_t ledger_tag_media_footprint;
 *     int64_t ledger_tag_media_footprint_compressed;
 *     int64_t ledger_tag_media_nofootprint;
 *     int64_t ledger_tag_media_nofootprint_compressed;
 *     int64_t ledger_tag_graphics_footprint;
 *     int64_t ledger_tag_graphics_footprint_compressed;
 *     int64_t ledger_tag_graphics_nofootprint;
 *     int64_t ledger_tag_graphics_nofootprint_compressed;
 *     int64_t ledger_tag_neural_footprint;
 *     int64_t ledger_tag_neural_footprint_compressed;
 *     int64_t ledger_tag_neural_nofootprint;
 *     int64_t ledger_tag_neural_nofootprint_compressed;
 *     uint64_t limit_bytes_remaining;
 *     integer_t decompressions;
 *     int64_t ledger_swapins;
 *     int64_t ledger_tag_neural_nofootprint_total;
 *     int64_t ledger_tag_neural_nofootprint_peak;
 * }
 * }
 */
public class task_vm_info {

    task_vm_info() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        ObjCRuntime.align(ObjCRuntime.C_LONG_LONG, 4).withName("virtual_size"),
        ObjCRuntime.C_INT.withName("region_count"),
        ObjCRuntime.C_INT.withName("page_size"),
        ObjCRuntime.align(ObjCRuntime.C_LONG_LONG, 4).withName("resident_size"),
        ObjCRuntime.align(ObjCRuntime.C_LONG_LONG, 4).withName("resident_size_peak"),
        ObjCRuntime.align(ObjCRuntime.C_LONG_LONG, 4).withName("device"),
        ObjCRuntime.align(ObjCRuntime.C_LONG_LONG, 4).withName("device_peak"),
        ObjCRuntime.align(ObjCRuntime.C_LONG_LONG, 4).withName("internal"),
        ObjCRuntime.align(ObjCRuntime.C_LONG_LONG, 4).withName("internal_peak"),
        ObjCRuntime.align(ObjCRuntime.C_LONG_LONG, 4).withName("external"),
        ObjCRuntime.align(ObjCRuntime.C_LONG_LONG, 4).withName("external_peak"),
        ObjCRuntime.align(ObjCRuntime.C_LONG_LONG, 4).withName("reusable"),
        ObjCRuntime.align(ObjCRuntime.C_LONG_LONG, 4).withName("reusable_peak"),
        ObjCRuntime.align(ObjCRuntime.C_LONG_LONG, 4).withName("purgeable_volatile_pmap"),
        ObjCRuntime.align(ObjCRuntime.C_LONG_LONG, 4).withName("purgeable_volatile_resident"),
        ObjCRuntime.align(ObjCRuntime.C_LONG_LONG, 4).withName("purgeable_volatile_virtual"),
        ObjCRuntime.align(ObjCRuntime.C_LONG_LONG, 4).withName("compressed"),
        ObjCRuntime.align(ObjCRuntime.C_LONG_LONG, 4).withName("compressed_peak"),
        ObjCRuntime.align(ObjCRuntime.C_LONG_LONG, 4).withName("compressed_lifetime"),
        ObjCRuntime.align(ObjCRuntime.C_LONG_LONG, 4).withName("phys_footprint"),
        ObjCRuntime.align(ObjCRuntime.C_LONG_LONG, 4).withName("min_address"),
        ObjCRuntime.align(ObjCRuntime.C_LONG_LONG, 4).withName("max_address"),
        ObjCRuntime.align(ObjCRuntime.C_LONG_LONG, 4).withName("ledger_phys_footprint_peak"),
        ObjCRuntime.align(ObjCRuntime.C_LONG_LONG, 4).withName("ledger_purgeable_nonvolatile"),
        ObjCRuntime.align(ObjCRuntime.C_LONG_LONG, 4).withName("ledger_purgeable_novolatile_compressed"),
        ObjCRuntime.align(ObjCRuntime.C_LONG_LONG, 4).withName("ledger_purgeable_volatile"),
        ObjCRuntime.align(ObjCRuntime.C_LONG_LONG, 4).withName("ledger_purgeable_volatile_compressed"),
        ObjCRuntime.align(ObjCRuntime.C_LONG_LONG, 4).withName("ledger_tag_network_nonvolatile"),
        ObjCRuntime.align(ObjCRuntime.C_LONG_LONG, 4).withName("ledger_tag_network_nonvolatile_compressed"),
        ObjCRuntime.align(ObjCRuntime.C_LONG_LONG, 4).withName("ledger_tag_network_volatile"),
        ObjCRuntime.align(ObjCRuntime.C_LONG_LONG, 4).withName("ledger_tag_network_volatile_compressed"),
        ObjCRuntime.align(ObjCRuntime.C_LONG_LONG, 4).withName("ledger_tag_media_footprint"),
        ObjCRuntime.align(ObjCRuntime.C_LONG_LONG, 4).withName("ledger_tag_media_footprint_compressed"),
        ObjCRuntime.align(ObjCRuntime.C_LONG_LONG, 4).withName("ledger_tag_media_nofootprint"),
        ObjCRuntime.align(ObjCRuntime.C_LONG_LONG, 4).withName("ledger_tag_media_nofootprint_compressed"),
        ObjCRuntime.align(ObjCRuntime.C_LONG_LONG, 4).withName("ledger_tag_graphics_footprint"),
        ObjCRuntime.align(ObjCRuntime.C_LONG_LONG, 4).withName("ledger_tag_graphics_footprint_compressed"),
        ObjCRuntime.align(ObjCRuntime.C_LONG_LONG, 4).withName("ledger_tag_graphics_nofootprint"),
        ObjCRuntime.align(ObjCRuntime.C_LONG_LONG, 4).withName("ledger_tag_graphics_nofootprint_compressed"),
        ObjCRuntime.align(ObjCRuntime.C_LONG_LONG, 4).withName("ledger_tag_neural_footprint"),
        ObjCRuntime.align(ObjCRuntime.C_LONG_LONG, 4).withName("ledger_tag_neural_footprint_compressed"),
        ObjCRuntime.align(ObjCRuntime.C_LONG_LONG, 4).withName("ledger_tag_neural_nofootprint"),
        ObjCRuntime.align(ObjCRuntime.C_LONG_LONG, 4).withName("ledger_tag_neural_nofootprint_compressed"),
        ObjCRuntime.align(ObjCRuntime.C_LONG_LONG, 4).withName("limit_bytes_remaining"),
        ObjCRuntime.C_INT.withName("decompressions"),
        ObjCRuntime.align(ObjCRuntime.C_LONG_LONG, 4).withName("ledger_swapins"),
        ObjCRuntime.align(ObjCRuntime.C_LONG_LONG, 4).withName("ledger_tag_neural_nofootprint_total"),
        ObjCRuntime.align(ObjCRuntime.C_LONG_LONG, 4).withName("ledger_tag_neural_nofootprint_peak")
    ).withName("task_vm_info");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfLong virtual_size$LAYOUT = (OfLong)$LAYOUT.select(groupElement("virtual_size"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * mach_vm_size_t virtual_size
     * }
     */
    public static final OfLong virtual_size$layout() {
        return virtual_size$LAYOUT;
    }

    private static final long virtual_size$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * mach_vm_size_t virtual_size
     * }
     */
    public static final long virtual_size$offset() {
        return virtual_size$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * mach_vm_size_t virtual_size
     * }
     */
    public static long virtual_size(MemorySegment struct) {
        return struct.get(virtual_size$LAYOUT, virtual_size$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * mach_vm_size_t virtual_size
     * }
     */
    public static void virtual_size(MemorySegment struct, long fieldValue) {
        struct.set(virtual_size$LAYOUT, virtual_size$OFFSET, fieldValue);
    }

    private static final OfInt region_count$LAYOUT = (OfInt)$LAYOUT.select(groupElement("region_count"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * integer_t region_count
     * }
     */
    public static final OfInt region_count$layout() {
        return region_count$LAYOUT;
    }

    private static final long region_count$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * integer_t region_count
     * }
     */
    public static final long region_count$offset() {
        return region_count$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * integer_t region_count
     * }
     */
    public static int region_count(MemorySegment struct) {
        return struct.get(region_count$LAYOUT, region_count$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * integer_t region_count
     * }
     */
    public static void region_count(MemorySegment struct, int fieldValue) {
        struct.set(region_count$LAYOUT, region_count$OFFSET, fieldValue);
    }

    private static final OfInt page_size$LAYOUT = (OfInt)$LAYOUT.select(groupElement("page_size"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * integer_t page_size
     * }
     */
    public static final OfInt page_size$layout() {
        return page_size$LAYOUT;
    }

    private static final long page_size$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * integer_t page_size
     * }
     */
    public static final long page_size$offset() {
        return page_size$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * integer_t page_size
     * }
     */
    public static int page_size(MemorySegment struct) {
        return struct.get(page_size$LAYOUT, page_size$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * integer_t page_size
     * }
     */
    public static void page_size(MemorySegment struct, int fieldValue) {
        struct.set(page_size$LAYOUT, page_size$OFFSET, fieldValue);
    }

    private static final OfLong resident_size$LAYOUT = (OfLong)$LAYOUT.select(groupElement("resident_size"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * mach_vm_size_t resident_size
     * }
     */
    public static final OfLong resident_size$layout() {
        return resident_size$LAYOUT;
    }

    private static final long resident_size$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * mach_vm_size_t resident_size
     * }
     */
    public static final long resident_size$offset() {
        return resident_size$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * mach_vm_size_t resident_size
     * }
     */
    public static long resident_size(MemorySegment struct) {
        return struct.get(resident_size$LAYOUT, resident_size$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * mach_vm_size_t resident_size
     * }
     */
    public static void resident_size(MemorySegment struct, long fieldValue) {
        struct.set(resident_size$LAYOUT, resident_size$OFFSET, fieldValue);
    }

    private static final OfLong resident_size_peak$LAYOUT = (OfLong)$LAYOUT.select(groupElement("resident_size_peak"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * mach_vm_size_t resident_size_peak
     * }
     */
    public static final OfLong resident_size_peak$layout() {
        return resident_size_peak$LAYOUT;
    }

    private static final long resident_size_peak$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * mach_vm_size_t resident_size_peak
     * }
     */
    public static final long resident_size_peak$offset() {
        return resident_size_peak$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * mach_vm_size_t resident_size_peak
     * }
     */
    public static long resident_size_peak(MemorySegment struct) {
        return struct.get(resident_size_peak$LAYOUT, resident_size_peak$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * mach_vm_size_t resident_size_peak
     * }
     */
    public static void resident_size_peak(MemorySegment struct, long fieldValue) {
        struct.set(resident_size_peak$LAYOUT, resident_size_peak$OFFSET, fieldValue);
    }

    private static final OfLong device$LAYOUT = (OfLong)$LAYOUT.select(groupElement("device"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * mach_vm_size_t device
     * }
     */
    public static final OfLong device$layout() {
        return device$LAYOUT;
    }

    private static final long device$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * mach_vm_size_t device
     * }
     */
    public static final long device$offset() {
        return device$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * mach_vm_size_t device
     * }
     */
    public static long device(MemorySegment struct) {
        return struct.get(device$LAYOUT, device$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * mach_vm_size_t device
     * }
     */
    public static void device(MemorySegment struct, long fieldValue) {
        struct.set(device$LAYOUT, device$OFFSET, fieldValue);
    }

    private static final OfLong device_peak$LAYOUT = (OfLong)$LAYOUT.select(groupElement("device_peak"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * mach_vm_size_t device_peak
     * }
     */
    public static final OfLong device_peak$layout() {
        return device_peak$LAYOUT;
    }

    private static final long device_peak$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * mach_vm_size_t device_peak
     * }
     */
    public static final long device_peak$offset() {
        return device_peak$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * mach_vm_size_t device_peak
     * }
     */
    public static long device_peak(MemorySegment struct) {
        return struct.get(device_peak$LAYOUT, device_peak$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * mach_vm_size_t device_peak
     * }
     */
    public static void device_peak(MemorySegment struct, long fieldValue) {
        struct.set(device_peak$LAYOUT, device_peak$OFFSET, fieldValue);
    }

    private static final OfLong internal$LAYOUT = (OfLong)$LAYOUT.select(groupElement("internal"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * mach_vm_size_t internal
     * }
     */
    public static final OfLong internal$layout() {
        return internal$LAYOUT;
    }

    private static final long internal$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * mach_vm_size_t internal
     * }
     */
    public static final long internal$offset() {
        return internal$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * mach_vm_size_t internal
     * }
     */
    public static long internal(MemorySegment struct) {
        return struct.get(internal$LAYOUT, internal$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * mach_vm_size_t internal
     * }
     */
    public static void internal(MemorySegment struct, long fieldValue) {
        struct.set(internal$LAYOUT, internal$OFFSET, fieldValue);
    }

    private static final OfLong internal_peak$LAYOUT = (OfLong)$LAYOUT.select(groupElement("internal_peak"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * mach_vm_size_t internal_peak
     * }
     */
    public static final OfLong internal_peak$layout() {
        return internal_peak$LAYOUT;
    }

    private static final long internal_peak$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * mach_vm_size_t internal_peak
     * }
     */
    public static final long internal_peak$offset() {
        return internal_peak$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * mach_vm_size_t internal_peak
     * }
     */
    public static long internal_peak(MemorySegment struct) {
        return struct.get(internal_peak$LAYOUT, internal_peak$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * mach_vm_size_t internal_peak
     * }
     */
    public static void internal_peak(MemorySegment struct, long fieldValue) {
        struct.set(internal_peak$LAYOUT, internal_peak$OFFSET, fieldValue);
    }

    private static final OfLong external$LAYOUT = (OfLong)$LAYOUT.select(groupElement("external"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * mach_vm_size_t external
     * }
     */
    public static final OfLong external$layout() {
        return external$LAYOUT;
    }

    private static final long external$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * mach_vm_size_t external
     * }
     */
    public static final long external$offset() {
        return external$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * mach_vm_size_t external
     * }
     */
    public static long external(MemorySegment struct) {
        return struct.get(external$LAYOUT, external$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * mach_vm_size_t external
     * }
     */
    public static void external(MemorySegment struct, long fieldValue) {
        struct.set(external$LAYOUT, external$OFFSET, fieldValue);
    }

    private static final OfLong external_peak$LAYOUT = (OfLong)$LAYOUT.select(groupElement("external_peak"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * mach_vm_size_t external_peak
     * }
     */
    public static final OfLong external_peak$layout() {
        return external_peak$LAYOUT;
    }

    private static final long external_peak$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * mach_vm_size_t external_peak
     * }
     */
    public static final long external_peak$offset() {
        return external_peak$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * mach_vm_size_t external_peak
     * }
     */
    public static long external_peak(MemorySegment struct) {
        return struct.get(external_peak$LAYOUT, external_peak$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * mach_vm_size_t external_peak
     * }
     */
    public static void external_peak(MemorySegment struct, long fieldValue) {
        struct.set(external_peak$LAYOUT, external_peak$OFFSET, fieldValue);
    }

    private static final OfLong reusable$LAYOUT = (OfLong)$LAYOUT.select(groupElement("reusable"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * mach_vm_size_t reusable
     * }
     */
    public static final OfLong reusable$layout() {
        return reusable$LAYOUT;
    }

    private static final long reusable$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * mach_vm_size_t reusable
     * }
     */
    public static final long reusable$offset() {
        return reusable$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * mach_vm_size_t reusable
     * }
     */
    public static long reusable(MemorySegment struct) {
        return struct.get(reusable$LAYOUT, reusable$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * mach_vm_size_t reusable
     * }
     */
    public static void reusable(MemorySegment struct, long fieldValue) {
        struct.set(reusable$LAYOUT, reusable$OFFSET, fieldValue);
    }

    private static final OfLong reusable_peak$LAYOUT = (OfLong)$LAYOUT.select(groupElement("reusable_peak"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * mach_vm_size_t reusable_peak
     * }
     */
    public static final OfLong reusable_peak$layout() {
        return reusable_peak$LAYOUT;
    }

    private static final long reusable_peak$OFFSET = 88;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * mach_vm_size_t reusable_peak
     * }
     */
    public static final long reusable_peak$offset() {
        return reusable_peak$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * mach_vm_size_t reusable_peak
     * }
     */
    public static long reusable_peak(MemorySegment struct) {
        return struct.get(reusable_peak$LAYOUT, reusable_peak$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * mach_vm_size_t reusable_peak
     * }
     */
    public static void reusable_peak(MemorySegment struct, long fieldValue) {
        struct.set(reusable_peak$LAYOUT, reusable_peak$OFFSET, fieldValue);
    }

    private static final OfLong purgeable_volatile_pmap$LAYOUT = (OfLong)$LAYOUT.select(groupElement("purgeable_volatile_pmap"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * mach_vm_size_t purgeable_volatile_pmap
     * }
     */
    public static final OfLong purgeable_volatile_pmap$layout() {
        return purgeable_volatile_pmap$LAYOUT;
    }

    private static final long purgeable_volatile_pmap$OFFSET = 96;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * mach_vm_size_t purgeable_volatile_pmap
     * }
     */
    public static final long purgeable_volatile_pmap$offset() {
        return purgeable_volatile_pmap$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * mach_vm_size_t purgeable_volatile_pmap
     * }
     */
    public static long purgeable_volatile_pmap(MemorySegment struct) {
        return struct.get(purgeable_volatile_pmap$LAYOUT, purgeable_volatile_pmap$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * mach_vm_size_t purgeable_volatile_pmap
     * }
     */
    public static void purgeable_volatile_pmap(MemorySegment struct, long fieldValue) {
        struct.set(purgeable_volatile_pmap$LAYOUT, purgeable_volatile_pmap$OFFSET, fieldValue);
    }

    private static final OfLong purgeable_volatile_resident$LAYOUT = (OfLong)$LAYOUT.select(groupElement("purgeable_volatile_resident"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * mach_vm_size_t purgeable_volatile_resident
     * }
     */
    public static final OfLong purgeable_volatile_resident$layout() {
        return purgeable_volatile_resident$LAYOUT;
    }

    private static final long purgeable_volatile_resident$OFFSET = 104;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * mach_vm_size_t purgeable_volatile_resident
     * }
     */
    public static final long purgeable_volatile_resident$offset() {
        return purgeable_volatile_resident$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * mach_vm_size_t purgeable_volatile_resident
     * }
     */
    public static long purgeable_volatile_resident(MemorySegment struct) {
        return struct.get(purgeable_volatile_resident$LAYOUT, purgeable_volatile_resident$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * mach_vm_size_t purgeable_volatile_resident
     * }
     */
    public static void purgeable_volatile_resident(MemorySegment struct, long fieldValue) {
        struct.set(purgeable_volatile_resident$LAYOUT, purgeable_volatile_resident$OFFSET, fieldValue);
    }

    private static final OfLong purgeable_volatile_virtual$LAYOUT = (OfLong)$LAYOUT.select(groupElement("purgeable_volatile_virtual"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * mach_vm_size_t purgeable_volatile_virtual
     * }
     */
    public static final OfLong purgeable_volatile_virtual$layout() {
        return purgeable_volatile_virtual$LAYOUT;
    }

    private static final long purgeable_volatile_virtual$OFFSET = 112;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * mach_vm_size_t purgeable_volatile_virtual
     * }
     */
    public static final long purgeable_volatile_virtual$offset() {
        return purgeable_volatile_virtual$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * mach_vm_size_t purgeable_volatile_virtual
     * }
     */
    public static long purgeable_volatile_virtual(MemorySegment struct) {
        return struct.get(purgeable_volatile_virtual$LAYOUT, purgeable_volatile_virtual$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * mach_vm_size_t purgeable_volatile_virtual
     * }
     */
    public static void purgeable_volatile_virtual(MemorySegment struct, long fieldValue) {
        struct.set(purgeable_volatile_virtual$LAYOUT, purgeable_volatile_virtual$OFFSET, fieldValue);
    }

    private static final OfLong compressed$LAYOUT = (OfLong)$LAYOUT.select(groupElement("compressed"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * mach_vm_size_t compressed
     * }
     */
    public static final OfLong compressed$layout() {
        return compressed$LAYOUT;
    }

    private static final long compressed$OFFSET = 120;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * mach_vm_size_t compressed
     * }
     */
    public static final long compressed$offset() {
        return compressed$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * mach_vm_size_t compressed
     * }
     */
    public static long compressed(MemorySegment struct) {
        return struct.get(compressed$LAYOUT, compressed$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * mach_vm_size_t compressed
     * }
     */
    public static void compressed(MemorySegment struct, long fieldValue) {
        struct.set(compressed$LAYOUT, compressed$OFFSET, fieldValue);
    }

    private static final OfLong compressed_peak$LAYOUT = (OfLong)$LAYOUT.select(groupElement("compressed_peak"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * mach_vm_size_t compressed_peak
     * }
     */
    public static final OfLong compressed_peak$layout() {
        return compressed_peak$LAYOUT;
    }

    private static final long compressed_peak$OFFSET = 128;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * mach_vm_size_t compressed_peak
     * }
     */
    public static final long compressed_peak$offset() {
        return compressed_peak$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * mach_vm_size_t compressed_peak
     * }
     */
    public static long compressed_peak(MemorySegment struct) {
        return struct.get(compressed_peak$LAYOUT, compressed_peak$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * mach_vm_size_t compressed_peak
     * }
     */
    public static void compressed_peak(MemorySegment struct, long fieldValue) {
        struct.set(compressed_peak$LAYOUT, compressed_peak$OFFSET, fieldValue);
    }

    private static final OfLong compressed_lifetime$LAYOUT = (OfLong)$LAYOUT.select(groupElement("compressed_lifetime"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * mach_vm_size_t compressed_lifetime
     * }
     */
    public static final OfLong compressed_lifetime$layout() {
        return compressed_lifetime$LAYOUT;
    }

    private static final long compressed_lifetime$OFFSET = 136;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * mach_vm_size_t compressed_lifetime
     * }
     */
    public static final long compressed_lifetime$offset() {
        return compressed_lifetime$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * mach_vm_size_t compressed_lifetime
     * }
     */
    public static long compressed_lifetime(MemorySegment struct) {
        return struct.get(compressed_lifetime$LAYOUT, compressed_lifetime$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * mach_vm_size_t compressed_lifetime
     * }
     */
    public static void compressed_lifetime(MemorySegment struct, long fieldValue) {
        struct.set(compressed_lifetime$LAYOUT, compressed_lifetime$OFFSET, fieldValue);
    }

    private static final OfLong phys_footprint$LAYOUT = (OfLong)$LAYOUT.select(groupElement("phys_footprint"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * mach_vm_size_t phys_footprint
     * }
     */
    public static final OfLong phys_footprint$layout() {
        return phys_footprint$LAYOUT;
    }

    private static final long phys_footprint$OFFSET = 144;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * mach_vm_size_t phys_footprint
     * }
     */
    public static final long phys_footprint$offset() {
        return phys_footprint$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * mach_vm_size_t phys_footprint
     * }
     */
    public static long phys_footprint(MemorySegment struct) {
        return struct.get(phys_footprint$LAYOUT, phys_footprint$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * mach_vm_size_t phys_footprint
     * }
     */
    public static void phys_footprint(MemorySegment struct, long fieldValue) {
        struct.set(phys_footprint$LAYOUT, phys_footprint$OFFSET, fieldValue);
    }

    private static final OfLong min_address$LAYOUT = (OfLong)$LAYOUT.select(groupElement("min_address"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * mach_vm_address_t min_address
     * }
     */
    public static final OfLong min_address$layout() {
        return min_address$LAYOUT;
    }

    private static final long min_address$OFFSET = 152;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * mach_vm_address_t min_address
     * }
     */
    public static final long min_address$offset() {
        return min_address$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * mach_vm_address_t min_address
     * }
     */
    public static long min_address(MemorySegment struct) {
        return struct.get(min_address$LAYOUT, min_address$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * mach_vm_address_t min_address
     * }
     */
    public static void min_address(MemorySegment struct, long fieldValue) {
        struct.set(min_address$LAYOUT, min_address$OFFSET, fieldValue);
    }

    private static final OfLong max_address$LAYOUT = (OfLong)$LAYOUT.select(groupElement("max_address"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * mach_vm_address_t max_address
     * }
     */
    public static final OfLong max_address$layout() {
        return max_address$LAYOUT;
    }

    private static final long max_address$OFFSET = 160;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * mach_vm_address_t max_address
     * }
     */
    public static final long max_address$offset() {
        return max_address$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * mach_vm_address_t max_address
     * }
     */
    public static long max_address(MemorySegment struct) {
        return struct.get(max_address$LAYOUT, max_address$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * mach_vm_address_t max_address
     * }
     */
    public static void max_address(MemorySegment struct, long fieldValue) {
        struct.set(max_address$LAYOUT, max_address$OFFSET, fieldValue);
    }

    private static final OfLong ledger_phys_footprint_peak$LAYOUT = (OfLong)$LAYOUT.select(groupElement("ledger_phys_footprint_peak"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int64_t ledger_phys_footprint_peak
     * }
     */
    public static final OfLong ledger_phys_footprint_peak$layout() {
        return ledger_phys_footprint_peak$LAYOUT;
    }

    private static final long ledger_phys_footprint_peak$OFFSET = 168;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int64_t ledger_phys_footprint_peak
     * }
     */
    public static final long ledger_phys_footprint_peak$offset() {
        return ledger_phys_footprint_peak$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int64_t ledger_phys_footprint_peak
     * }
     */
    public static long ledger_phys_footprint_peak(MemorySegment struct) {
        return struct.get(ledger_phys_footprint_peak$LAYOUT, ledger_phys_footprint_peak$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int64_t ledger_phys_footprint_peak
     * }
     */
    public static void ledger_phys_footprint_peak(MemorySegment struct, long fieldValue) {
        struct.set(ledger_phys_footprint_peak$LAYOUT, ledger_phys_footprint_peak$OFFSET, fieldValue);
    }

    private static final OfLong ledger_purgeable_nonvolatile$LAYOUT = (OfLong)$LAYOUT.select(groupElement("ledger_purgeable_nonvolatile"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int64_t ledger_purgeable_nonvolatile
     * }
     */
    public static final OfLong ledger_purgeable_nonvolatile$layout() {
        return ledger_purgeable_nonvolatile$LAYOUT;
    }

    private static final long ledger_purgeable_nonvolatile$OFFSET = 176;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int64_t ledger_purgeable_nonvolatile
     * }
     */
    public static final long ledger_purgeable_nonvolatile$offset() {
        return ledger_purgeable_nonvolatile$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int64_t ledger_purgeable_nonvolatile
     * }
     */
    public static long ledger_purgeable_nonvolatile(MemorySegment struct) {
        return struct.get(ledger_purgeable_nonvolatile$LAYOUT, ledger_purgeable_nonvolatile$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int64_t ledger_purgeable_nonvolatile
     * }
     */
    public static void ledger_purgeable_nonvolatile(MemorySegment struct, long fieldValue) {
        struct.set(ledger_purgeable_nonvolatile$LAYOUT, ledger_purgeable_nonvolatile$OFFSET, fieldValue);
    }

    private static final OfLong ledger_purgeable_novolatile_compressed$LAYOUT = (OfLong)$LAYOUT.select(groupElement("ledger_purgeable_novolatile_compressed"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int64_t ledger_purgeable_novolatile_compressed
     * }
     */
    public static final OfLong ledger_purgeable_novolatile_compressed$layout() {
        return ledger_purgeable_novolatile_compressed$LAYOUT;
    }

    private static final long ledger_purgeable_novolatile_compressed$OFFSET = 184;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int64_t ledger_purgeable_novolatile_compressed
     * }
     */
    public static final long ledger_purgeable_novolatile_compressed$offset() {
        return ledger_purgeable_novolatile_compressed$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int64_t ledger_purgeable_novolatile_compressed
     * }
     */
    public static long ledger_purgeable_novolatile_compressed(MemorySegment struct) {
        return struct.get(ledger_purgeable_novolatile_compressed$LAYOUT, ledger_purgeable_novolatile_compressed$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int64_t ledger_purgeable_novolatile_compressed
     * }
     */
    public static void ledger_purgeable_novolatile_compressed(MemorySegment struct, long fieldValue) {
        struct.set(ledger_purgeable_novolatile_compressed$LAYOUT, ledger_purgeable_novolatile_compressed$OFFSET, fieldValue);
    }

    private static final OfLong ledger_purgeable_volatile$LAYOUT = (OfLong)$LAYOUT.select(groupElement("ledger_purgeable_volatile"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int64_t ledger_purgeable_volatile
     * }
     */
    public static final OfLong ledger_purgeable_volatile$layout() {
        return ledger_purgeable_volatile$LAYOUT;
    }

    private static final long ledger_purgeable_volatile$OFFSET = 192;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int64_t ledger_purgeable_volatile
     * }
     */
    public static final long ledger_purgeable_volatile$offset() {
        return ledger_purgeable_volatile$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int64_t ledger_purgeable_volatile
     * }
     */
    public static long ledger_purgeable_volatile(MemorySegment struct) {
        return struct.get(ledger_purgeable_volatile$LAYOUT, ledger_purgeable_volatile$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int64_t ledger_purgeable_volatile
     * }
     */
    public static void ledger_purgeable_volatile(MemorySegment struct, long fieldValue) {
        struct.set(ledger_purgeable_volatile$LAYOUT, ledger_purgeable_volatile$OFFSET, fieldValue);
    }

    private static final OfLong ledger_purgeable_volatile_compressed$LAYOUT = (OfLong)$LAYOUT.select(groupElement("ledger_purgeable_volatile_compressed"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int64_t ledger_purgeable_volatile_compressed
     * }
     */
    public static final OfLong ledger_purgeable_volatile_compressed$layout() {
        return ledger_purgeable_volatile_compressed$LAYOUT;
    }

    private static final long ledger_purgeable_volatile_compressed$OFFSET = 200;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int64_t ledger_purgeable_volatile_compressed
     * }
     */
    public static final long ledger_purgeable_volatile_compressed$offset() {
        return ledger_purgeable_volatile_compressed$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int64_t ledger_purgeable_volatile_compressed
     * }
     */
    public static long ledger_purgeable_volatile_compressed(MemorySegment struct) {
        return struct.get(ledger_purgeable_volatile_compressed$LAYOUT, ledger_purgeable_volatile_compressed$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int64_t ledger_purgeable_volatile_compressed
     * }
     */
    public static void ledger_purgeable_volatile_compressed(MemorySegment struct, long fieldValue) {
        struct.set(ledger_purgeable_volatile_compressed$LAYOUT, ledger_purgeable_volatile_compressed$OFFSET, fieldValue);
    }

    private static final OfLong ledger_tag_network_nonvolatile$LAYOUT = (OfLong)$LAYOUT.select(groupElement("ledger_tag_network_nonvolatile"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int64_t ledger_tag_network_nonvolatile
     * }
     */
    public static final OfLong ledger_tag_network_nonvolatile$layout() {
        return ledger_tag_network_nonvolatile$LAYOUT;
    }

    private static final long ledger_tag_network_nonvolatile$OFFSET = 208;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int64_t ledger_tag_network_nonvolatile
     * }
     */
    public static final long ledger_tag_network_nonvolatile$offset() {
        return ledger_tag_network_nonvolatile$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int64_t ledger_tag_network_nonvolatile
     * }
     */
    public static long ledger_tag_network_nonvolatile(MemorySegment struct) {
        return struct.get(ledger_tag_network_nonvolatile$LAYOUT, ledger_tag_network_nonvolatile$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int64_t ledger_tag_network_nonvolatile
     * }
     */
    public static void ledger_tag_network_nonvolatile(MemorySegment struct, long fieldValue) {
        struct.set(ledger_tag_network_nonvolatile$LAYOUT, ledger_tag_network_nonvolatile$OFFSET, fieldValue);
    }

    private static final OfLong ledger_tag_network_nonvolatile_compressed$LAYOUT = (OfLong)$LAYOUT.select(groupElement("ledger_tag_network_nonvolatile_compressed"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int64_t ledger_tag_network_nonvolatile_compressed
     * }
     */
    public static final OfLong ledger_tag_network_nonvolatile_compressed$layout() {
        return ledger_tag_network_nonvolatile_compressed$LAYOUT;
    }

    private static final long ledger_tag_network_nonvolatile_compressed$OFFSET = 216;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int64_t ledger_tag_network_nonvolatile_compressed
     * }
     */
    public static final long ledger_tag_network_nonvolatile_compressed$offset() {
        return ledger_tag_network_nonvolatile_compressed$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int64_t ledger_tag_network_nonvolatile_compressed
     * }
     */
    public static long ledger_tag_network_nonvolatile_compressed(MemorySegment struct) {
        return struct.get(ledger_tag_network_nonvolatile_compressed$LAYOUT, ledger_tag_network_nonvolatile_compressed$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int64_t ledger_tag_network_nonvolatile_compressed
     * }
     */
    public static void ledger_tag_network_nonvolatile_compressed(MemorySegment struct, long fieldValue) {
        struct.set(ledger_tag_network_nonvolatile_compressed$LAYOUT, ledger_tag_network_nonvolatile_compressed$OFFSET, fieldValue);
    }

    private static final OfLong ledger_tag_network_volatile$LAYOUT = (OfLong)$LAYOUT.select(groupElement("ledger_tag_network_volatile"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int64_t ledger_tag_network_volatile
     * }
     */
    public static final OfLong ledger_tag_network_volatile$layout() {
        return ledger_tag_network_volatile$LAYOUT;
    }

    private static final long ledger_tag_network_volatile$OFFSET = 224;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int64_t ledger_tag_network_volatile
     * }
     */
    public static final long ledger_tag_network_volatile$offset() {
        return ledger_tag_network_volatile$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int64_t ledger_tag_network_volatile
     * }
     */
    public static long ledger_tag_network_volatile(MemorySegment struct) {
        return struct.get(ledger_tag_network_volatile$LAYOUT, ledger_tag_network_volatile$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int64_t ledger_tag_network_volatile
     * }
     */
    public static void ledger_tag_network_volatile(MemorySegment struct, long fieldValue) {
        struct.set(ledger_tag_network_volatile$LAYOUT, ledger_tag_network_volatile$OFFSET, fieldValue);
    }

    private static final OfLong ledger_tag_network_volatile_compressed$LAYOUT = (OfLong)$LAYOUT.select(groupElement("ledger_tag_network_volatile_compressed"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int64_t ledger_tag_network_volatile_compressed
     * }
     */
    public static final OfLong ledger_tag_network_volatile_compressed$layout() {
        return ledger_tag_network_volatile_compressed$LAYOUT;
    }

    private static final long ledger_tag_network_volatile_compressed$OFFSET = 232;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int64_t ledger_tag_network_volatile_compressed
     * }
     */
    public static final long ledger_tag_network_volatile_compressed$offset() {
        return ledger_tag_network_volatile_compressed$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int64_t ledger_tag_network_volatile_compressed
     * }
     */
    public static long ledger_tag_network_volatile_compressed(MemorySegment struct) {
        return struct.get(ledger_tag_network_volatile_compressed$LAYOUT, ledger_tag_network_volatile_compressed$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int64_t ledger_tag_network_volatile_compressed
     * }
     */
    public static void ledger_tag_network_volatile_compressed(MemorySegment struct, long fieldValue) {
        struct.set(ledger_tag_network_volatile_compressed$LAYOUT, ledger_tag_network_volatile_compressed$OFFSET, fieldValue);
    }

    private static final OfLong ledger_tag_media_footprint$LAYOUT = (OfLong)$LAYOUT.select(groupElement("ledger_tag_media_footprint"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int64_t ledger_tag_media_footprint
     * }
     */
    public static final OfLong ledger_tag_media_footprint$layout() {
        return ledger_tag_media_footprint$LAYOUT;
    }

    private static final long ledger_tag_media_footprint$OFFSET = 240;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int64_t ledger_tag_media_footprint
     * }
     */
    public static final long ledger_tag_media_footprint$offset() {
        return ledger_tag_media_footprint$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int64_t ledger_tag_media_footprint
     * }
     */
    public static long ledger_tag_media_footprint(MemorySegment struct) {
        return struct.get(ledger_tag_media_footprint$LAYOUT, ledger_tag_media_footprint$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int64_t ledger_tag_media_footprint
     * }
     */
    public static void ledger_tag_media_footprint(MemorySegment struct, long fieldValue) {
        struct.set(ledger_tag_media_footprint$LAYOUT, ledger_tag_media_footprint$OFFSET, fieldValue);
    }

    private static final OfLong ledger_tag_media_footprint_compressed$LAYOUT = (OfLong)$LAYOUT.select(groupElement("ledger_tag_media_footprint_compressed"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int64_t ledger_tag_media_footprint_compressed
     * }
     */
    public static final OfLong ledger_tag_media_footprint_compressed$layout() {
        return ledger_tag_media_footprint_compressed$LAYOUT;
    }

    private static final long ledger_tag_media_footprint_compressed$OFFSET = 248;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int64_t ledger_tag_media_footprint_compressed
     * }
     */
    public static final long ledger_tag_media_footprint_compressed$offset() {
        return ledger_tag_media_footprint_compressed$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int64_t ledger_tag_media_footprint_compressed
     * }
     */
    public static long ledger_tag_media_footprint_compressed(MemorySegment struct) {
        return struct.get(ledger_tag_media_footprint_compressed$LAYOUT, ledger_tag_media_footprint_compressed$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int64_t ledger_tag_media_footprint_compressed
     * }
     */
    public static void ledger_tag_media_footprint_compressed(MemorySegment struct, long fieldValue) {
        struct.set(ledger_tag_media_footprint_compressed$LAYOUT, ledger_tag_media_footprint_compressed$OFFSET, fieldValue);
    }

    private static final OfLong ledger_tag_media_nofootprint$LAYOUT = (OfLong)$LAYOUT.select(groupElement("ledger_tag_media_nofootprint"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int64_t ledger_tag_media_nofootprint
     * }
     */
    public static final OfLong ledger_tag_media_nofootprint$layout() {
        return ledger_tag_media_nofootprint$LAYOUT;
    }

    private static final long ledger_tag_media_nofootprint$OFFSET = 256;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int64_t ledger_tag_media_nofootprint
     * }
     */
    public static final long ledger_tag_media_nofootprint$offset() {
        return ledger_tag_media_nofootprint$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int64_t ledger_tag_media_nofootprint
     * }
     */
    public static long ledger_tag_media_nofootprint(MemorySegment struct) {
        return struct.get(ledger_tag_media_nofootprint$LAYOUT, ledger_tag_media_nofootprint$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int64_t ledger_tag_media_nofootprint
     * }
     */
    public static void ledger_tag_media_nofootprint(MemorySegment struct, long fieldValue) {
        struct.set(ledger_tag_media_nofootprint$LAYOUT, ledger_tag_media_nofootprint$OFFSET, fieldValue);
    }

    private static final OfLong ledger_tag_media_nofootprint_compressed$LAYOUT = (OfLong)$LAYOUT.select(groupElement("ledger_tag_media_nofootprint_compressed"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int64_t ledger_tag_media_nofootprint_compressed
     * }
     */
    public static final OfLong ledger_tag_media_nofootprint_compressed$layout() {
        return ledger_tag_media_nofootprint_compressed$LAYOUT;
    }

    private static final long ledger_tag_media_nofootprint_compressed$OFFSET = 264;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int64_t ledger_tag_media_nofootprint_compressed
     * }
     */
    public static final long ledger_tag_media_nofootprint_compressed$offset() {
        return ledger_tag_media_nofootprint_compressed$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int64_t ledger_tag_media_nofootprint_compressed
     * }
     */
    public static long ledger_tag_media_nofootprint_compressed(MemorySegment struct) {
        return struct.get(ledger_tag_media_nofootprint_compressed$LAYOUT, ledger_tag_media_nofootprint_compressed$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int64_t ledger_tag_media_nofootprint_compressed
     * }
     */
    public static void ledger_tag_media_nofootprint_compressed(MemorySegment struct, long fieldValue) {
        struct.set(ledger_tag_media_nofootprint_compressed$LAYOUT, ledger_tag_media_nofootprint_compressed$OFFSET, fieldValue);
    }

    private static final OfLong ledger_tag_graphics_footprint$LAYOUT = (OfLong)$LAYOUT.select(groupElement("ledger_tag_graphics_footprint"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int64_t ledger_tag_graphics_footprint
     * }
     */
    public static final OfLong ledger_tag_graphics_footprint$layout() {
        return ledger_tag_graphics_footprint$LAYOUT;
    }

    private static final long ledger_tag_graphics_footprint$OFFSET = 272;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int64_t ledger_tag_graphics_footprint
     * }
     */
    public static final long ledger_tag_graphics_footprint$offset() {
        return ledger_tag_graphics_footprint$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int64_t ledger_tag_graphics_footprint
     * }
     */
    public static long ledger_tag_graphics_footprint(MemorySegment struct) {
        return struct.get(ledger_tag_graphics_footprint$LAYOUT, ledger_tag_graphics_footprint$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int64_t ledger_tag_graphics_footprint
     * }
     */
    public static void ledger_tag_graphics_footprint(MemorySegment struct, long fieldValue) {
        struct.set(ledger_tag_graphics_footprint$LAYOUT, ledger_tag_graphics_footprint$OFFSET, fieldValue);
    }

    private static final OfLong ledger_tag_graphics_footprint_compressed$LAYOUT = (OfLong)$LAYOUT.select(groupElement("ledger_tag_graphics_footprint_compressed"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int64_t ledger_tag_graphics_footprint_compressed
     * }
     */
    public static final OfLong ledger_tag_graphics_footprint_compressed$layout() {
        return ledger_tag_graphics_footprint_compressed$LAYOUT;
    }

    private static final long ledger_tag_graphics_footprint_compressed$OFFSET = 280;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int64_t ledger_tag_graphics_footprint_compressed
     * }
     */
    public static final long ledger_tag_graphics_footprint_compressed$offset() {
        return ledger_tag_graphics_footprint_compressed$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int64_t ledger_tag_graphics_footprint_compressed
     * }
     */
    public static long ledger_tag_graphics_footprint_compressed(MemorySegment struct) {
        return struct.get(ledger_tag_graphics_footprint_compressed$LAYOUT, ledger_tag_graphics_footprint_compressed$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int64_t ledger_tag_graphics_footprint_compressed
     * }
     */
    public static void ledger_tag_graphics_footprint_compressed(MemorySegment struct, long fieldValue) {
        struct.set(ledger_tag_graphics_footprint_compressed$LAYOUT, ledger_tag_graphics_footprint_compressed$OFFSET, fieldValue);
    }

    private static final OfLong ledger_tag_graphics_nofootprint$LAYOUT = (OfLong)$LAYOUT.select(groupElement("ledger_tag_graphics_nofootprint"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int64_t ledger_tag_graphics_nofootprint
     * }
     */
    public static final OfLong ledger_tag_graphics_nofootprint$layout() {
        return ledger_tag_graphics_nofootprint$LAYOUT;
    }

    private static final long ledger_tag_graphics_nofootprint$OFFSET = 288;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int64_t ledger_tag_graphics_nofootprint
     * }
     */
    public static final long ledger_tag_graphics_nofootprint$offset() {
        return ledger_tag_graphics_nofootprint$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int64_t ledger_tag_graphics_nofootprint
     * }
     */
    public static long ledger_tag_graphics_nofootprint(MemorySegment struct) {
        return struct.get(ledger_tag_graphics_nofootprint$LAYOUT, ledger_tag_graphics_nofootprint$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int64_t ledger_tag_graphics_nofootprint
     * }
     */
    public static void ledger_tag_graphics_nofootprint(MemorySegment struct, long fieldValue) {
        struct.set(ledger_tag_graphics_nofootprint$LAYOUT, ledger_tag_graphics_nofootprint$OFFSET, fieldValue);
    }

    private static final OfLong ledger_tag_graphics_nofootprint_compressed$LAYOUT = (OfLong)$LAYOUT.select(groupElement("ledger_tag_graphics_nofootprint_compressed"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int64_t ledger_tag_graphics_nofootprint_compressed
     * }
     */
    public static final OfLong ledger_tag_graphics_nofootprint_compressed$layout() {
        return ledger_tag_graphics_nofootprint_compressed$LAYOUT;
    }

    private static final long ledger_tag_graphics_nofootprint_compressed$OFFSET = 296;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int64_t ledger_tag_graphics_nofootprint_compressed
     * }
     */
    public static final long ledger_tag_graphics_nofootprint_compressed$offset() {
        return ledger_tag_graphics_nofootprint_compressed$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int64_t ledger_tag_graphics_nofootprint_compressed
     * }
     */
    public static long ledger_tag_graphics_nofootprint_compressed(MemorySegment struct) {
        return struct.get(ledger_tag_graphics_nofootprint_compressed$LAYOUT, ledger_tag_graphics_nofootprint_compressed$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int64_t ledger_tag_graphics_nofootprint_compressed
     * }
     */
    public static void ledger_tag_graphics_nofootprint_compressed(MemorySegment struct, long fieldValue) {
        struct.set(ledger_tag_graphics_nofootprint_compressed$LAYOUT, ledger_tag_graphics_nofootprint_compressed$OFFSET, fieldValue);
    }

    private static final OfLong ledger_tag_neural_footprint$LAYOUT = (OfLong)$LAYOUT.select(groupElement("ledger_tag_neural_footprint"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int64_t ledger_tag_neural_footprint
     * }
     */
    public static final OfLong ledger_tag_neural_footprint$layout() {
        return ledger_tag_neural_footprint$LAYOUT;
    }

    private static final long ledger_tag_neural_footprint$OFFSET = 304;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int64_t ledger_tag_neural_footprint
     * }
     */
    public static final long ledger_tag_neural_footprint$offset() {
        return ledger_tag_neural_footprint$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int64_t ledger_tag_neural_footprint
     * }
     */
    public static long ledger_tag_neural_footprint(MemorySegment struct) {
        return struct.get(ledger_tag_neural_footprint$LAYOUT, ledger_tag_neural_footprint$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int64_t ledger_tag_neural_footprint
     * }
     */
    public static void ledger_tag_neural_footprint(MemorySegment struct, long fieldValue) {
        struct.set(ledger_tag_neural_footprint$LAYOUT, ledger_tag_neural_footprint$OFFSET, fieldValue);
    }

    private static final OfLong ledger_tag_neural_footprint_compressed$LAYOUT = (OfLong)$LAYOUT.select(groupElement("ledger_tag_neural_footprint_compressed"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int64_t ledger_tag_neural_footprint_compressed
     * }
     */
    public static final OfLong ledger_tag_neural_footprint_compressed$layout() {
        return ledger_tag_neural_footprint_compressed$LAYOUT;
    }

    private static final long ledger_tag_neural_footprint_compressed$OFFSET = 312;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int64_t ledger_tag_neural_footprint_compressed
     * }
     */
    public static final long ledger_tag_neural_footprint_compressed$offset() {
        return ledger_tag_neural_footprint_compressed$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int64_t ledger_tag_neural_footprint_compressed
     * }
     */
    public static long ledger_tag_neural_footprint_compressed(MemorySegment struct) {
        return struct.get(ledger_tag_neural_footprint_compressed$LAYOUT, ledger_tag_neural_footprint_compressed$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int64_t ledger_tag_neural_footprint_compressed
     * }
     */
    public static void ledger_tag_neural_footprint_compressed(MemorySegment struct, long fieldValue) {
        struct.set(ledger_tag_neural_footprint_compressed$LAYOUT, ledger_tag_neural_footprint_compressed$OFFSET, fieldValue);
    }

    private static final OfLong ledger_tag_neural_nofootprint$LAYOUT = (OfLong)$LAYOUT.select(groupElement("ledger_tag_neural_nofootprint"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int64_t ledger_tag_neural_nofootprint
     * }
     */
    public static final OfLong ledger_tag_neural_nofootprint$layout() {
        return ledger_tag_neural_nofootprint$LAYOUT;
    }

    private static final long ledger_tag_neural_nofootprint$OFFSET = 320;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int64_t ledger_tag_neural_nofootprint
     * }
     */
    public static final long ledger_tag_neural_nofootprint$offset() {
        return ledger_tag_neural_nofootprint$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int64_t ledger_tag_neural_nofootprint
     * }
     */
    public static long ledger_tag_neural_nofootprint(MemorySegment struct) {
        return struct.get(ledger_tag_neural_nofootprint$LAYOUT, ledger_tag_neural_nofootprint$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int64_t ledger_tag_neural_nofootprint
     * }
     */
    public static void ledger_tag_neural_nofootprint(MemorySegment struct, long fieldValue) {
        struct.set(ledger_tag_neural_nofootprint$LAYOUT, ledger_tag_neural_nofootprint$OFFSET, fieldValue);
    }

    private static final OfLong ledger_tag_neural_nofootprint_compressed$LAYOUT = (OfLong)$LAYOUT.select(groupElement("ledger_tag_neural_nofootprint_compressed"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int64_t ledger_tag_neural_nofootprint_compressed
     * }
     */
    public static final OfLong ledger_tag_neural_nofootprint_compressed$layout() {
        return ledger_tag_neural_nofootprint_compressed$LAYOUT;
    }

    private static final long ledger_tag_neural_nofootprint_compressed$OFFSET = 328;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int64_t ledger_tag_neural_nofootprint_compressed
     * }
     */
    public static final long ledger_tag_neural_nofootprint_compressed$offset() {
        return ledger_tag_neural_nofootprint_compressed$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int64_t ledger_tag_neural_nofootprint_compressed
     * }
     */
    public static long ledger_tag_neural_nofootprint_compressed(MemorySegment struct) {
        return struct.get(ledger_tag_neural_nofootprint_compressed$LAYOUT, ledger_tag_neural_nofootprint_compressed$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int64_t ledger_tag_neural_nofootprint_compressed
     * }
     */
    public static void ledger_tag_neural_nofootprint_compressed(MemorySegment struct, long fieldValue) {
        struct.set(ledger_tag_neural_nofootprint_compressed$LAYOUT, ledger_tag_neural_nofootprint_compressed$OFFSET, fieldValue);
    }

    private static final OfLong limit_bytes_remaining$LAYOUT = (OfLong)$LAYOUT.select(groupElement("limit_bytes_remaining"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint64_t limit_bytes_remaining
     * }
     */
    public static final OfLong limit_bytes_remaining$layout() {
        return limit_bytes_remaining$LAYOUT;
    }

    private static final long limit_bytes_remaining$OFFSET = 336;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint64_t limit_bytes_remaining
     * }
     */
    public static final long limit_bytes_remaining$offset() {
        return limit_bytes_remaining$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint64_t limit_bytes_remaining
     * }
     */
    public static long limit_bytes_remaining(MemorySegment struct) {
        return struct.get(limit_bytes_remaining$LAYOUT, limit_bytes_remaining$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint64_t limit_bytes_remaining
     * }
     */
    public static void limit_bytes_remaining(MemorySegment struct, long fieldValue) {
        struct.set(limit_bytes_remaining$LAYOUT, limit_bytes_remaining$OFFSET, fieldValue);
    }

    private static final OfInt decompressions$LAYOUT = (OfInt)$LAYOUT.select(groupElement("decompressions"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * integer_t decompressions
     * }
     */
    public static final OfInt decompressions$layout() {
        return decompressions$LAYOUT;
    }

    private static final long decompressions$OFFSET = 344;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * integer_t decompressions
     * }
     */
    public static final long decompressions$offset() {
        return decompressions$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * integer_t decompressions
     * }
     */
    public static int decompressions(MemorySegment struct) {
        return struct.get(decompressions$LAYOUT, decompressions$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * integer_t decompressions
     * }
     */
    public static void decompressions(MemorySegment struct, int fieldValue) {
        struct.set(decompressions$LAYOUT, decompressions$OFFSET, fieldValue);
    }

    private static final OfLong ledger_swapins$LAYOUT = (OfLong)$LAYOUT.select(groupElement("ledger_swapins"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int64_t ledger_swapins
     * }
     */
    public static final OfLong ledger_swapins$layout() {
        return ledger_swapins$LAYOUT;
    }

    private static final long ledger_swapins$OFFSET = 348;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int64_t ledger_swapins
     * }
     */
    public static final long ledger_swapins$offset() {
        return ledger_swapins$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int64_t ledger_swapins
     * }
     */
    public static long ledger_swapins(MemorySegment struct) {
        return struct.get(ledger_swapins$LAYOUT, ledger_swapins$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int64_t ledger_swapins
     * }
     */
    public static void ledger_swapins(MemorySegment struct, long fieldValue) {
        struct.set(ledger_swapins$LAYOUT, ledger_swapins$OFFSET, fieldValue);
    }

    private static final OfLong ledger_tag_neural_nofootprint_total$LAYOUT = (OfLong)$LAYOUT.select(groupElement("ledger_tag_neural_nofootprint_total"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int64_t ledger_tag_neural_nofootprint_total
     * }
     */
    public static final OfLong ledger_tag_neural_nofootprint_total$layout() {
        return ledger_tag_neural_nofootprint_total$LAYOUT;
    }

    private static final long ledger_tag_neural_nofootprint_total$OFFSET = 356;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int64_t ledger_tag_neural_nofootprint_total
     * }
     */
    public static final long ledger_tag_neural_nofootprint_total$offset() {
        return ledger_tag_neural_nofootprint_total$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int64_t ledger_tag_neural_nofootprint_total
     * }
     */
    public static long ledger_tag_neural_nofootprint_total(MemorySegment struct) {
        return struct.get(ledger_tag_neural_nofootprint_total$LAYOUT, ledger_tag_neural_nofootprint_total$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int64_t ledger_tag_neural_nofootprint_total
     * }
     */
    public static void ledger_tag_neural_nofootprint_total(MemorySegment struct, long fieldValue) {
        struct.set(ledger_tag_neural_nofootprint_total$LAYOUT, ledger_tag_neural_nofootprint_total$OFFSET, fieldValue);
    }

    private static final OfLong ledger_tag_neural_nofootprint_peak$LAYOUT = (OfLong)$LAYOUT.select(groupElement("ledger_tag_neural_nofootprint_peak"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int64_t ledger_tag_neural_nofootprint_peak
     * }
     */
    public static final OfLong ledger_tag_neural_nofootprint_peak$layout() {
        return ledger_tag_neural_nofootprint_peak$LAYOUT;
    }

    private static final long ledger_tag_neural_nofootprint_peak$OFFSET = 364;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int64_t ledger_tag_neural_nofootprint_peak
     * }
     */
    public static final long ledger_tag_neural_nofootprint_peak$offset() {
        return ledger_tag_neural_nofootprint_peak$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int64_t ledger_tag_neural_nofootprint_peak
     * }
     */
    public static long ledger_tag_neural_nofootprint_peak(MemorySegment struct) {
        return struct.get(ledger_tag_neural_nofootprint_peak$LAYOUT, ledger_tag_neural_nofootprint_peak$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int64_t ledger_tag_neural_nofootprint_peak
     * }
     */
    public static void ledger_tag_neural_nofootprint_peak(MemorySegment struct, long fieldValue) {
        struct.set(ledger_tag_neural_nofootprint_peak$LAYOUT, ledger_tag_neural_nofootprint_peak$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

