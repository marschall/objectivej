// Generated by jextract

package com.github.marschall.objectivej.header;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct task_wait_state_info {
 *     uint64_t total_wait_state_time;
 *     uint64_t total_wait_sfi_state_time;
 *     uint32_t _reserved[4];
 * }
 * }
 */
public class task_wait_state_info {

    task_wait_state_info() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        ObjCRuntime.align(ObjCRuntime.C_LONG_LONG, 4).withName("total_wait_state_time"),
        ObjCRuntime.align(ObjCRuntime.C_LONG_LONG, 4).withName("total_wait_sfi_state_time"),
        MemoryLayout.sequenceLayout(4, ObjCRuntime.C_INT).withName("_reserved")
    ).withName("task_wait_state_info");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfLong total_wait_state_time$LAYOUT = (OfLong)$LAYOUT.select(groupElement("total_wait_state_time"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint64_t total_wait_state_time
     * }
     */
    public static final OfLong total_wait_state_time$layout() {
        return total_wait_state_time$LAYOUT;
    }

    private static final long total_wait_state_time$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint64_t total_wait_state_time
     * }
     */
    public static final long total_wait_state_time$offset() {
        return total_wait_state_time$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint64_t total_wait_state_time
     * }
     */
    public static long total_wait_state_time(MemorySegment struct) {
        return struct.get(total_wait_state_time$LAYOUT, total_wait_state_time$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint64_t total_wait_state_time
     * }
     */
    public static void total_wait_state_time(MemorySegment struct, long fieldValue) {
        struct.set(total_wait_state_time$LAYOUT, total_wait_state_time$OFFSET, fieldValue);
    }

    private static final OfLong total_wait_sfi_state_time$LAYOUT = (OfLong)$LAYOUT.select(groupElement("total_wait_sfi_state_time"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint64_t total_wait_sfi_state_time
     * }
     */
    public static final OfLong total_wait_sfi_state_time$layout() {
        return total_wait_sfi_state_time$LAYOUT;
    }

    private static final long total_wait_sfi_state_time$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint64_t total_wait_sfi_state_time
     * }
     */
    public static final long total_wait_sfi_state_time$offset() {
        return total_wait_sfi_state_time$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint64_t total_wait_sfi_state_time
     * }
     */
    public static long total_wait_sfi_state_time(MemorySegment struct) {
        return struct.get(total_wait_sfi_state_time$LAYOUT, total_wait_sfi_state_time$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint64_t total_wait_sfi_state_time
     * }
     */
    public static void total_wait_sfi_state_time(MemorySegment struct, long fieldValue) {
        struct.set(total_wait_sfi_state_time$LAYOUT, total_wait_sfi_state_time$OFFSET, fieldValue);
    }

    private static final SequenceLayout _reserved$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("_reserved"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t _reserved[4]
     * }
     */
    public static final SequenceLayout _reserved$layout() {
        return _reserved$LAYOUT;
    }

    private static final long _reserved$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t _reserved[4]
     * }
     */
    public static final long _reserved$offset() {
        return _reserved$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t _reserved[4]
     * }
     */
    public static MemorySegment _reserved(MemorySegment struct) {
        return struct.asSlice(_reserved$OFFSET, _reserved$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t _reserved[4]
     * }
     */
    public static void _reserved(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, _reserved$OFFSET, _reserved$LAYOUT.byteSize());
    }

    private static long[] _reserved$DIMS = { 4 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * uint32_t _reserved[4]
     * }
     */
    public static long[] _reserved$dimensions() {
        return _reserved$DIMS;
    }
    private static final VarHandle _reserved$ELEM_HANDLE = _reserved$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * uint32_t _reserved[4]
     * }
     */
    public static int _reserved(MemorySegment struct, long index0) {
        return (int)_reserved$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * uint32_t _reserved[4]
     * }
     */
    public static void _reserved(MemorySegment struct, long index0, int fieldValue) {
        _reserved$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

