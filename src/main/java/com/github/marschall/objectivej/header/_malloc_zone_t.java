// Generated by jextract

package com.github.marschall.objectivej.header;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _malloc_zone_t {
 *     void *reserved1;
 *     void *reserved2;
 *     size_t (*size)(struct _malloc_zone_t *, const void *);
 *     void *(*malloc)(struct _malloc_zone_t *, size_t);
 *     void *(*calloc)(struct _malloc_zone_t *, size_t, size_t);
 *     void *(*valloc)(struct _malloc_zone_t *, size_t);
 *     void (*free)(struct _malloc_zone_t *, void *);
 *     void *(*realloc)(struct _malloc_zone_t *, void *, size_t);
 *     void (*destroy)(struct _malloc_zone_t *);
 *     const char *zone_name;
 *     unsigned int (*batch_malloc)(struct _malloc_zone_t *, size_t, void **, unsigned int);
 *     void (*batch_free)(struct _malloc_zone_t *, void **, unsigned int);
 *     struct malloc_introspection_t *introspect;
 *     unsigned int version;
 *     void *(*memalign)(struct _malloc_zone_t *, size_t, size_t);
 *     void (*free_definite_size)(struct _malloc_zone_t *, void *, size_t);
 *     size_t (*pressure_relief)(struct _malloc_zone_t *, size_t);
 *     boolean_t (*claimed_address)(struct _malloc_zone_t *, void *);
 *     void (*try_free_default)(struct _malloc_zone_t *, void *);
 *     void *(*malloc_with_options)(struct _malloc_zone_t *, size_t, size_t, uint64_t);
 *     void *(*malloc_type_malloc)(struct _malloc_zone_t *, size_t, malloc_type_id_t);
 *     void *(*malloc_type_calloc)(struct _malloc_zone_t *, size_t, size_t, malloc_type_id_t);
 *     void *(*malloc_type_realloc)(struct _malloc_zone_t *, void *, size_t, malloc_type_id_t);
 *     void *(*malloc_type_memalign)(struct _malloc_zone_t *, size_t, size_t, malloc_type_id_t);
 *     void *(*malloc_type_malloc_with_options)(struct _malloc_zone_t *, size_t, size_t, uint64_t, malloc_type_id_t);
 * }
 * }
 */
public class _malloc_zone_t {

    _malloc_zone_t() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        ObjCRuntime.C_POINTER.withName("reserved1"),
        ObjCRuntime.C_POINTER.withName("reserved2"),
        ObjCRuntime.C_POINTER.withName("size"),
        ObjCRuntime.C_POINTER.withName("malloc"),
        ObjCRuntime.C_POINTER.withName("calloc"),
        ObjCRuntime.C_POINTER.withName("valloc"),
        ObjCRuntime.C_POINTER.withName("free"),
        ObjCRuntime.C_POINTER.withName("realloc"),
        ObjCRuntime.C_POINTER.withName("destroy"),
        ObjCRuntime.C_POINTER.withName("zone_name"),
        ObjCRuntime.C_POINTER.withName("batch_malloc"),
        ObjCRuntime.C_POINTER.withName("batch_free"),
        ObjCRuntime.C_POINTER.withName("introspect"),
        ObjCRuntime.C_INT.withName("version"),
        MemoryLayout.paddingLayout(4),
        ObjCRuntime.C_POINTER.withName("memalign"),
        ObjCRuntime.C_POINTER.withName("free_definite_size"),
        ObjCRuntime.C_POINTER.withName("pressure_relief"),
        ObjCRuntime.C_POINTER.withName("claimed_address"),
        ObjCRuntime.C_POINTER.withName("try_free_default"),
        ObjCRuntime.C_POINTER.withName("malloc_with_options"),
        ObjCRuntime.C_POINTER.withName("malloc_type_malloc"),
        ObjCRuntime.C_POINTER.withName("malloc_type_calloc"),
        ObjCRuntime.C_POINTER.withName("malloc_type_realloc"),
        ObjCRuntime.C_POINTER.withName("malloc_type_memalign"),
        ObjCRuntime.C_POINTER.withName("malloc_type_malloc_with_options")
    ).withName("_malloc_zone_t");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout reserved1$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("reserved1"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *reserved1
     * }
     */
    public static final AddressLayout reserved1$layout() {
        return reserved1$LAYOUT;
    }

    private static final long reserved1$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *reserved1
     * }
     */
    public static final long reserved1$offset() {
        return reserved1$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *reserved1
     * }
     */
    public static MemorySegment reserved1(MemorySegment struct) {
        return struct.get(reserved1$LAYOUT, reserved1$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *reserved1
     * }
     */
    public static void reserved1(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(reserved1$LAYOUT, reserved1$OFFSET, fieldValue);
    }

    private static final AddressLayout reserved2$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("reserved2"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *reserved2
     * }
     */
    public static final AddressLayout reserved2$layout() {
        return reserved2$LAYOUT;
    }

    private static final long reserved2$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *reserved2
     * }
     */
    public static final long reserved2$offset() {
        return reserved2$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *reserved2
     * }
     */
    public static MemorySegment reserved2(MemorySegment struct) {
        return struct.get(reserved2$LAYOUT, reserved2$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *reserved2
     * }
     */
    public static void reserved2(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(reserved2$LAYOUT, reserved2$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * size_t (*size)(struct _malloc_zone_t *, const void *)
     * }
     */
    public static class size {

        size() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            long apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            ObjCRuntime.C_LONG,
            ObjCRuntime.C_POINTER,
            ObjCRuntime.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = ObjCRuntime.upcallHandle(size.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(size.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static long invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                return (long) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout size$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("size"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t (*size)(struct _malloc_zone_t *, const void *)
     * }
     */
    public static final AddressLayout size$layout() {
        return size$LAYOUT;
    }

    private static final long size$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t (*size)(struct _malloc_zone_t *, const void *)
     * }
     */
    public static final long size$offset() {
        return size$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t (*size)(struct _malloc_zone_t *, const void *)
     * }
     */
    public static MemorySegment size(MemorySegment struct) {
        return struct.get(size$LAYOUT, size$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t (*size)(struct _malloc_zone_t *, const void *)
     * }
     */
    public static void size(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(size$LAYOUT, size$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void *(*malloc)(struct _malloc_zone_t *, size_t)
     * }
     */
    public static class malloc {

        malloc() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            MemorySegment apply(MemorySegment _x0, long _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            ObjCRuntime.C_POINTER,
            ObjCRuntime.C_POINTER,
            ObjCRuntime.C_LONG
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = ObjCRuntime.upcallHandle(malloc.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(malloc.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static MemorySegment invoke(MemorySegment funcPtr,MemorySegment _x0, long _x1) {
            try {
                return (MemorySegment) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout malloc$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("malloc"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *(*malloc)(struct _malloc_zone_t *, size_t)
     * }
     */
    public static final AddressLayout malloc$layout() {
        return malloc$LAYOUT;
    }

    private static final long malloc$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *(*malloc)(struct _malloc_zone_t *, size_t)
     * }
     */
    public static final long malloc$offset() {
        return malloc$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *(*malloc)(struct _malloc_zone_t *, size_t)
     * }
     */
    public static MemorySegment malloc(MemorySegment struct) {
        return struct.get(malloc$LAYOUT, malloc$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *(*malloc)(struct _malloc_zone_t *, size_t)
     * }
     */
    public static void malloc(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(malloc$LAYOUT, malloc$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void *(*calloc)(struct _malloc_zone_t *, size_t, size_t)
     * }
     */
    public static class calloc {

        calloc() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            MemorySegment apply(MemorySegment _x0, long _x1, long _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            ObjCRuntime.C_POINTER,
            ObjCRuntime.C_POINTER,
            ObjCRuntime.C_LONG,
            ObjCRuntime.C_LONG
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = ObjCRuntime.upcallHandle(calloc.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(calloc.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static MemorySegment invoke(MemorySegment funcPtr,MemorySegment _x0, long _x1, long _x2) {
            try {
                return (MemorySegment) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout calloc$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("calloc"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *(*calloc)(struct _malloc_zone_t *, size_t, size_t)
     * }
     */
    public static final AddressLayout calloc$layout() {
        return calloc$LAYOUT;
    }

    private static final long calloc$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *(*calloc)(struct _malloc_zone_t *, size_t, size_t)
     * }
     */
    public static final long calloc$offset() {
        return calloc$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *(*calloc)(struct _malloc_zone_t *, size_t, size_t)
     * }
     */
    public static MemorySegment calloc(MemorySegment struct) {
        return struct.get(calloc$LAYOUT, calloc$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *(*calloc)(struct _malloc_zone_t *, size_t, size_t)
     * }
     */
    public static void calloc(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(calloc$LAYOUT, calloc$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void *(*valloc)(struct _malloc_zone_t *, size_t)
     * }
     */
    public static class valloc {

        valloc() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            MemorySegment apply(MemorySegment _x0, long _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            ObjCRuntime.C_POINTER,
            ObjCRuntime.C_POINTER,
            ObjCRuntime.C_LONG
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = ObjCRuntime.upcallHandle(valloc.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(valloc.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static MemorySegment invoke(MemorySegment funcPtr,MemorySegment _x0, long _x1) {
            try {
                return (MemorySegment) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout valloc$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("valloc"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *(*valloc)(struct _malloc_zone_t *, size_t)
     * }
     */
    public static final AddressLayout valloc$layout() {
        return valloc$LAYOUT;
    }

    private static final long valloc$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *(*valloc)(struct _malloc_zone_t *, size_t)
     * }
     */
    public static final long valloc$offset() {
        return valloc$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *(*valloc)(struct _malloc_zone_t *, size_t)
     * }
     */
    public static MemorySegment valloc(MemorySegment struct) {
        return struct.get(valloc$LAYOUT, valloc$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *(*valloc)(struct _malloc_zone_t *, size_t)
     * }
     */
    public static void valloc(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(valloc$LAYOUT, valloc$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*free)(struct _malloc_zone_t *, void *)
     * }
     */
    public static class free {

        free() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            ObjCRuntime.C_POINTER,
            ObjCRuntime.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = ObjCRuntime.upcallHandle(free.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(free.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout free$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("free"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*free)(struct _malloc_zone_t *, void *)
     * }
     */
    public static final AddressLayout free$layout() {
        return free$LAYOUT;
    }

    private static final long free$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*free)(struct _malloc_zone_t *, void *)
     * }
     */
    public static final long free$offset() {
        return free$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*free)(struct _malloc_zone_t *, void *)
     * }
     */
    public static MemorySegment free(MemorySegment struct) {
        return struct.get(free$LAYOUT, free$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*free)(struct _malloc_zone_t *, void *)
     * }
     */
    public static void free(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(free$LAYOUT, free$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void *(*realloc)(struct _malloc_zone_t *, void *, size_t)
     * }
     */
    public static class realloc {

        realloc() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            MemorySegment apply(MemorySegment _x0, MemorySegment _x1, long _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            ObjCRuntime.C_POINTER,
            ObjCRuntime.C_POINTER,
            ObjCRuntime.C_POINTER,
            ObjCRuntime.C_LONG
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = ObjCRuntime.upcallHandle(realloc.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(realloc.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static MemorySegment invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, long _x2) {
            try {
                return (MemorySegment) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout realloc$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("realloc"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *(*realloc)(struct _malloc_zone_t *, void *, size_t)
     * }
     */
    public static final AddressLayout realloc$layout() {
        return realloc$LAYOUT;
    }

    private static final long realloc$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *(*realloc)(struct _malloc_zone_t *, void *, size_t)
     * }
     */
    public static final long realloc$offset() {
        return realloc$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *(*realloc)(struct _malloc_zone_t *, void *, size_t)
     * }
     */
    public static MemorySegment realloc(MemorySegment struct) {
        return struct.get(realloc$LAYOUT, realloc$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *(*realloc)(struct _malloc_zone_t *, void *, size_t)
     * }
     */
    public static void realloc(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(realloc$LAYOUT, realloc$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*destroy)(struct _malloc_zone_t *)
     * }
     */
    public static class destroy {

        destroy() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            ObjCRuntime.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = ObjCRuntime.upcallHandle(destroy.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(destroy.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout destroy$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("destroy"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*destroy)(struct _malloc_zone_t *)
     * }
     */
    public static final AddressLayout destroy$layout() {
        return destroy$LAYOUT;
    }

    private static final long destroy$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*destroy)(struct _malloc_zone_t *)
     * }
     */
    public static final long destroy$offset() {
        return destroy$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*destroy)(struct _malloc_zone_t *)
     * }
     */
    public static MemorySegment destroy(MemorySegment struct) {
        return struct.get(destroy$LAYOUT, destroy$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*destroy)(struct _malloc_zone_t *)
     * }
     */
    public static void destroy(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(destroy$LAYOUT, destroy$OFFSET, fieldValue);
    }

    private static final AddressLayout zone_name$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("zone_name"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *zone_name
     * }
     */
    public static final AddressLayout zone_name$layout() {
        return zone_name$LAYOUT;
    }

    private static final long zone_name$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *zone_name
     * }
     */
    public static final long zone_name$offset() {
        return zone_name$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *zone_name
     * }
     */
    public static MemorySegment zone_name(MemorySegment struct) {
        return struct.get(zone_name$LAYOUT, zone_name$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *zone_name
     * }
     */
    public static void zone_name(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(zone_name$LAYOUT, zone_name$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * unsigned int (*batch_malloc)(struct _malloc_zone_t *, size_t, void **, unsigned int)
     * }
     */
    public static class batch_malloc {

        batch_malloc() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, long _x1, MemorySegment _x2, int _x3);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            ObjCRuntime.C_INT,
            ObjCRuntime.C_POINTER,
            ObjCRuntime.C_LONG,
            ObjCRuntime.C_POINTER,
            ObjCRuntime.C_INT
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = ObjCRuntime.upcallHandle(batch_malloc.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(batch_malloc.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, long _x1, MemorySegment _x2, int _x3) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout batch_malloc$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("batch_malloc"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int (*batch_malloc)(struct _malloc_zone_t *, size_t, void **, unsigned int)
     * }
     */
    public static final AddressLayout batch_malloc$layout() {
        return batch_malloc$LAYOUT;
    }

    private static final long batch_malloc$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int (*batch_malloc)(struct _malloc_zone_t *, size_t, void **, unsigned int)
     * }
     */
    public static final long batch_malloc$offset() {
        return batch_malloc$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int (*batch_malloc)(struct _malloc_zone_t *, size_t, void **, unsigned int)
     * }
     */
    public static MemorySegment batch_malloc(MemorySegment struct) {
        return struct.get(batch_malloc$LAYOUT, batch_malloc$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int (*batch_malloc)(struct _malloc_zone_t *, size_t, void **, unsigned int)
     * }
     */
    public static void batch_malloc(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(batch_malloc$LAYOUT, batch_malloc$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*batch_free)(struct _malloc_zone_t *, void **, unsigned int)
     * }
     */
    public static class batch_free {

        batch_free() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, MemorySegment _x1, int _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            ObjCRuntime.C_POINTER,
            ObjCRuntime.C_POINTER,
            ObjCRuntime.C_INT
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = ObjCRuntime.upcallHandle(batch_free.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(batch_free.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, int _x2) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout batch_free$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("batch_free"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*batch_free)(struct _malloc_zone_t *, void **, unsigned int)
     * }
     */
    public static final AddressLayout batch_free$layout() {
        return batch_free$LAYOUT;
    }

    private static final long batch_free$OFFSET = 88;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*batch_free)(struct _malloc_zone_t *, void **, unsigned int)
     * }
     */
    public static final long batch_free$offset() {
        return batch_free$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*batch_free)(struct _malloc_zone_t *, void **, unsigned int)
     * }
     */
    public static MemorySegment batch_free(MemorySegment struct) {
        return struct.get(batch_free$LAYOUT, batch_free$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*batch_free)(struct _malloc_zone_t *, void **, unsigned int)
     * }
     */
    public static void batch_free(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(batch_free$LAYOUT, batch_free$OFFSET, fieldValue);
    }

    private static final AddressLayout introspect$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("introspect"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct malloc_introspection_t *introspect
     * }
     */
    public static final AddressLayout introspect$layout() {
        return introspect$LAYOUT;
    }

    private static final long introspect$OFFSET = 96;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct malloc_introspection_t *introspect
     * }
     */
    public static final long introspect$offset() {
        return introspect$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct malloc_introspection_t *introspect
     * }
     */
    public static MemorySegment introspect(MemorySegment struct) {
        return struct.get(introspect$LAYOUT, introspect$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct malloc_introspection_t *introspect
     * }
     */
    public static void introspect(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(introspect$LAYOUT, introspect$OFFSET, fieldValue);
    }

    private static final OfInt version$LAYOUT = (OfInt)$LAYOUT.select(groupElement("version"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int version
     * }
     */
    public static final OfInt version$layout() {
        return version$LAYOUT;
    }

    private static final long version$OFFSET = 104;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int version
     * }
     */
    public static final long version$offset() {
        return version$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int version
     * }
     */
    public static int version(MemorySegment struct) {
        return struct.get(version$LAYOUT, version$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int version
     * }
     */
    public static void version(MemorySegment struct, int fieldValue) {
        struct.set(version$LAYOUT, version$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void *(*memalign)(struct _malloc_zone_t *, size_t, size_t)
     * }
     */
    public static class memalign {

        memalign() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            MemorySegment apply(MemorySegment _x0, long _x1, long _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            ObjCRuntime.C_POINTER,
            ObjCRuntime.C_POINTER,
            ObjCRuntime.C_LONG,
            ObjCRuntime.C_LONG
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = ObjCRuntime.upcallHandle(memalign.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(memalign.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static MemorySegment invoke(MemorySegment funcPtr,MemorySegment _x0, long _x1, long _x2) {
            try {
                return (MemorySegment) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout memalign$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("memalign"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *(*memalign)(struct _malloc_zone_t *, size_t, size_t)
     * }
     */
    public static final AddressLayout memalign$layout() {
        return memalign$LAYOUT;
    }

    private static final long memalign$OFFSET = 112;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *(*memalign)(struct _malloc_zone_t *, size_t, size_t)
     * }
     */
    public static final long memalign$offset() {
        return memalign$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *(*memalign)(struct _malloc_zone_t *, size_t, size_t)
     * }
     */
    public static MemorySegment memalign(MemorySegment struct) {
        return struct.get(memalign$LAYOUT, memalign$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *(*memalign)(struct _malloc_zone_t *, size_t, size_t)
     * }
     */
    public static void memalign(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(memalign$LAYOUT, memalign$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*free_definite_size)(struct _malloc_zone_t *, void *, size_t)
     * }
     */
    public static class free_definite_size {

        free_definite_size() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, MemorySegment _x1, long _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            ObjCRuntime.C_POINTER,
            ObjCRuntime.C_POINTER,
            ObjCRuntime.C_LONG
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = ObjCRuntime.upcallHandle(free_definite_size.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(free_definite_size.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, long _x2) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout free_definite_size$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("free_definite_size"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*free_definite_size)(struct _malloc_zone_t *, void *, size_t)
     * }
     */
    public static final AddressLayout free_definite_size$layout() {
        return free_definite_size$LAYOUT;
    }

    private static final long free_definite_size$OFFSET = 120;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*free_definite_size)(struct _malloc_zone_t *, void *, size_t)
     * }
     */
    public static final long free_definite_size$offset() {
        return free_definite_size$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*free_definite_size)(struct _malloc_zone_t *, void *, size_t)
     * }
     */
    public static MemorySegment free_definite_size(MemorySegment struct) {
        return struct.get(free_definite_size$LAYOUT, free_definite_size$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*free_definite_size)(struct _malloc_zone_t *, void *, size_t)
     * }
     */
    public static void free_definite_size(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(free_definite_size$LAYOUT, free_definite_size$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * size_t (*pressure_relief)(struct _malloc_zone_t *, size_t)
     * }
     */
    public static class pressure_relief {

        pressure_relief() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            long apply(MemorySegment _x0, long _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            ObjCRuntime.C_LONG,
            ObjCRuntime.C_POINTER,
            ObjCRuntime.C_LONG
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = ObjCRuntime.upcallHandle(pressure_relief.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(pressure_relief.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static long invoke(MemorySegment funcPtr,MemorySegment _x0, long _x1) {
            try {
                return (long) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout pressure_relief$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pressure_relief"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t (*pressure_relief)(struct _malloc_zone_t *, size_t)
     * }
     */
    public static final AddressLayout pressure_relief$layout() {
        return pressure_relief$LAYOUT;
    }

    private static final long pressure_relief$OFFSET = 128;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t (*pressure_relief)(struct _malloc_zone_t *, size_t)
     * }
     */
    public static final long pressure_relief$offset() {
        return pressure_relief$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t (*pressure_relief)(struct _malloc_zone_t *, size_t)
     * }
     */
    public static MemorySegment pressure_relief(MemorySegment struct) {
        return struct.get(pressure_relief$LAYOUT, pressure_relief$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t (*pressure_relief)(struct _malloc_zone_t *, size_t)
     * }
     */
    public static void pressure_relief(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pressure_relief$LAYOUT, pressure_relief$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * boolean_t (*claimed_address)(struct _malloc_zone_t *, void *)
     * }
     */
    public static class claimed_address {

        claimed_address() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            ObjCRuntime.C_INT,
            ObjCRuntime.C_POINTER,
            ObjCRuntime.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = ObjCRuntime.upcallHandle(claimed_address.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(claimed_address.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout claimed_address$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("claimed_address"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * boolean_t (*claimed_address)(struct _malloc_zone_t *, void *)
     * }
     */
    public static final AddressLayout claimed_address$layout() {
        return claimed_address$LAYOUT;
    }

    private static final long claimed_address$OFFSET = 136;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * boolean_t (*claimed_address)(struct _malloc_zone_t *, void *)
     * }
     */
    public static final long claimed_address$offset() {
        return claimed_address$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * boolean_t (*claimed_address)(struct _malloc_zone_t *, void *)
     * }
     */
    public static MemorySegment claimed_address(MemorySegment struct) {
        return struct.get(claimed_address$LAYOUT, claimed_address$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * boolean_t (*claimed_address)(struct _malloc_zone_t *, void *)
     * }
     */
    public static void claimed_address(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(claimed_address$LAYOUT, claimed_address$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*try_free_default)(struct _malloc_zone_t *, void *)
     * }
     */
    public static class try_free_default {

        try_free_default() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            ObjCRuntime.C_POINTER,
            ObjCRuntime.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = ObjCRuntime.upcallHandle(try_free_default.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(try_free_default.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout try_free_default$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("try_free_default"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*try_free_default)(struct _malloc_zone_t *, void *)
     * }
     */
    public static final AddressLayout try_free_default$layout() {
        return try_free_default$LAYOUT;
    }

    private static final long try_free_default$OFFSET = 144;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*try_free_default)(struct _malloc_zone_t *, void *)
     * }
     */
    public static final long try_free_default$offset() {
        return try_free_default$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*try_free_default)(struct _malloc_zone_t *, void *)
     * }
     */
    public static MemorySegment try_free_default(MemorySegment struct) {
        return struct.get(try_free_default$LAYOUT, try_free_default$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*try_free_default)(struct _malloc_zone_t *, void *)
     * }
     */
    public static void try_free_default(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(try_free_default$LAYOUT, try_free_default$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void *(*malloc_with_options)(struct _malloc_zone_t *, size_t, size_t, uint64_t)
     * }
     */
    public static class malloc_with_options {

        malloc_with_options() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            MemorySegment apply(MemorySegment _x0, long _x1, long _x2, long _x3);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            ObjCRuntime.C_POINTER,
            ObjCRuntime.C_POINTER,
            ObjCRuntime.C_LONG,
            ObjCRuntime.C_LONG,
            ObjCRuntime.C_LONG_LONG
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = ObjCRuntime.upcallHandle(malloc_with_options.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(malloc_with_options.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static MemorySegment invoke(MemorySegment funcPtr,MemorySegment _x0, long _x1, long _x2, long _x3) {
            try {
                return (MemorySegment) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout malloc_with_options$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("malloc_with_options"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *(*malloc_with_options)(struct _malloc_zone_t *, size_t, size_t, uint64_t)
     * }
     */
    public static final AddressLayout malloc_with_options$layout() {
        return malloc_with_options$LAYOUT;
    }

    private static final long malloc_with_options$OFFSET = 152;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *(*malloc_with_options)(struct _malloc_zone_t *, size_t, size_t, uint64_t)
     * }
     */
    public static final long malloc_with_options$offset() {
        return malloc_with_options$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *(*malloc_with_options)(struct _malloc_zone_t *, size_t, size_t, uint64_t)
     * }
     */
    public static MemorySegment malloc_with_options(MemorySegment struct) {
        return struct.get(malloc_with_options$LAYOUT, malloc_with_options$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *(*malloc_with_options)(struct _malloc_zone_t *, size_t, size_t, uint64_t)
     * }
     */
    public static void malloc_with_options(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(malloc_with_options$LAYOUT, malloc_with_options$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void *(*malloc_type_malloc)(struct _malloc_zone_t *, size_t, malloc_type_id_t)
     * }
     */
    public static class malloc_type_malloc {

        malloc_type_malloc() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            MemorySegment apply(MemorySegment _x0, long _x1, long _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            ObjCRuntime.C_POINTER,
            ObjCRuntime.C_POINTER,
            ObjCRuntime.C_LONG,
            ObjCRuntime.C_LONG_LONG
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = ObjCRuntime.upcallHandle(malloc_type_malloc.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(malloc_type_malloc.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static MemorySegment invoke(MemorySegment funcPtr,MemorySegment _x0, long _x1, long _x2) {
            try {
                return (MemorySegment) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout malloc_type_malloc$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("malloc_type_malloc"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *(*malloc_type_malloc)(struct _malloc_zone_t *, size_t, malloc_type_id_t)
     * }
     */
    public static final AddressLayout malloc_type_malloc$layout() {
        return malloc_type_malloc$LAYOUT;
    }

    private static final long malloc_type_malloc$OFFSET = 160;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *(*malloc_type_malloc)(struct _malloc_zone_t *, size_t, malloc_type_id_t)
     * }
     */
    public static final long malloc_type_malloc$offset() {
        return malloc_type_malloc$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *(*malloc_type_malloc)(struct _malloc_zone_t *, size_t, malloc_type_id_t)
     * }
     */
    public static MemorySegment malloc_type_malloc(MemorySegment struct) {
        return struct.get(malloc_type_malloc$LAYOUT, malloc_type_malloc$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *(*malloc_type_malloc)(struct _malloc_zone_t *, size_t, malloc_type_id_t)
     * }
     */
    public static void malloc_type_malloc(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(malloc_type_malloc$LAYOUT, malloc_type_malloc$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void *(*malloc_type_calloc)(struct _malloc_zone_t *, size_t, size_t, malloc_type_id_t)
     * }
     */
    public static class malloc_type_calloc {

        malloc_type_calloc() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            MemorySegment apply(MemorySegment _x0, long _x1, long _x2, long _x3);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            ObjCRuntime.C_POINTER,
            ObjCRuntime.C_POINTER,
            ObjCRuntime.C_LONG,
            ObjCRuntime.C_LONG,
            ObjCRuntime.C_LONG_LONG
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = ObjCRuntime.upcallHandle(malloc_type_calloc.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(malloc_type_calloc.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static MemorySegment invoke(MemorySegment funcPtr,MemorySegment _x0, long _x1, long _x2, long _x3) {
            try {
                return (MemorySegment) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout malloc_type_calloc$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("malloc_type_calloc"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *(*malloc_type_calloc)(struct _malloc_zone_t *, size_t, size_t, malloc_type_id_t)
     * }
     */
    public static final AddressLayout malloc_type_calloc$layout() {
        return malloc_type_calloc$LAYOUT;
    }

    private static final long malloc_type_calloc$OFFSET = 168;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *(*malloc_type_calloc)(struct _malloc_zone_t *, size_t, size_t, malloc_type_id_t)
     * }
     */
    public static final long malloc_type_calloc$offset() {
        return malloc_type_calloc$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *(*malloc_type_calloc)(struct _malloc_zone_t *, size_t, size_t, malloc_type_id_t)
     * }
     */
    public static MemorySegment malloc_type_calloc(MemorySegment struct) {
        return struct.get(malloc_type_calloc$LAYOUT, malloc_type_calloc$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *(*malloc_type_calloc)(struct _malloc_zone_t *, size_t, size_t, malloc_type_id_t)
     * }
     */
    public static void malloc_type_calloc(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(malloc_type_calloc$LAYOUT, malloc_type_calloc$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void *(*malloc_type_realloc)(struct _malloc_zone_t *, void *, size_t, malloc_type_id_t)
     * }
     */
    public static class malloc_type_realloc {

        malloc_type_realloc() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            MemorySegment apply(MemorySegment _x0, MemorySegment _x1, long _x2, long _x3);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            ObjCRuntime.C_POINTER,
            ObjCRuntime.C_POINTER,
            ObjCRuntime.C_POINTER,
            ObjCRuntime.C_LONG,
            ObjCRuntime.C_LONG_LONG
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = ObjCRuntime.upcallHandle(malloc_type_realloc.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(malloc_type_realloc.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static MemorySegment invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, long _x2, long _x3) {
            try {
                return (MemorySegment) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout malloc_type_realloc$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("malloc_type_realloc"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *(*malloc_type_realloc)(struct _malloc_zone_t *, void *, size_t, malloc_type_id_t)
     * }
     */
    public static final AddressLayout malloc_type_realloc$layout() {
        return malloc_type_realloc$LAYOUT;
    }

    private static final long malloc_type_realloc$OFFSET = 176;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *(*malloc_type_realloc)(struct _malloc_zone_t *, void *, size_t, malloc_type_id_t)
     * }
     */
    public static final long malloc_type_realloc$offset() {
        return malloc_type_realloc$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *(*malloc_type_realloc)(struct _malloc_zone_t *, void *, size_t, malloc_type_id_t)
     * }
     */
    public static MemorySegment malloc_type_realloc(MemorySegment struct) {
        return struct.get(malloc_type_realloc$LAYOUT, malloc_type_realloc$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *(*malloc_type_realloc)(struct _malloc_zone_t *, void *, size_t, malloc_type_id_t)
     * }
     */
    public static void malloc_type_realloc(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(malloc_type_realloc$LAYOUT, malloc_type_realloc$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void *(*malloc_type_memalign)(struct _malloc_zone_t *, size_t, size_t, malloc_type_id_t)
     * }
     */
    public static class malloc_type_memalign {

        malloc_type_memalign() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            MemorySegment apply(MemorySegment _x0, long _x1, long _x2, long _x3);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            ObjCRuntime.C_POINTER,
            ObjCRuntime.C_POINTER,
            ObjCRuntime.C_LONG,
            ObjCRuntime.C_LONG,
            ObjCRuntime.C_LONG_LONG
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = ObjCRuntime.upcallHandle(malloc_type_memalign.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(malloc_type_memalign.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static MemorySegment invoke(MemorySegment funcPtr,MemorySegment _x0, long _x1, long _x2, long _x3) {
            try {
                return (MemorySegment) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout malloc_type_memalign$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("malloc_type_memalign"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *(*malloc_type_memalign)(struct _malloc_zone_t *, size_t, size_t, malloc_type_id_t)
     * }
     */
    public static final AddressLayout malloc_type_memalign$layout() {
        return malloc_type_memalign$LAYOUT;
    }

    private static final long malloc_type_memalign$OFFSET = 184;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *(*malloc_type_memalign)(struct _malloc_zone_t *, size_t, size_t, malloc_type_id_t)
     * }
     */
    public static final long malloc_type_memalign$offset() {
        return malloc_type_memalign$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *(*malloc_type_memalign)(struct _malloc_zone_t *, size_t, size_t, malloc_type_id_t)
     * }
     */
    public static MemorySegment malloc_type_memalign(MemorySegment struct) {
        return struct.get(malloc_type_memalign$LAYOUT, malloc_type_memalign$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *(*malloc_type_memalign)(struct _malloc_zone_t *, size_t, size_t, malloc_type_id_t)
     * }
     */
    public static void malloc_type_memalign(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(malloc_type_memalign$LAYOUT, malloc_type_memalign$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void *(*malloc_type_malloc_with_options)(struct _malloc_zone_t *, size_t, size_t, uint64_t, malloc_type_id_t)
     * }
     */
    public static class malloc_type_malloc_with_options {

        malloc_type_malloc_with_options() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            MemorySegment apply(MemorySegment _x0, long _x1, long _x2, long _x3, long _x4);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            ObjCRuntime.C_POINTER,
            ObjCRuntime.C_POINTER,
            ObjCRuntime.C_LONG,
            ObjCRuntime.C_LONG,
            ObjCRuntime.C_LONG_LONG,
            ObjCRuntime.C_LONG_LONG
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = ObjCRuntime.upcallHandle(malloc_type_malloc_with_options.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(malloc_type_malloc_with_options.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static MemorySegment invoke(MemorySegment funcPtr,MemorySegment _x0, long _x1, long _x2, long _x3, long _x4) {
            try {
                return (MemorySegment) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3, _x4);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout malloc_type_malloc_with_options$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("malloc_type_malloc_with_options"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *(*malloc_type_malloc_with_options)(struct _malloc_zone_t *, size_t, size_t, uint64_t, malloc_type_id_t)
     * }
     */
    public static final AddressLayout malloc_type_malloc_with_options$layout() {
        return malloc_type_malloc_with_options$LAYOUT;
    }

    private static final long malloc_type_malloc_with_options$OFFSET = 192;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *(*malloc_type_malloc_with_options)(struct _malloc_zone_t *, size_t, size_t, uint64_t, malloc_type_id_t)
     * }
     */
    public static final long malloc_type_malloc_with_options$offset() {
        return malloc_type_malloc_with_options$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *(*malloc_type_malloc_with_options)(struct _malloc_zone_t *, size_t, size_t, uint64_t, malloc_type_id_t)
     * }
     */
    public static MemorySegment malloc_type_malloc_with_options(MemorySegment struct) {
        return struct.get(malloc_type_malloc_with_options$LAYOUT, malloc_type_malloc_with_options$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *(*malloc_type_malloc_with_options)(struct _malloc_zone_t *, size_t, size_t, uint64_t, malloc_type_id_t)
     * }
     */
    public static void malloc_type_malloc_with_options(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(malloc_type_malloc_with_options$LAYOUT, malloc_type_malloc_with_options$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

