// Generated by jextract

package com.github.marschall.objectivej.header;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * union {
 *     mach_msg_port_descriptor_t port;
 *     mach_msg_ool_descriptor_t out_of_line;
 *     mach_msg_ool_ports_descriptor_t ool_ports;
 *     mach_msg_type_descriptor_t type;
 *     mach_msg_guarded_port_descriptor_t guarded_port;
 * }
 * }
 */
public class mach_msg_descriptor_t {

    mach_msg_descriptor_t() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.unionLayout(
        mach_msg_port_descriptor_t.layout().withName("port"),
        mach_msg_ool_descriptor_t.layout().withName("out_of_line"),
        mach_msg_ool_ports_descriptor_t.layout().withName("ool_ports"),
        mach_msg_type_descriptor_t.layout().withName("type"),
        mach_msg_guarded_port_descriptor_t.layout().withName("guarded_port")
    ).withName("$anon$407:9");

    /**
     * The layout of this union
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout port$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("port"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * mach_msg_port_descriptor_t port
     * }
     */
    public static final GroupLayout port$layout() {
        return port$LAYOUT;
    }

    private static final long port$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * mach_msg_port_descriptor_t port
     * }
     */
    public static final long port$offset() {
        return port$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * mach_msg_port_descriptor_t port
     * }
     */
    public static MemorySegment port(MemorySegment union) {
        return union.asSlice(port$OFFSET, port$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * mach_msg_port_descriptor_t port
     * }
     */
    public static void port(MemorySegment union, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, union, port$OFFSET, port$LAYOUT.byteSize());
    }

    private static final GroupLayout out_of_line$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("out_of_line"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * mach_msg_ool_descriptor_t out_of_line
     * }
     */
    public static final GroupLayout out_of_line$layout() {
        return out_of_line$LAYOUT;
    }

    private static final long out_of_line$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * mach_msg_ool_descriptor_t out_of_line
     * }
     */
    public static final long out_of_line$offset() {
        return out_of_line$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * mach_msg_ool_descriptor_t out_of_line
     * }
     */
    public static MemorySegment out_of_line(MemorySegment union) {
        return union.asSlice(out_of_line$OFFSET, out_of_line$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * mach_msg_ool_descriptor_t out_of_line
     * }
     */
    public static void out_of_line(MemorySegment union, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, union, out_of_line$OFFSET, out_of_line$LAYOUT.byteSize());
    }

    private static final GroupLayout ool_ports$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("ool_ports"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * mach_msg_ool_ports_descriptor_t ool_ports
     * }
     */
    public static final GroupLayout ool_ports$layout() {
        return ool_ports$LAYOUT;
    }

    private static final long ool_ports$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * mach_msg_ool_ports_descriptor_t ool_ports
     * }
     */
    public static final long ool_ports$offset() {
        return ool_ports$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * mach_msg_ool_ports_descriptor_t ool_ports
     * }
     */
    public static MemorySegment ool_ports(MemorySegment union) {
        return union.asSlice(ool_ports$OFFSET, ool_ports$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * mach_msg_ool_ports_descriptor_t ool_ports
     * }
     */
    public static void ool_ports(MemorySegment union, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, union, ool_ports$OFFSET, ool_ports$LAYOUT.byteSize());
    }

    private static final GroupLayout type$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("type"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * mach_msg_type_descriptor_t type
     * }
     */
    public static final GroupLayout type$layout() {
        return type$LAYOUT;
    }

    private static final long type$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * mach_msg_type_descriptor_t type
     * }
     */
    public static final long type$offset() {
        return type$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * mach_msg_type_descriptor_t type
     * }
     */
    public static MemorySegment type(MemorySegment union) {
        return union.asSlice(type$OFFSET, type$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * mach_msg_type_descriptor_t type
     * }
     */
    public static void type(MemorySegment union, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, union, type$OFFSET, type$LAYOUT.byteSize());
    }

    private static final GroupLayout guarded_port$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("guarded_port"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * mach_msg_guarded_port_descriptor_t guarded_port
     * }
     */
    public static final GroupLayout guarded_port$layout() {
        return guarded_port$LAYOUT;
    }

    private static final long guarded_port$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * mach_msg_guarded_port_descriptor_t guarded_port
     * }
     */
    public static final long guarded_port$offset() {
        return guarded_port$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * mach_msg_guarded_port_descriptor_t guarded_port
     * }
     */
    public static MemorySegment guarded_port(MemorySegment union) {
        return union.asSlice(guarded_port$OFFSET, guarded_port$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * mach_msg_guarded_port_descriptor_t guarded_port
     * }
     */
    public static void guarded_port(MemorySegment union, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, union, guarded_port$OFFSET, guarded_port$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this union
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

