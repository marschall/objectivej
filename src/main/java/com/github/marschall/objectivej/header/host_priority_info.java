// Generated by jextract

package com.github.marschall.objectivej.header;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct host_priority_info {
 *     integer_t kernel_priority;
 *     integer_t system_priority;
 *     integer_t server_priority;
 *     integer_t user_priority;
 *     integer_t depress_priority;
 *     integer_t idle_priority;
 *     integer_t minimum_priority;
 *     integer_t maximum_priority;
 * }
 * }
 */
public class host_priority_info {

    host_priority_info() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        ObjCRuntime.C_INT.withName("kernel_priority"),
        ObjCRuntime.C_INT.withName("system_priority"),
        ObjCRuntime.C_INT.withName("server_priority"),
        ObjCRuntime.C_INT.withName("user_priority"),
        ObjCRuntime.C_INT.withName("depress_priority"),
        ObjCRuntime.C_INT.withName("idle_priority"),
        ObjCRuntime.C_INT.withName("minimum_priority"),
        ObjCRuntime.C_INT.withName("maximum_priority")
    ).withName("host_priority_info");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt kernel_priority$LAYOUT = (OfInt)$LAYOUT.select(groupElement("kernel_priority"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * integer_t kernel_priority
     * }
     */
    public static final OfInt kernel_priority$layout() {
        return kernel_priority$LAYOUT;
    }

    private static final long kernel_priority$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * integer_t kernel_priority
     * }
     */
    public static final long kernel_priority$offset() {
        return kernel_priority$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * integer_t kernel_priority
     * }
     */
    public static int kernel_priority(MemorySegment struct) {
        return struct.get(kernel_priority$LAYOUT, kernel_priority$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * integer_t kernel_priority
     * }
     */
    public static void kernel_priority(MemorySegment struct, int fieldValue) {
        struct.set(kernel_priority$LAYOUT, kernel_priority$OFFSET, fieldValue);
    }

    private static final OfInt system_priority$LAYOUT = (OfInt)$LAYOUT.select(groupElement("system_priority"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * integer_t system_priority
     * }
     */
    public static final OfInt system_priority$layout() {
        return system_priority$LAYOUT;
    }

    private static final long system_priority$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * integer_t system_priority
     * }
     */
    public static final long system_priority$offset() {
        return system_priority$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * integer_t system_priority
     * }
     */
    public static int system_priority(MemorySegment struct) {
        return struct.get(system_priority$LAYOUT, system_priority$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * integer_t system_priority
     * }
     */
    public static void system_priority(MemorySegment struct, int fieldValue) {
        struct.set(system_priority$LAYOUT, system_priority$OFFSET, fieldValue);
    }

    private static final OfInt server_priority$LAYOUT = (OfInt)$LAYOUT.select(groupElement("server_priority"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * integer_t server_priority
     * }
     */
    public static final OfInt server_priority$layout() {
        return server_priority$LAYOUT;
    }

    private static final long server_priority$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * integer_t server_priority
     * }
     */
    public static final long server_priority$offset() {
        return server_priority$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * integer_t server_priority
     * }
     */
    public static int server_priority(MemorySegment struct) {
        return struct.get(server_priority$LAYOUT, server_priority$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * integer_t server_priority
     * }
     */
    public static void server_priority(MemorySegment struct, int fieldValue) {
        struct.set(server_priority$LAYOUT, server_priority$OFFSET, fieldValue);
    }

    private static final OfInt user_priority$LAYOUT = (OfInt)$LAYOUT.select(groupElement("user_priority"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * integer_t user_priority
     * }
     */
    public static final OfInt user_priority$layout() {
        return user_priority$LAYOUT;
    }

    private static final long user_priority$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * integer_t user_priority
     * }
     */
    public static final long user_priority$offset() {
        return user_priority$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * integer_t user_priority
     * }
     */
    public static int user_priority(MemorySegment struct) {
        return struct.get(user_priority$LAYOUT, user_priority$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * integer_t user_priority
     * }
     */
    public static void user_priority(MemorySegment struct, int fieldValue) {
        struct.set(user_priority$LAYOUT, user_priority$OFFSET, fieldValue);
    }

    private static final OfInt depress_priority$LAYOUT = (OfInt)$LAYOUT.select(groupElement("depress_priority"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * integer_t depress_priority
     * }
     */
    public static final OfInt depress_priority$layout() {
        return depress_priority$LAYOUT;
    }

    private static final long depress_priority$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * integer_t depress_priority
     * }
     */
    public static final long depress_priority$offset() {
        return depress_priority$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * integer_t depress_priority
     * }
     */
    public static int depress_priority(MemorySegment struct) {
        return struct.get(depress_priority$LAYOUT, depress_priority$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * integer_t depress_priority
     * }
     */
    public static void depress_priority(MemorySegment struct, int fieldValue) {
        struct.set(depress_priority$LAYOUT, depress_priority$OFFSET, fieldValue);
    }

    private static final OfInt idle_priority$LAYOUT = (OfInt)$LAYOUT.select(groupElement("idle_priority"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * integer_t idle_priority
     * }
     */
    public static final OfInt idle_priority$layout() {
        return idle_priority$LAYOUT;
    }

    private static final long idle_priority$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * integer_t idle_priority
     * }
     */
    public static final long idle_priority$offset() {
        return idle_priority$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * integer_t idle_priority
     * }
     */
    public static int idle_priority(MemorySegment struct) {
        return struct.get(idle_priority$LAYOUT, idle_priority$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * integer_t idle_priority
     * }
     */
    public static void idle_priority(MemorySegment struct, int fieldValue) {
        struct.set(idle_priority$LAYOUT, idle_priority$OFFSET, fieldValue);
    }

    private static final OfInt minimum_priority$LAYOUT = (OfInt)$LAYOUT.select(groupElement("minimum_priority"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * integer_t minimum_priority
     * }
     */
    public static final OfInt minimum_priority$layout() {
        return minimum_priority$LAYOUT;
    }

    private static final long minimum_priority$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * integer_t minimum_priority
     * }
     */
    public static final long minimum_priority$offset() {
        return minimum_priority$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * integer_t minimum_priority
     * }
     */
    public static int minimum_priority(MemorySegment struct) {
        return struct.get(minimum_priority$LAYOUT, minimum_priority$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * integer_t minimum_priority
     * }
     */
    public static void minimum_priority(MemorySegment struct, int fieldValue) {
        struct.set(minimum_priority$LAYOUT, minimum_priority$OFFSET, fieldValue);
    }

    private static final OfInt maximum_priority$LAYOUT = (OfInt)$LAYOUT.select(groupElement("maximum_priority"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * integer_t maximum_priority
     * }
     */
    public static final OfInt maximum_priority$layout() {
        return maximum_priority$LAYOUT;
    }

    private static final long maximum_priority$OFFSET = 28;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * integer_t maximum_priority
     * }
     */
    public static final long maximum_priority$offset() {
        return maximum_priority$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * integer_t maximum_priority
     * }
     */
    public static int maximum_priority(MemorySegment struct) {
        return struct.get(maximum_priority$LAYOUT, maximum_priority$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * integer_t maximum_priority
     * }
     */
    public static void maximum_priority(MemorySegment struct, int fieldValue) {
        struct.set(maximum_priority$LAYOUT, maximum_priority$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

