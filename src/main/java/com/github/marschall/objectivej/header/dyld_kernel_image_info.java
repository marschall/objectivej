// Generated by jextract

package com.github.marschall.objectivej.header;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct dyld_kernel_image_info {
 *     uuid_t uuid;
 *     fsobj_id_t fsobjid;
 *     fsid_t fsid;
 *     uint64_t load_addr;
 * }
 * }
 */
public class dyld_kernel_image_info {

    dyld_kernel_image_info() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.sequenceLayout(16, ObjCRuntime.C_CHAR).withName("uuid"),
        fsobj_id.layout().withName("fsobjid"),
        fsid.layout().withName("fsid"),
        ObjCRuntime.C_LONG_LONG.withName("load_addr")
    ).withName("dyld_kernel_image_info");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final SequenceLayout uuid$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("uuid"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uuid_t uuid
     * }
     */
    public static final SequenceLayout uuid$layout() {
        return uuid$LAYOUT;
    }

    private static final long uuid$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uuid_t uuid
     * }
     */
    public static final long uuid$offset() {
        return uuid$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uuid_t uuid
     * }
     */
    public static MemorySegment uuid(MemorySegment struct) {
        return struct.asSlice(uuid$OFFSET, uuid$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uuid_t uuid
     * }
     */
    public static void uuid(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, uuid$OFFSET, uuid$LAYOUT.byteSize());
    }

    private static final GroupLayout fsobjid$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("fsobjid"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * fsobj_id_t fsobjid
     * }
     */
    public static final GroupLayout fsobjid$layout() {
        return fsobjid$LAYOUT;
    }

    private static final long fsobjid$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * fsobj_id_t fsobjid
     * }
     */
    public static final long fsobjid$offset() {
        return fsobjid$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * fsobj_id_t fsobjid
     * }
     */
    public static MemorySegment fsobjid(MemorySegment struct) {
        return struct.asSlice(fsobjid$OFFSET, fsobjid$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * fsobj_id_t fsobjid
     * }
     */
    public static void fsobjid(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, fsobjid$OFFSET, fsobjid$LAYOUT.byteSize());
    }

    private static final GroupLayout fsid$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("fsid"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * fsid_t fsid
     * }
     */
    public static final GroupLayout fsid$layout() {
        return fsid$LAYOUT;
    }

    private static final long fsid$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * fsid_t fsid
     * }
     */
    public static final long fsid$offset() {
        return fsid$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * fsid_t fsid
     * }
     */
    public static MemorySegment fsid(MemorySegment struct) {
        return struct.asSlice(fsid$OFFSET, fsid$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * fsid_t fsid
     * }
     */
    public static void fsid(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, fsid$OFFSET, fsid$LAYOUT.byteSize());
    }

    private static final OfLong load_addr$LAYOUT = (OfLong)$LAYOUT.select(groupElement("load_addr"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint64_t load_addr
     * }
     */
    public static final OfLong load_addr$layout() {
        return load_addr$LAYOUT;
    }

    private static final long load_addr$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint64_t load_addr
     * }
     */
    public static final long load_addr$offset() {
        return load_addr$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint64_t load_addr
     * }
     */
    public static long load_addr(MemorySegment struct) {
        return struct.get(load_addr$LAYOUT, load_addr$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint64_t load_addr
     * }
     */
    public static void load_addr(MemorySegment struct, long fieldValue) {
        struct.set(load_addr$LAYOUT, load_addr$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

