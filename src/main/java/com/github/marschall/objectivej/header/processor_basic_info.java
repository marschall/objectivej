// Generated by jextract

package com.github.marschall.objectivej.header;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct processor_basic_info {
 *     cpu_type_t cpu_type;
 *     cpu_subtype_t cpu_subtype;
 *     boolean_t running;
 *     int slot_num;
 *     union {
 *         boolean_t is_master;
 *         boolean_t is_main;
 *     };
 * }
 * }
 */
public class processor_basic_info {

    processor_basic_info() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        ObjCRuntime.C_INT.withName("cpu_type"),
        ObjCRuntime.C_INT.withName("cpu_subtype"),
        ObjCRuntime.C_INT.withName("running"),
        ObjCRuntime.C_INT.withName("slot_num"),
        MemoryLayout.unionLayout(
            ObjCRuntime.C_INT.withName("is_master"),
            ObjCRuntime.C_INT.withName("is_main")
        ).withName("$anon$103:2")
    ).withName("processor_basic_info");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt cpu_type$LAYOUT = (OfInt)$LAYOUT.select(groupElement("cpu_type"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * cpu_type_t cpu_type
     * }
     */
    public static final OfInt cpu_type$layout() {
        return cpu_type$LAYOUT;
    }

    private static final long cpu_type$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * cpu_type_t cpu_type
     * }
     */
    public static final long cpu_type$offset() {
        return cpu_type$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * cpu_type_t cpu_type
     * }
     */
    public static int cpu_type(MemorySegment struct) {
        return struct.get(cpu_type$LAYOUT, cpu_type$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * cpu_type_t cpu_type
     * }
     */
    public static void cpu_type(MemorySegment struct, int fieldValue) {
        struct.set(cpu_type$LAYOUT, cpu_type$OFFSET, fieldValue);
    }

    private static final OfInt cpu_subtype$LAYOUT = (OfInt)$LAYOUT.select(groupElement("cpu_subtype"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * cpu_subtype_t cpu_subtype
     * }
     */
    public static final OfInt cpu_subtype$layout() {
        return cpu_subtype$LAYOUT;
    }

    private static final long cpu_subtype$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * cpu_subtype_t cpu_subtype
     * }
     */
    public static final long cpu_subtype$offset() {
        return cpu_subtype$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * cpu_subtype_t cpu_subtype
     * }
     */
    public static int cpu_subtype(MemorySegment struct) {
        return struct.get(cpu_subtype$LAYOUT, cpu_subtype$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * cpu_subtype_t cpu_subtype
     * }
     */
    public static void cpu_subtype(MemorySegment struct, int fieldValue) {
        struct.set(cpu_subtype$LAYOUT, cpu_subtype$OFFSET, fieldValue);
    }

    private static final OfInt running$LAYOUT = (OfInt)$LAYOUT.select(groupElement("running"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * boolean_t running
     * }
     */
    public static final OfInt running$layout() {
        return running$LAYOUT;
    }

    private static final long running$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * boolean_t running
     * }
     */
    public static final long running$offset() {
        return running$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * boolean_t running
     * }
     */
    public static int running(MemorySegment struct) {
        return struct.get(running$LAYOUT, running$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * boolean_t running
     * }
     */
    public static void running(MemorySegment struct, int fieldValue) {
        struct.set(running$LAYOUT, running$OFFSET, fieldValue);
    }

    private static final OfInt slot_num$LAYOUT = (OfInt)$LAYOUT.select(groupElement("slot_num"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int slot_num
     * }
     */
    public static final OfInt slot_num$layout() {
        return slot_num$LAYOUT;
    }

    private static final long slot_num$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int slot_num
     * }
     */
    public static final long slot_num$offset() {
        return slot_num$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int slot_num
     * }
     */
    public static int slot_num(MemorySegment struct) {
        return struct.get(slot_num$LAYOUT, slot_num$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int slot_num
     * }
     */
    public static void slot_num(MemorySegment struct, int fieldValue) {
        struct.set(slot_num$LAYOUT, slot_num$OFFSET, fieldValue);
    }

    private static final OfInt is_master$LAYOUT = (OfInt)$LAYOUT.select(groupElement("$anon$103:2"), groupElement("is_master"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * boolean_t is_master
     * }
     */
    public static final OfInt is_master$layout() {
        return is_master$LAYOUT;
    }

    private static final long is_master$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * boolean_t is_master
     * }
     */
    public static final long is_master$offset() {
        return is_master$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * boolean_t is_master
     * }
     */
    public static int is_master(MemorySegment struct) {
        return struct.get(is_master$LAYOUT, is_master$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * boolean_t is_master
     * }
     */
    public static void is_master(MemorySegment struct, int fieldValue) {
        struct.set(is_master$LAYOUT, is_master$OFFSET, fieldValue);
    }

    private static final OfInt is_main$LAYOUT = (OfInt)$LAYOUT.select(groupElement("$anon$103:2"), groupElement("is_main"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * boolean_t is_main
     * }
     */
    public static final OfInt is_main$layout() {
        return is_main$LAYOUT;
    }

    private static final long is_main$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * boolean_t is_main
     * }
     */
    public static final long is_main$offset() {
        return is_main$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * boolean_t is_main
     * }
     */
    public static int is_main(MemorySegment struct) {
        return struct.get(is_main$LAYOUT, is_main$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * boolean_t is_main
     * }
     */
    public static void is_main(MemorySegment struct, int fieldValue) {
        struct.set(is_main$LAYOUT, is_main$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

